// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_MatrixUtils
#include <hxinc/MatrixUtils.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector3
#include <hxinc/kha/math/FastVector3.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e6c0ab85770aefb5_5_rotateMatrix4,"MatrixUtils","rotateMatrix4",0xdd739cda,"MatrixUtils.rotateMatrix4","MatrixUtils.hx",5,0x35ef7cae)

void MatrixUtils_obj::__construct() { }

Dynamic MatrixUtils_obj::__CreateEmpty() { return new MatrixUtils_obj; }

void *MatrixUtils_obj::_hx_vtable = 0;

Dynamic MatrixUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MatrixUtils_obj > _hx_result = new MatrixUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MatrixUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04c4fe30;
}

 ::kha::math::FastMatrix4 MatrixUtils_obj::rotateMatrix4( ::kha::math::FastMatrix4 matrix,Float angle, ::kha::math::FastVector3 axis){
            	HX_GC_STACKFRAME(&_hx_pos_e6c0ab85770aefb5_5_rotateMatrix4)
HXLINE(   6)		Float cosAngle = ::Math_obj::cos(angle);
HXLINE(   7)		Float sinAngle = ::Math_obj::sin(angle);
HXLINE(   8)		Float oneMinusCos = (((Float)1.0) - cosAngle);
HXLINE(  10)		float x = axis->x;
HXLINE(  11)		float y = axis->y;
HXLINE(  12)		float z = axis->z;
HXLINE(  14)		float rotationMatrix__00 = ( (float)((cosAngle + (( (Float)((x * x)) ) * oneMinusCos))) );
HXDLIN(  14)		float rotationMatrix__10 = ( (float)(((( (Float)((y * x)) ) * oneMinusCos) + (( (Float)(z) ) * sinAngle))) );
HXDLIN(  14)		float rotationMatrix__20 = ( (float)(((( (Float)((x * z)) ) * oneMinusCos) - (( (Float)(y) ) * sinAngle))) );
HXDLIN(  14)		float rotationMatrix__30 = ( (float)(0) );
HXDLIN(  14)		float rotationMatrix__01 = ( (float)(((( (Float)((x * y)) ) * oneMinusCos) - (( (Float)(z) ) * sinAngle))) );
HXDLIN(  14)		float rotationMatrix__11 = ( (float)((cosAngle + (( (Float)((y * y)) ) * oneMinusCos))) );
HXDLIN(  14)		float rotationMatrix__21 = ( (float)(((( (Float)((y * z)) ) * oneMinusCos) + (( (Float)(x) ) * sinAngle))) );
HXDLIN(  14)		float rotationMatrix__31 = ( (float)(0) );
HXDLIN(  14)		float rotationMatrix__02 = ( (float)(((( (Float)((x * z)) ) * oneMinusCos) + (( (Float)(y) ) * sinAngle))) );
HXDLIN(  14)		float rotationMatrix__12 = ( (float)(((( (Float)((y * z)) ) * oneMinusCos) - (( (Float)(x) ) * sinAngle))) );
HXDLIN(  14)		float rotationMatrix__22 = ( (float)((cosAngle + (( (Float)((z * z)) ) * oneMinusCos))) );
HXDLIN(  14)		float rotationMatrix__32 = ( (float)(0) );
HXDLIN(  14)		float rotationMatrix__03 = ( (float)(0) );
HXDLIN(  14)		float rotationMatrix__13 = ( (float)(0) );
HXDLIN(  14)		float rotationMatrix__23 = ( (float)(0) );
HXDLIN(  14)		float rotationMatrix__33 = ( (float)(1) );
HXLINE(  27)		return  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,((((matrix->_00 * rotationMatrix__00) + (matrix->_10 * rotationMatrix__01)) + (matrix->_20 * rotationMatrix__02)) + (matrix->_30 * rotationMatrix__03)),((((matrix->_00 * rotationMatrix__10) + (matrix->_10 * rotationMatrix__11)) + (matrix->_20 * rotationMatrix__12)) + (matrix->_30 * rotationMatrix__13)),((((matrix->_00 * rotationMatrix__20) + (matrix->_10 * rotationMatrix__21)) + (matrix->_20 * rotationMatrix__22)) + (matrix->_30 * rotationMatrix__23)),((((matrix->_00 * rotationMatrix__30) + (matrix->_10 * rotationMatrix__31)) + (matrix->_20 * rotationMatrix__32)) + (matrix->_30 * rotationMatrix__33)),((((matrix->_01 * rotationMatrix__00) + (matrix->_11 * rotationMatrix__01)) + (matrix->_21 * rotationMatrix__02)) + (matrix->_31 * rotationMatrix__03)),((((matrix->_01 * rotationMatrix__10) + (matrix->_11 * rotationMatrix__11)) + (matrix->_21 * rotationMatrix__12)) + (matrix->_31 * rotationMatrix__13)),((((matrix->_01 * rotationMatrix__20) + (matrix->_11 * rotationMatrix__21)) + (matrix->_21 * rotationMatrix__22)) + (matrix->_31 * rotationMatrix__23)),((((matrix->_01 * rotationMatrix__30) + (matrix->_11 * rotationMatrix__31)) + (matrix->_21 * rotationMatrix__32)) + (matrix->_31 * rotationMatrix__33)),((((matrix->_02 * rotationMatrix__00) + (matrix->_12 * rotationMatrix__01)) + (matrix->_22 * rotationMatrix__02)) + (matrix->_32 * rotationMatrix__03)),((((matrix->_02 * rotationMatrix__10) + (matrix->_12 * rotationMatrix__11)) + (matrix->_22 * rotationMatrix__12)) + (matrix->_32 * rotationMatrix__13)),((((matrix->_02 * rotationMatrix__20) + (matrix->_12 * rotationMatrix__21)) + (matrix->_22 * rotationMatrix__22)) + (matrix->_32 * rotationMatrix__23)),((((matrix->_02 * rotationMatrix__30) + (matrix->_12 * rotationMatrix__31)) + (matrix->_22 * rotationMatrix__32)) + (matrix->_32 * rotationMatrix__33)),((((matrix->_03 * rotationMatrix__00) + (matrix->_13 * rotationMatrix__01)) + (matrix->_23 * rotationMatrix__02)) + (matrix->_33 * rotationMatrix__03)),((((matrix->_03 * rotationMatrix__10) + (matrix->_13 * rotationMatrix__11)) + (matrix->_23 * rotationMatrix__12)) + (matrix->_33 * rotationMatrix__13)),((((matrix->_03 * rotationMatrix__20) + (matrix->_13 * rotationMatrix__21)) + (matrix->_23 * rotationMatrix__22)) + (matrix->_33 * rotationMatrix__23)),((((matrix->_03 * rotationMatrix__30) + (matrix->_13 * rotationMatrix__31)) + (matrix->_23 * rotationMatrix__32)) + (matrix->_33 * rotationMatrix__33)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtils_obj,rotateMatrix4,return )


MatrixUtils_obj::MatrixUtils_obj()
{
}

bool MatrixUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"rotateMatrix4") ) { outValue = rotateMatrix4_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MatrixUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *MatrixUtils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class MatrixUtils_obj::__mClass;

static ::String MatrixUtils_obj_sStaticFields[] = {
	HX_("rotateMatrix4",b8,75,bb,59),
	::String(null())
};

void MatrixUtils_obj::__register()
{
	MatrixUtils_obj _hx_dummy;
	MatrixUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MatrixUtils",10,30,25,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MatrixUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MatrixUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MatrixUtils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MatrixUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MatrixUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

