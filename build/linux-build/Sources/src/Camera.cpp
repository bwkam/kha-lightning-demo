// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Camera
#include <hxinc/Camera.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector3
#include <hxinc/kha/math/FastVector3.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_30_update,"Camera","update",0x827d3492,"Camera.update","Camera.hx",30,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_83_onMouseDown,"Camera","onMouseDown",0x05db94df,"Camera.onMouseDown","Camera.hx",83,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_87_onMouseUp,"Camera","onMouseUp",0x3eb4f998,"Camera.onMouseUp","Camera.hx",87,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_90_onMouseMove,"Camera","onMouseMove",0x0bce7f8e,"Camera.onMouseMove","Camera.hx",90,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_99_onKeyDown,"Camera","onKeyDown",0x1a896f59,"Camera.onKeyDown","Camera.hx",99,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_110_onKeyUp,"Camera","onKeyUp",0x827d6192,"Camera.onKeyUp","Camera.hx",110,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_7_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",7,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_8_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",8,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_9_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",9,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_11_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",11,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_12_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",12,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_13_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",13,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_14_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",14,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_15_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",15,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_17_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",17,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_19_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",19,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_20_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",20,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_21_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",21,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_22_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",22,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_24_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",24,0xdbe9d119)
HX_LOCAL_STACK_FRAME(_hx_pos_7072c536837f8d29_25_boot,"Camera","boot",0x02d54e7b,"Camera.boot","Camera.hx",25,0xdbe9d119)

void Camera_obj::__construct() { }

Dynamic Camera_obj::__CreateEmpty() { return new Camera_obj; }

void *Camera_obj::_hx_vtable = 0;

Dynamic Camera_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Camera_obj > _hx_result = new Camera_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Camera_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4d6b7d85;
}

 ::kha::math::FastVector3 Camera_obj::position;

Float Camera_obj::horizontalAngle;

Float Camera_obj::verticalAngle;

bool Camera_obj::moveForward;

bool Camera_obj::moveBackward;

bool Camera_obj::strafeLeft;

bool Camera_obj::strafeRight;

bool Camera_obj::isMouseDown;

Float Camera_obj::lastTime;

Float Camera_obj::mouseX;

Float Camera_obj::mouseY;

Float Camera_obj::mouseDeltaX;

Float Camera_obj::mouseDeltaY;

Float Camera_obj::speed;

Float Camera_obj::mouseSpeed;

 ::kha::math::FastMatrix4 Camera_obj::view;

 ::kha::math::FastVector3 Camera_obj::look;

void Camera_obj::update(){
            	HX_GC_STACKFRAME(&_hx_pos_7072c536837f8d29_30_update)
HXLINE(  32)		Float deltaTime = ::kha::Scheduler_obj::time();
HXDLIN(  32)		Float deltaTime1 = (deltaTime - ::Camera_obj::lastTime);
HXLINE(  33)		::Camera_obj::lastTime = ::kha::Scheduler_obj::time();
HXLINE(  36)		if (::Camera_obj::isMouseDown) {
HXLINE(  37)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Camera >();
HXDLIN(  37)			::Camera_obj::horizontalAngle = (::Camera_obj::horizontalAngle + ((::Camera_obj::mouseSpeed * ::Camera_obj::mouseDeltaX) * ( (Float)(-1) )));
HXLINE(  38)			 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::Camera >();
HXDLIN(  38)			::Camera_obj::verticalAngle = (::Camera_obj::verticalAngle + ((::Camera_obj::mouseSpeed * ::Camera_obj::mouseDeltaY) * ( (Float)(-1) )));
            		}
HXLINE(  42)		float direction_x = ( (float)((::Math_obj::cos(::Camera_obj::verticalAngle) * ::Math_obj::sin(::Camera_obj::horizontalAngle))) );
HXDLIN(  42)		float direction_y = ( (float)(::Math_obj::sin(::Camera_obj::verticalAngle)) );
HXDLIN(  42)		float direction_z = ( (float)((::Math_obj::cos(::Camera_obj::verticalAngle) * ::Math_obj::cos(::Camera_obj::horizontalAngle))) );
HXLINE(  46)		float right_x = ( (float)(::Math_obj::sin((::Camera_obj::horizontalAngle - ((Float)1.57)))) );
HXDLIN(  46)		float right_y = ( (float)(0) );
HXDLIN(  46)		float right_z = ( (float)(::Math_obj::cos((::Camera_obj::horizontalAngle - ((Float)1.57)))) );
HXLINE(  49)		float _x = ((right_y * direction_z) - (right_z * direction_y));
HXDLIN(  49)		float _y = ((right_z * direction_x) - (right_x * direction_z));
HXDLIN(  49)		float _z = ((right_x * direction_y) - (right_y * direction_x));
HXDLIN(  49)		float up_x = _x;
HXDLIN(  49)		float up_y = _y;
HXDLIN(  49)		float up_z = _z;
HXLINE(  52)		if (::Camera_obj::moveForward) {
HXLINE(  53)			float value = ( (float)((deltaTime1 * ::Camera_obj::speed)) );
HXDLIN(  53)			float v_x = (direction_x * value);
HXDLIN(  53)			float v_y = (direction_y * value);
HXDLIN(  53)			float v_z = (direction_z * value);
HXLINE(  54)			 ::kha::math::FastVector3 _this = ::Camera_obj::position;
HXDLIN(  54)			::Camera_obj::position =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,(_this->x + v_x),(_this->y + v_y),(_this->z + v_z));
            		}
HXLINE(  56)		if (::Camera_obj::moveBackward) {
HXLINE(  57)			float value1 = ( (float)(((deltaTime1 * ::Camera_obj::speed) * ( (Float)(-1) ))) );
HXDLIN(  57)			float v_x1 = (direction_x * value1);
HXDLIN(  57)			float v_y1 = (direction_y * value1);
HXDLIN(  57)			float v_z1 = (direction_z * value1);
HXLINE(  58)			 ::kha::math::FastVector3 _this1 = ::Camera_obj::position;
HXDLIN(  58)			::Camera_obj::position =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,(_this1->x + v_x1),(_this1->y + v_y1),(_this1->z + v_z1));
            		}
HXLINE(  60)		if (::Camera_obj::strafeRight) {
HXLINE(  61)			float value2 = ( (float)((deltaTime1 * ::Camera_obj::speed)) );
HXDLIN(  61)			float v_x2 = (right_x * value2);
HXDLIN(  61)			float v_y2 = (right_y * value2);
HXDLIN(  61)			float v_z2 = (right_z * value2);
HXLINE(  62)			 ::kha::math::FastVector3 _this2 = ::Camera_obj::position;
HXDLIN(  62)			::Camera_obj::position =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,(_this2->x + v_x2),(_this2->y + v_y2),(_this2->z + v_z2));
            		}
HXLINE(  64)		if (::Camera_obj::strafeLeft) {
HXLINE(  65)			float value3 = ( (float)(((deltaTime1 * ::Camera_obj::speed) * ( (Float)(-1) ))) );
HXDLIN(  65)			float v_x3 = (right_x * value3);
HXDLIN(  65)			float v_y3 = (right_y * value3);
HXDLIN(  65)			float v_z3 = (right_z * value3);
HXLINE(  66)			 ::kha::math::FastVector3 _this3 = ::Camera_obj::position;
HXDLIN(  66)			::Camera_obj::position =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,(_this3->x + v_x3),(_this3->y + v_y3),(_this3->z + v_z3));
            		}
HXLINE(  70)		 ::kha::math::FastVector3 _this4 = ::Camera_obj::position;
HXDLIN(  70)		::Camera_obj::look =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,(_this4->x + direction_x),(_this4->y + direction_y),(_this4->z + direction_z));
HXLINE(  73)		 ::kha::math::FastVector3 eye = ::Camera_obj::position;
HXDLIN(  73)		 ::kha::math::FastVector3 at = ::Camera_obj::look;
HXDLIN(  73)		float _this_x = (at->x - eye->x);
HXDLIN(  73)		float _this_y = (at->y - eye->y);
HXDLIN(  73)		float _this_z = (at->z - eye->z);
HXDLIN(  73)		float zaxis_x = _this_x;
HXDLIN(  73)		float zaxis_y = _this_y;
HXDLIN(  73)		float zaxis_z = _this_z;
HXDLIN(  73)		float currentLength = ( (float)(::Math_obj::sqrt(( (Float)((((zaxis_x * zaxis_x) + (zaxis_y * zaxis_y)) + (zaxis_z * zaxis_z))) ))) );
HXDLIN(  73)		if ((currentLength != 0)) {
HXLINE(  73)			Float mul = (( (Float)(1) ) / ( (Float)(currentLength) ));
HXDLIN(  73)			zaxis_x = (zaxis_x * ( (float)(mul) ));
HXDLIN(  73)			zaxis_y = (zaxis_y * ( (float)(mul) ));
HXDLIN(  73)			zaxis_z = (zaxis_z * ( (float)(mul) ));
            		}
HXDLIN(  73)		float _x1 = ((zaxis_y * up_z) - (zaxis_z * up_y));
HXDLIN(  73)		float _y1 = ((zaxis_z * up_x) - (zaxis_x * up_z));
HXDLIN(  73)		float _z1 = ((zaxis_x * up_y) - (zaxis_y * up_x));
HXDLIN(  73)		float _this_x1 = _x1;
HXDLIN(  73)		float _this_y1 = _y1;
HXDLIN(  73)		float _this_z1 = _z1;
HXDLIN(  73)		float xaxis_x = _this_x1;
HXDLIN(  73)		float xaxis_y = _this_y1;
HXDLIN(  73)		float xaxis_z = _this_z1;
HXDLIN(  73)		float currentLength1 = ( (float)(::Math_obj::sqrt(( (Float)((((xaxis_x * xaxis_x) + (xaxis_y * xaxis_y)) + (xaxis_z * xaxis_z))) ))) );
HXDLIN(  73)		if ((currentLength1 != 0)) {
HXLINE(  73)			Float mul1 = (( (Float)(1) ) / ( (Float)(currentLength1) ));
HXDLIN(  73)			xaxis_x = (xaxis_x * ( (float)(mul1) ));
HXDLIN(  73)			xaxis_y = (xaxis_y * ( (float)(mul1) ));
HXDLIN(  73)			xaxis_z = (xaxis_z * ( (float)(mul1) ));
            		}
HXDLIN(  73)		float _x2 = ((xaxis_y * zaxis_z) - (xaxis_z * zaxis_y));
HXDLIN(  73)		float _y2 = ((xaxis_z * zaxis_x) - (xaxis_x * zaxis_z));
HXDLIN(  73)		float _z2 = ((xaxis_x * zaxis_y) - (xaxis_y * zaxis_x));
HXDLIN(  73)		float yaxis_x = _x2;
HXDLIN(  73)		float yaxis_y = _y2;
HXDLIN(  73)		float yaxis_z = _z2;
HXDLIN(  73)		::Camera_obj::view =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,xaxis_x,xaxis_y,xaxis_z,-((((xaxis_x * eye->x) + (xaxis_y * eye->y)) + (xaxis_z * eye->z))),yaxis_x,yaxis_y,yaxis_z,-((((yaxis_x * eye->x) + (yaxis_y * eye->y)) + (yaxis_z * eye->z))),-(zaxis_x),-(zaxis_y),-(zaxis_z),(((zaxis_x * eye->x) + (zaxis_y * eye->y)) + (zaxis_z * eye->z)),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE(  78)		::Camera_obj::mouseDeltaX = ( (Float)(0) );
HXLINE(  79)		::Camera_obj::mouseDeltaY = ( (Float)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Camera_obj,update,(void))

void Camera_obj::onMouseDown(int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_83_onMouseDown)
HXDLIN(  83)		::Camera_obj::isMouseDown = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Camera_obj,onMouseDown,(void))

void Camera_obj::onMouseUp(int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_87_onMouseUp)
HXDLIN(  87)		::Camera_obj::isMouseDown = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Camera_obj,onMouseUp,(void))

void Camera_obj::onMouseMove(int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_90_onMouseMove)
HXLINE(  91)		::Camera_obj::mouseDeltaX = (( (Float)(x) ) - ::Camera_obj::mouseX);
HXLINE(  92)		::Camera_obj::mouseDeltaY = (( (Float)(y) ) - ::Camera_obj::mouseY);
HXLINE(  94)		::Camera_obj::mouseX = ( (Float)(x) );
HXLINE(  95)		::Camera_obj::mouseY = ( (Float)(y) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Camera_obj,onMouseMove,(void))

void Camera_obj::onKeyDown(int key){
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_99_onKeyDown)
HXDLIN(  99)		if ((key == 38)) {
HXLINE( 100)			::Camera_obj::moveForward = true;
            		}
            		else {
HXLINE( 101)			if ((key == 40)) {
HXLINE( 102)				::Camera_obj::moveBackward = true;
            			}
            			else {
HXLINE( 103)				if ((key == 37)) {
HXLINE( 104)					::Camera_obj::strafeLeft = true;
            				}
            				else {
HXLINE( 105)					if ((key == 39)) {
HXLINE( 106)						::Camera_obj::strafeRight = true;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,onKeyDown,(void))

void Camera_obj::onKeyUp(int key){
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_110_onKeyUp)
HXDLIN( 110)		if ((key == 38)) {
HXLINE( 111)			::Camera_obj::moveForward = false;
            		}
            		else {
HXLINE( 112)			if ((key == 40)) {
HXLINE( 113)				::Camera_obj::moveBackward = false;
            			}
            			else {
HXLINE( 114)				if ((key == 37)) {
HXLINE( 115)					::Camera_obj::strafeLeft = false;
            				}
            				else {
HXLINE( 116)					if ((key == 39)) {
HXLINE( 117)						::Camera_obj::strafeRight = false;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,onKeyUp,(void))


Camera_obj::Camera_obj()
{
}

bool Camera_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { outValue = ( view ); return true; }
		if (HX_FIELD_EQ(inName,"look") ) { outValue = ( look ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { outValue = ( speed ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { outValue = ( mouseX ); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { outValue = ( mouseY ); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { outValue = onKeyUp_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { outValue = ( position ); return true; }
		if (HX_FIELD_EQ(inName,"lastTime") ) { outValue = ( lastTime ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { outValue = onMouseUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { outValue = onKeyDown_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"strafeLeft") ) { outValue = ( strafeLeft ); return true; }
		if (HX_FIELD_EQ(inName,"mouseSpeed") ) { outValue = ( mouseSpeed ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"moveForward") ) { outValue = ( moveForward ); return true; }
		if (HX_FIELD_EQ(inName,"strafeRight") ) { outValue = ( strafeRight ); return true; }
		if (HX_FIELD_EQ(inName,"isMouseDown") ) { outValue = ( isMouseDown ); return true; }
		if (HX_FIELD_EQ(inName,"mouseDeltaX") ) { outValue = ( mouseDeltaX ); return true; }
		if (HX_FIELD_EQ(inName,"mouseDeltaY") ) { outValue = ( mouseDeltaY ); return true; }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { outValue = onMouseDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { outValue = onMouseMove_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"moveBackward") ) { outValue = ( moveBackward ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"verticalAngle") ) { outValue = ( verticalAngle ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAngle") ) { outValue = ( horizontalAngle ); return true; }
	}
	return false;
}

bool Camera_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { view=ioValue.Cast<  ::kha::math::FastMatrix4 >(); return true; }
		if (HX_FIELD_EQ(inName,"look") ) { look=ioValue.Cast<  ::kha::math::FastVector3 >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=ioValue.Cast< Float >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=ioValue.Cast<  ::kha::math::FastVector3 >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTime") ) { lastTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"strafeLeft") ) { strafeLeft=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseSpeed") ) { mouseSpeed=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"moveForward") ) { moveForward=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"strafeRight") ) { strafeRight=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"isMouseDown") ) { isMouseDown=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseDeltaX") ) { mouseDeltaX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseDeltaY") ) { mouseDeltaY=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"moveBackward") ) { moveBackward=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"verticalAngle") ) { verticalAngle=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAngle") ) { horizontalAngle=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Camera_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Camera_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::kha::math::FastVector3 */ ,(void *) &Camera_obj::position,HX_("position",a9,a0,fa,ca)},
	{::hx::fsFloat,(void *) &Camera_obj::horizontalAngle,HX_("horizontalAngle",4f,7c,b8,f5)},
	{::hx::fsFloat,(void *) &Camera_obj::verticalAngle,HX_("verticalAngle",7d,0b,cd,e5)},
	{::hx::fsBool,(void *) &Camera_obj::moveForward,HX_("moveForward",b4,1a,47,be)},
	{::hx::fsBool,(void *) &Camera_obj::moveBackward,HX_("moveBackward",14,74,4e,bb)},
	{::hx::fsBool,(void *) &Camera_obj::strafeLeft,HX_("strafeLeft",76,d7,58,53)},
	{::hx::fsBool,(void *) &Camera_obj::strafeRight,HX_("strafeRight",8d,bd,70,11)},
	{::hx::fsBool,(void *) &Camera_obj::isMouseDown,HX_("isMouseDown",dd,67,43,cd)},
	{::hx::fsFloat,(void *) &Camera_obj::lastTime,HX_("lastTime",83,e5,45,e0)},
	{::hx::fsFloat,(void *) &Camera_obj::mouseX,HX_("mouseX",93,4a,0e,cc)},
	{::hx::fsFloat,(void *) &Camera_obj::mouseY,HX_("mouseY",94,4a,0e,cc)},
	{::hx::fsFloat,(void *) &Camera_obj::mouseDeltaX,HX_("mouseDeltaX",65,45,6c,60)},
	{::hx::fsFloat,(void *) &Camera_obj::mouseDeltaY,HX_("mouseDeltaY",66,45,6c,60)},
	{::hx::fsFloat,(void *) &Camera_obj::speed,HX_("speed",87,97,69,81)},
	{::hx::fsFloat,(void *) &Camera_obj::mouseSpeed,HX_("mouseSpeed",22,8b,36,9f)},
	{::hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(void *) &Camera_obj::view,HX_("view",65,32,4f,4e)},
	{::hx::fsObject /*  ::kha::math::FastVector3 */ ,(void *) &Camera_obj::look,HX_("look",5f,a6,b7,47)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Camera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Camera_obj::position,"position");
	HX_MARK_MEMBER_NAME(Camera_obj::horizontalAngle,"horizontalAngle");
	HX_MARK_MEMBER_NAME(Camera_obj::verticalAngle,"verticalAngle");
	HX_MARK_MEMBER_NAME(Camera_obj::moveForward,"moveForward");
	HX_MARK_MEMBER_NAME(Camera_obj::moveBackward,"moveBackward");
	HX_MARK_MEMBER_NAME(Camera_obj::strafeLeft,"strafeLeft");
	HX_MARK_MEMBER_NAME(Camera_obj::strafeRight,"strafeRight");
	HX_MARK_MEMBER_NAME(Camera_obj::isMouseDown,"isMouseDown");
	HX_MARK_MEMBER_NAME(Camera_obj::lastTime,"lastTime");
	HX_MARK_MEMBER_NAME(Camera_obj::mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(Camera_obj::mouseY,"mouseY");
	HX_MARK_MEMBER_NAME(Camera_obj::mouseDeltaX,"mouseDeltaX");
	HX_MARK_MEMBER_NAME(Camera_obj::mouseDeltaY,"mouseDeltaY");
	HX_MARK_MEMBER_NAME(Camera_obj::speed,"speed");
	HX_MARK_MEMBER_NAME(Camera_obj::mouseSpeed,"mouseSpeed");
	HX_MARK_MEMBER_NAME(Camera_obj::view,"view");
	HX_MARK_MEMBER_NAME(Camera_obj::look,"look");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Camera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Camera_obj::position,"position");
	HX_VISIT_MEMBER_NAME(Camera_obj::horizontalAngle,"horizontalAngle");
	HX_VISIT_MEMBER_NAME(Camera_obj::verticalAngle,"verticalAngle");
	HX_VISIT_MEMBER_NAME(Camera_obj::moveForward,"moveForward");
	HX_VISIT_MEMBER_NAME(Camera_obj::moveBackward,"moveBackward");
	HX_VISIT_MEMBER_NAME(Camera_obj::strafeLeft,"strafeLeft");
	HX_VISIT_MEMBER_NAME(Camera_obj::strafeRight,"strafeRight");
	HX_VISIT_MEMBER_NAME(Camera_obj::isMouseDown,"isMouseDown");
	HX_VISIT_MEMBER_NAME(Camera_obj::lastTime,"lastTime");
	HX_VISIT_MEMBER_NAME(Camera_obj::mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(Camera_obj::mouseY,"mouseY");
	HX_VISIT_MEMBER_NAME(Camera_obj::mouseDeltaX,"mouseDeltaX");
	HX_VISIT_MEMBER_NAME(Camera_obj::mouseDeltaY,"mouseDeltaY");
	HX_VISIT_MEMBER_NAME(Camera_obj::speed,"speed");
	HX_VISIT_MEMBER_NAME(Camera_obj::mouseSpeed,"mouseSpeed");
	HX_VISIT_MEMBER_NAME(Camera_obj::view,"view");
	HX_VISIT_MEMBER_NAME(Camera_obj::look,"look");
};

#endif

::hx::Class Camera_obj::__mClass;

static ::String Camera_obj_sStaticFields[] = {
	HX_("position",a9,a0,fa,ca),
	HX_("horizontalAngle",4f,7c,b8,f5),
	HX_("verticalAngle",7d,0b,cd,e5),
	HX_("moveForward",b4,1a,47,be),
	HX_("moveBackward",14,74,4e,bb),
	HX_("strafeLeft",76,d7,58,53),
	HX_("strafeRight",8d,bd,70,11),
	HX_("isMouseDown",dd,67,43,cd),
	HX_("lastTime",83,e5,45,e0),
	HX_("mouseX",93,4a,0e,cc),
	HX_("mouseY",94,4a,0e,cc),
	HX_("mouseDeltaX",65,45,6c,60),
	HX_("mouseDeltaY",66,45,6c,60),
	HX_("speed",87,97,69,81),
	HX_("mouseSpeed",22,8b,36,9f),
	HX_("view",65,32,4f,4e),
	HX_("look",5f,a6,b7,47),
	HX_("update",09,86,05,87),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyUp",3b,58,3c,75),
	::String(null())
};

void Camera_obj::__register()
{
	Camera_obj _hx_dummy;
	Camera_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Camera",c5,ba,20,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Camera_obj::__GetStatic;
	__mClass->mSetStaticField = &Camera_obj::__SetStatic;
	__mClass->mMarkFunc = Camera_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Camera_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Camera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Camera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Camera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Camera_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Camera_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_7072c536837f8d29_7_boot)
HXDLIN(   7)		position =  ::kha::math::FastVector3_obj::__alloc( HX_CTX ,0,0,5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_8_boot)
HXDLIN(   8)		horizontalAngle = ((Float)3.14);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_9_boot)
HXDLIN(   9)		verticalAngle = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_11_boot)
HXDLIN(  11)		moveForward = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_12_boot)
HXDLIN(  12)		moveBackward = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_13_boot)
HXDLIN(  13)		strafeLeft = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_14_boot)
HXDLIN(  14)		strafeRight = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_15_boot)
HXDLIN(  15)		isMouseDown = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_17_boot)
HXDLIN(  17)		lastTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_19_boot)
HXDLIN(  19)		mouseX = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_20_boot)
HXDLIN(  20)		mouseY = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_21_boot)
HXDLIN(  21)		mouseDeltaX = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_22_boot)
HXDLIN(  22)		mouseDeltaY = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_24_boot)
HXDLIN(  24)		speed = ((Float)3.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7072c536837f8d29_25_boot)
HXDLIN(  25)		mouseSpeed = ((Float)0.005);
            	}
}

