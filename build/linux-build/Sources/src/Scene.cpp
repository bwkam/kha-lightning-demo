// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Camera
#include <hxinc/Camera.h>
#endif
#ifndef INCLUDED_MatrixUtils
#include <hxinc/MatrixUtils.h>
#endif
#ifndef INCLUDED_Scene
#include <hxinc/Scene.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <hxinc/kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha__Assets_FontList
#include <hxinc/kha/_Assets/FontList.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector3
#include <hxinc/kha/math/FastVector3.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_pipelines_LightCubePipeline
#include <hxinc/pipelines/LightCubePipeline.h>
#endif
#ifndef INCLUDED_pipelines_TextureCubePipeline
#include <hxinc/pipelines/TextureCubePipeline.h>
#endif
#ifndef INCLUDED_zui_Ext
#include <hxinc/zui/Ext.h>
#endif
#ifndef INCLUDED_zui_Handle
#include <hxinc/zui/Handle.h>
#endif
#ifndef INCLUDED_zui_Zui
#include <hxinc/zui/Zui.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d5693bc3150d8006_58_new,"Scene","new",0x2c34f01e,"Scene.new","Scene.hx",58,0x9b2cfd12)
HX_LOCAL_STACK_FRAME(_hx_pos_d5693bc3150d8006_61_loadEverything,"Scene","loadEverything",0x3d9f713b,"Scene.loadEverything","Scene.hx",61,0x9b2cfd12)
static const Float _hx_array_data_0bff492c_2[] = {
	0.0,0.0,0.0,
};
static const Float _hx_array_data_0bff492c_3[] = {
	2.0,5.0,-15.0,
};
static const Float _hx_array_data_0bff492c_4[] = {
	-1.5,-2.2,-2.5,
};
static const Float _hx_array_data_0bff492c_5[] = {
	-3.8,-2.0,-12.3,
};
static const Float _hx_array_data_0bff492c_6[] = {
	2.4,-0.4,-3.5,
};
static const Float _hx_array_data_0bff492c_7[] = {
	-1.7,3.0,-7.5,
};
static const Float _hx_array_data_0bff492c_8[] = {
	1.3,-2.0,-2.5,
};
static const Float _hx_array_data_0bff492c_9[] = {
	1.5,2.0,-2.5,
};
static const Float _hx_array_data_0bff492c_10[] = {
	1.5,0.2,-1.5,
};
static const Float _hx_array_data_0bff492c_11[] = {
	-1.3,1.0,-1.5,
};
static const Float _hx_array_data_0bff492c_12[] = {
	0.7,0.2,2.0,
};
static const Float _hx_array_data_0bff492c_13[] = {
	2.3,-3.3,-4.0,
};
static const Float _hx_array_data_0bff492c_14[] = {
	-4.0,2.0,-12.0,
};
static const Float _hx_array_data_0bff492c_15[] = {
	0.0,0.0,-3.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_d5693bc3150d8006_106_update,"Scene","update",0x38f8510b,"Scene.update","Scene.hx",106,0x9b2cfd12)
HX_LOCAL_STACK_FRAME(_hx_pos_d5693bc3150d8006_109_render,"Scene","render",0xb71c3658,"Scene.render","Scene.hx",109,0x9b2cfd12)
static const Float _hx_array_data_0bff492c_20[] = {
	0.333333333333333315,0.333333333333333315,0.333333333333333315,
};

void Scene_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d5693bc3150d8006_58_new)
HXDLIN(  58)		::kha::Assets_obj::loadEverything(this->loadEverything_dyn(),null(),null(),null());
            	}

Dynamic Scene_obj::__CreateEmpty() { return new Scene_obj; }

void *Scene_obj::_hx_vtable = 0;

Dynamic Scene_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Scene_obj > _hx_result = new Scene_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Scene_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0043b288;
}

void Scene_obj::loadEverything(){
            	HX_GC_STACKFRAME(&_hx_pos_d5693bc3150d8006_61_loadEverything)
HXLINE(  62)		this->_hx_set_cube(HX_CTX,  ::pipelines::TextureCubePipeline_obj::__alloc( HX_CTX ));
HXLINE(  63)		this->_hx_set_lightCube(HX_CTX,  ::pipelines::LightCubePipeline_obj::__alloc( HX_CTX ));
HXLINE(  64)		Float uh = (((Float)1.0) / ::Math_obj::tan(((Float)22.5)));
HXDLIN(  64)		Float uw = (uh / ((Float)1.33333333333333326));
HXDLIN(  64)		this->_hx_set_proj(HX_CTX,  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(uw) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(uh) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(((Float)-1.00200200200200196)) ),( (float)(((Float)-0.200200200200200185)) ),( (float)(0) ),( (float)(0) ),( (float)(-1) ),( (float)(0) )));
HXLINE(  65)		this->_hx_set_ui(HX_CTX,  ::zui::Zui_obj::__alloc( HX_CTX , ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("black_white_gradient",46,8b,fc,fa),::kha::Assets_obj::images->black_white_gradient)
            			->setFixed(1,HX_("font",cf,5d,c0,43),::kha::Assets_obj::fonts->DroidSans)
            			->setFixed(2,HX_("color_wheel",7f,99,35,4b),::kha::Assets_obj::images->color_wheel))));
HXLINE(  70)		this->_hx_set_dirLightAmbient(HX_CTX, ::zui::Handle_obj::global->nest(0,null()));
HXLINE(  71)		this->_hx_set_dirLightDiffuse(HX_CTX, ::zui::Handle_obj::global->nest(1,null()));
HXLINE(  72)		this->_hx_set_dirLightSpecular(HX_CTX, ::zui::Handle_obj::global->nest(2,null()));
HXLINE(  73)		this->_hx_set_dirLightActive(HX_CTX, ::zui::Handle_obj::global->nest(3,null()));
HXLINE(  74)		this->_hx_set_dirLightColor(HX_CTX, ::zui::Handle_obj::global->nest(4,null()));
HXLINE(  75)		this->dirLightColorV = -65536;
HXLINE(  76)		this->_hx_set_dirLightX(HX_CTX, ::zui::Handle_obj::global->nest(5,null()));
HXLINE(  77)		this->_hx_set_dirLightY(HX_CTX, ::zui::Handle_obj::global->nest(6,null()));
HXLINE(  78)		this->_hx_set_dirLightZ(HX_CTX, ::zui::Handle_obj::global->nest(7,null()));
HXLINE(  79)		this->_hx_set_pointLightAmbient(HX_CTX, ::zui::Handle_obj::global->nest(8,null()));
HXLINE(  80)		this->_hx_set_pointLightDiffuse(HX_CTX, ::zui::Handle_obj::global->nest(9,null()));
HXLINE(  81)		this->_hx_set_pointLightSpecular(HX_CTX, ::zui::Handle_obj::global->nest(10,null()));
HXLINE(  82)		this->_hx_set_pointLightActive(HX_CTX, ::zui::Handle_obj::global->nest(11,null()));
HXLINE(  83)		this->_hx_set_pointLightColor(HX_CTX, ::zui::Handle_obj::global->nest(12,null()));
HXLINE(  84)		this->pointLightColorV = -65536;
HXLINE(  85)		this->_hx_set_pointLightX(HX_CTX, ::zui::Handle_obj::global->nest(13,null()));
HXLINE(  86)		this->_hx_set_pointLightY(HX_CTX, ::zui::Handle_obj::global->nest(14,null()));
HXLINE(  87)		this->_hx_set_pointLightZ(HX_CTX, ::zui::Handle_obj::global->nest(15,null()));
HXLINE(  88)		this->_hx_set_spotLightAmbient(HX_CTX, ::zui::Handle_obj::global->nest(16,null()));
HXLINE(  89)		this->_hx_set_spotLightDiffuse(HX_CTX, ::zui::Handle_obj::global->nest(17,null()));
HXLINE(  90)		this->_hx_set_spotLightSpecular(HX_CTX, ::zui::Handle_obj::global->nest(18,null()));
HXLINE(  91)		this->_hx_set_spotLightColor(HX_CTX, ::zui::Handle_obj::global->nest(19,null()));
HXLINE(  92)		this->spotLightColorV = -65536;
HXLINE(  93)		this->_hx_set_spotLightActive(HX_CTX, ::zui::Handle_obj::global->nest(20,null()));
HXLINE(  94)		this->_hx_set_cubePositions(HX_CTX, ::Array_obj< ::Dynamic>::__new(10)->init(0,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_2,3))->init(1,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_3,3))->init(2,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_4,3))->init(3,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_5,3))->init(4,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_6,3))->init(5,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_7,3))->init(6,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_8,3))->init(7,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_9,3))->init(8,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_10,3))->init(9,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_11,3)));
HXLINE(  97)		this->_hx_set_pointLightPositions(HX_CTX, ::Array_obj< ::Dynamic>::__new(4)->init(0,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_12,3))->init(1,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_13,3))->init(2,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_14,3))->init(3,::Array_obj< Float >::fromData( _hx_array_data_0bff492c_15,3)));
HXLINE(  98)		::kha::System_obj::notifyOnFrames(this->render_dyn());
HXLINE(  99)		::kha::Scheduler_obj::addTimeTask(this->update_dyn(),( (Float)(0) ),((Float)0.0166666666666666664),null());
HXLINE( 101)		::kha::input::Mouse_obj::get(null())->notify(::Camera_obj::onMouseDown_dyn(),::Camera_obj::onMouseUp_dyn(),::Camera_obj::onMouseMove_dyn(),null(),null());
HXLINE( 102)		::kha::input::Keyboard_obj::get(null())->notify(::Camera_obj::onKeyDown_dyn(),::Camera_obj::onKeyUp_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,loadEverything,(void))

void Scene_obj::update(){
            	HX_STACKFRAME(&_hx_pos_d5693bc3150d8006_106_update)
HXDLIN( 106)		::Camera_obj::update();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,update,(void))

void Scene_obj::render(::Array< ::Dynamic> frames){
            	HX_GC_STACKFRAME(&_hx_pos_d5693bc3150d8006_109_render)
HXLINE( 111)		::Dynamic g = frames->__get(0).StaticCast<  ::kha::Framebuffer >()->get_g4();
HXLINE( 112)		 ::kha::graphics2::Graphics g2 = frames->__get(0).StaticCast<  ::kha::Framebuffer >()->get_g2();
HXLINE( 115)		::kha::graphics4::Graphics_obj::begin(g,null());
HXLINE( 118)		::kha::graphics4::Graphics_obj::clear(g,::kha::_Color::Color_Impl__obj::fromFloats(( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),null()),((Float)1.0),null());
HXLINE( 122)		{
HXLINE( 122)			int _g = 0;
HXDLIN( 122)			int _g1 = this->cubePositions->length;
HXDLIN( 122)			while((_g < _g1)){
HXLINE( 122)				_g = (_g + 1);
HXDLIN( 122)				int i = (_g - 1);
HXLINE( 123)				Float angle = (((Float)20.0) * ( (Float)(i) ));
HXLINE( 124)				 ::kha::math::FastMatrix4 model =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 125)				model =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(this->cubePositions->__get(i).StaticCast< ::Array< Float > >()->__get(0)) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(this->cubePositions->__get(i).StaticCast< ::Array< Float > >()->__get(1)) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(this->cubePositions->__get(i).StaticCast< ::Array< Float > >()->__get(2)) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 127)				model = ::MatrixUtils_obj::rotateMatrix4(model,angle, ::kha::math::FastVector3_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.3),((Float)0.5)));
HXLINE( 129)				this->cube->render(g, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("material",a7,5c,a5,f0), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("shininess",86,57,95,c6),((Float)32.0))))
            					->setFixed(1,HX_("model",a9,23,58,0c),model)
            					->setFixed(2,HX_("proj",9d,c7,5e,4a),this->proj)
            					->setFixed(3,HX_("view",65,32,4f,4e),::Camera_obj::view)
            					->setFixed(4,HX_("light",d6,90,fc,74), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("pointLights",4d,6f,9a,ce),::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(::hx::Anon_obj::Create(7)
            							->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::__new(3)->init(0,this->pointLightSpecular->value)->init(1,this->pointLightSpecular->value)->init(2,this->pointLightSpecular->value))
            							->setFixed(1,HX_("constant",64,c1,9d,a5),((Float)1.0))
            							->setFixed(2,HX_("position",a9,a0,fa,ca),this->pointLightPositions->__get(0).StaticCast< ::Array< Float > >())
            							->setFixed(3,HX_("quadratic",d8,ca,13,e2),((Float)0.032))
            							->setFixed(4,HX_("linear",e5,51,a0,ec),((Float)0.09))
            							->setFixed(5,HX_("ambient",18,98,81,09),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value)))
            							->setFixed(6,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value)))))->init(1, ::Dynamic(::hx::Anon_obj::Create(7)
            							->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::__new(3)->init(0,this->pointLightSpecular->value)->init(1,this->pointLightSpecular->value)->init(2,this->pointLightSpecular->value))
            							->setFixed(1,HX_("constant",64,c1,9d,a5),((Float)1.0))
            							->setFixed(2,HX_("position",a9,a0,fa,ca),this->pointLightPositions->__get(1).StaticCast< ::Array< Float > >())
            							->setFixed(3,HX_("quadratic",d8,ca,13,e2),((Float)0.032))
            							->setFixed(4,HX_("linear",e5,51,a0,ec),((Float)0.09))
            							->setFixed(5,HX_("ambient",18,98,81,09),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value)))
            							->setFixed(6,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value)))))->init(2, ::Dynamic(::hx::Anon_obj::Create(7)
            							->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::__new(3)->init(0,this->pointLightSpecular->value)->init(1,this->pointLightSpecular->value)->init(2,this->pointLightSpecular->value))
            							->setFixed(1,HX_("constant",64,c1,9d,a5),((Float)1.0))
            							->setFixed(2,HX_("position",a9,a0,fa,ca),this->pointLightPositions->__get(2).StaticCast< ::Array< Float > >())
            							->setFixed(3,HX_("quadratic",d8,ca,13,e2),((Float)0.032))
            							->setFixed(4,HX_("linear",e5,51,a0,ec),((Float)0.09))
            							->setFixed(5,HX_("ambient",18,98,81,09),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value)))
            							->setFixed(6,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value)))))->init(3, ::Dynamic(::hx::Anon_obj::Create(7)
            							->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::__new(3)->init(0,this->pointLightSpecular->value)->init(1,this->pointLightSpecular->value)->init(2,this->pointLightSpecular->value))
            							->setFixed(1,HX_("constant",64,c1,9d,a5),((Float)1.0))
            							->setFixed(2,HX_("position",a9,a0,fa,ca),this->pointLightPositions->__get(3).StaticCast< ::Array< Float > >())
            							->setFixed(3,HX_("quadratic",d8,ca,13,e2),((Float)0.032))
            							->setFixed(4,HX_("linear",e5,51,a0,ec),((Float)0.09))
            							->setFixed(5,HX_("ambient",18,98,81,09),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightAmbient->value)))
            							->setFixed(6,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->pointLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))->init(2,(( (Float)((( (float)((this->pointLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->pointLightDiffuse->value))))))
            						->setFixed(1,HX_("dirLight",49,6c,db,02), ::Dynamic(::hx::Anon_obj::Create(4)
            							->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::__new(3)->init(0,this->dirLightSpecular->value)->init(1,this->dirLightSpecular->value)->init(2,this->dirLightSpecular->value))
            							->setFixed(1,HX_("ambient",18,98,81,09),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->dirLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->dirLightAmbient->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->dirLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->dirLightAmbient->value))->init(2,(( (Float)((( (float)((this->dirLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->dirLightAmbient->value)))
            							->setFixed(2,HX_("direction",3f,62,40,10),::Array_obj< Float >::__new(3)->init(0,this->dirLightX->value)->init(1,this->dirLightY->value)->init(2,this->dirLightZ->value))
            							->setFixed(3,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->dirLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->dirLightDiffuse->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->dirLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->dirLightDiffuse->value))->init(2,(( (Float)((( (float)((this->dirLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->dirLightDiffuse->value)))))
            						->setFixed(2,HX_("spotLight",74,72,e2,39), ::Dynamic(::hx::Anon_obj::Create(10)
            							->setFixed(0,HX_("specular",c3,56,6c,93),::Array_obj< Float >::__new(3)->init(0,this->spotLightSpecular->value)->init(1,this->spotLightSpecular->value)->init(2,this->spotLightSpecular->value))
            							->setFixed(1,HX_("constant",64,c1,9d,a5),((Float)1.0))
            							->setFixed(2,HX_("position",a9,a0,fa,ca),::Array_obj< Float >::__new(3)->init(0,::Camera_obj::position->x)->init(1,::Camera_obj::position->y)->init(2,::Camera_obj::position->z))
            							->setFixed(3,HX_("outerCutOff",e8,dd,06,e2),::Math_obj::cos(((((Float)15.0) * ::Math_obj::PI) / ( (Float)(180) ))))
            							->setFixed(4,HX_("quadratic",d8,ca,13,e2),((Float)0.032))
            							->setFixed(5,HX_("linear",e5,51,a0,ec),((Float)0.09))
            							->setFixed(6,HX_("ambient",18,98,81,09),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->spotLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->spotLightAmbient->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->spotLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->spotLightAmbient->value))->init(2,(( (Float)((( (float)((this->spotLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->spotLightAmbient->value)))
            							->setFixed(7,HX_("direction",3f,62,40,10),::Array_obj< Float >::__new(3)->init(0,::Camera_obj::look->x)->init(1,::Camera_obj::look->y)->init(2,::Camera_obj::look->z))
            							->setFixed(8,HX_("diffuse",62,61,7f,38),::Array_obj< Float >::__new(3)->init(0,(( (Float)((( (float)(::hx::UShr((this->spotLightColorV & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->spotLightDiffuse->value))->init(1,(( (Float)((( (float)(::hx::UShr((this->spotLightColorV & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->spotLightDiffuse->value))->init(2,(( (Float)((( (float)((this->spotLightColorV & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ) * this->spotLightDiffuse->value)))
            							->setFixed(9,HX_("cutOff",0d,a3,1f,40),::Math_obj::cos(((((Float)12.5) * ::Math_obj::PI) / ( (Float)(180) ))))))))));
            			}
            		}
HXLINE( 245)		{
HXLINE( 245)			int _g2 = 0;
HXDLIN( 245)			int _g3 = this->pointLightPositions->length;
HXDLIN( 245)			while((_g2 < _g3)){
HXLINE( 245)				_g2 = (_g2 + 1);
HXDLIN( 245)				int i1 = (_g2 - 1);
HXLINE( 246)				 ::kha::math::FastMatrix4 model1 =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 247)				model1 =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(this->pointLightPositions->__get(i1).StaticCast< ::Array< Float > >()->__get(0)) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(this->pointLightPositions->__get(i1).StaticCast< ::Array< Float > >()->__get(1)) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(this->pointLightPositions->__get(i1).StaticCast< ::Array< Float > >()->__get(2)) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 249)				this->lightCube->render(g, ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("model",a9,23,58,0c),model1)
            					->setFixed(1,HX_("proj",9d,c7,5e,4a),this->proj)
            					->setFixed(2,HX_("view",65,32,4f,4e),::Camera_obj::view)));
            			}
            		}
HXLINE( 257)		::kha::graphics4::Graphics_obj::end(g);
HXLINE( 259)		this->ui->begin(g2);
HXLINE( 261)		 ::zui::Zui _hx_tmp = this->ui;
HXDLIN( 261)		if (_hx_tmp->window(::zui::Handle_obj::global->nest(21,null()),10,10,240,600,true)) {
HXLINE( 262)			 ::zui::Zui _hx_tmp1 = this->ui;
HXDLIN( 262)			if (_hx_tmp1->panel(::zui::Handle_obj::global->nest(22, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("selected",5b,2a,6d,b1),true))),HX_("Light",b6,00,2a,08),null(),null(),null())) {
HXLINE( 263)				this->ui->indent(null());
HXLINE( 264)				 ::zui::Zui _hx_tmp2 = this->ui;
HXDLIN( 264)				if (_hx_tmp2->panel(::zui::Handle_obj::global->nest(23, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("selected",5b,2a,6d,b1),false))),HX_("Directional Light",e0,dc,21,50),null(),null(),null())) {
HXLINE( 265)					this->ui->indent(null());
HXLINE( 266)					this->ui->slider(this->dirLightAmbient,HX_("ambient",18,98,81,09),0,5,true,null(),null(),null(),null());
HXLINE( 267)					this->ui->slider(this->dirLightDiffuse,HX_("diffuse",62,61,7f,38),0,5,true,null(),null(),null(),null());
HXLINE( 268)					this->ui->slider(this->dirLightSpecular,HX_("specular",c3,56,6c,93),0,5,true,null(),null(),null(),null());
HXLINE( 269)					this->ui->row(::Array_obj< Float >::fromData( _hx_array_data_0bff492c_20,3));
HXLINE( 270)					this->ui->slider(this->dirLightX,HX_("x",78,00,00,00),((Float)-0.2),3,true,null(),null(),null(),null());
HXLINE( 271)					this->ui->slider(this->dirLightY,HX_("y",79,00,00,00),((Float)-1.0),3,true,null(),null(),null(),null());
HXLINE( 272)					this->ui->slider(this->dirLightZ,HX_("z",7a,00,00,00),((Float)-0.3),3,true,null(),null(),null(),null());
HXLINE( 273)					this->dirLightColorV = ::zui::Ext_obj::colorWheel(this->ui,this->dirLightColor,null(),null(),null(),null(),null());
HXLINE( 274)					this->ui->unindent(null());
            				}
HXLINE( 276)				this->ui->separator(null(),null());
HXLINE( 277)				this->ui->unindent(null());
HXLINE( 279)				this->ui->indent(null());
HXLINE( 280)				 ::zui::Zui _hx_tmp3 = this->ui;
HXDLIN( 280)				if (_hx_tmp3->panel(::zui::Handle_obj::global->nest(25, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("selected",5b,2a,6d,b1),false))),HX_("SpotLight",54,52,b5,db),null(),null(),null())) {
HXLINE( 281)					this->ui->indent(null());
HXLINE( 282)					this->ui->slider(this->spotLightAmbient,HX_("ambient",18,98,81,09),0,5,true,null(),null(),null(),null());
HXLINE( 283)					this->ui->slider(this->spotLightDiffuse,HX_("diffuse",62,61,7f,38),0,5,true,null(),null(),null(),null());
HXLINE( 284)					this->ui->slider(this->spotLightSpecular,HX_("specular",c3,56,6c,93),0,5,true,null(),null(),null(),null());
HXLINE( 285)					this->spotLightColorV = ::zui::Ext_obj::colorWheel(this->ui,this->dirLightColor,null(),null(),null(),null(),null());
HXLINE( 286)					this->ui->unindent(null());
            				}
HXLINE( 289)				this->ui->separator(null(),null());
HXLINE( 290)				this->ui->unindent(null());
HXLINE( 292)				 ::zui::Zui _hx_tmp4 = this->ui;
HXDLIN( 292)				if (_hx_tmp4->panel(::zui::Handle_obj::global->nest(26, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("selected",5b,2a,6d,b1),false))),HX_("PointLights",2d,07,cd,b2),null(),null(),null())) {
HXLINE( 293)					this->ui->indent(null());
HXLINE( 294)					this->ui->slider(this->pointLightAmbient,HX_("ambient",18,98,81,09),0,5,true,null(),null(),null(),null());
HXLINE( 295)					this->ui->slider(this->pointLightDiffuse,HX_("diffuse",62,61,7f,38),0,5,true,null(),null(),null(),null());
HXLINE( 296)					this->ui->slider(this->pointLightSpecular,HX_("specular",c3,56,6c,93),0,5,true,null(),null(),null(),null());
HXLINE( 297)					this->pointLightColorV = ::zui::Ext_obj::colorWheel(this->ui,this->dirLightColor,null(),null(),null(),null(),null());
HXLINE( 298)					this->ui->unindent(null());
            				}
HXLINE( 301)				this->ui->separator(null(),null());
            			}
            		}
HXLINE( 305)		this->ui->end(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,render,(void))


::hx::ObjectPtr< Scene_obj > Scene_obj::__new() {
	::hx::ObjectPtr< Scene_obj > __this = new Scene_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Scene_obj > Scene_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Scene_obj *__this = (Scene_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Scene_obj), true, "Scene"));
	*(void **)__this = Scene_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Scene_obj::Scene_obj()
{
}

void Scene_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scene);
	HX_MARK_MEMBER_NAME(cube,"cube");
	HX_MARK_MEMBER_NAME(lightCube,"lightCube");
	HX_MARK_MEMBER_NAME(proj,"proj");
	HX_MARK_MEMBER_NAME(cubePositions,"cubePositions");
	HX_MARK_MEMBER_NAME(pointLightPositions,"pointLightPositions");
	HX_MARK_MEMBER_NAME(ui,"ui");
	HX_MARK_MEMBER_NAME(dirLightAmbient,"dirLightAmbient");
	HX_MARK_MEMBER_NAME(dirLightDiffuse,"dirLightDiffuse");
	HX_MARK_MEMBER_NAME(dirLightSpecular,"dirLightSpecular");
	HX_MARK_MEMBER_NAME(dirLightActive,"dirLightActive");
	HX_MARK_MEMBER_NAME(dirLightColor,"dirLightColor");
	HX_MARK_MEMBER_NAME(dirLightColorV,"dirLightColorV");
	HX_MARK_MEMBER_NAME(dirLightX,"dirLightX");
	HX_MARK_MEMBER_NAME(dirLightY,"dirLightY");
	HX_MARK_MEMBER_NAME(dirLightZ,"dirLightZ");
	HX_MARK_MEMBER_NAME(pointLightAmbient,"pointLightAmbient");
	HX_MARK_MEMBER_NAME(pointLightDiffuse,"pointLightDiffuse");
	HX_MARK_MEMBER_NAME(pointLightSpecular,"pointLightSpecular");
	HX_MARK_MEMBER_NAME(pointLightActive,"pointLightActive");
	HX_MARK_MEMBER_NAME(pointLightColor,"pointLightColor");
	HX_MARK_MEMBER_NAME(pointLightColorV,"pointLightColorV");
	HX_MARK_MEMBER_NAME(pointLightX,"pointLightX");
	HX_MARK_MEMBER_NAME(pointLightY,"pointLightY");
	HX_MARK_MEMBER_NAME(pointLightZ,"pointLightZ");
	HX_MARK_MEMBER_NAME(spotLightAmbient,"spotLightAmbient");
	HX_MARK_MEMBER_NAME(spotLightDiffuse,"spotLightDiffuse");
	HX_MARK_MEMBER_NAME(spotLightSpecular,"spotLightSpecular");
	HX_MARK_MEMBER_NAME(spotLightActive,"spotLightActive");
	HX_MARK_MEMBER_NAME(spotLightColor,"spotLightColor");
	HX_MARK_MEMBER_NAME(spotLightColorV,"spotLightColorV");
	HX_MARK_MEMBER_NAME(spotLightX,"spotLightX");
	HX_MARK_MEMBER_NAME(spotLightY,"spotLightY");
	HX_MARK_MEMBER_NAME(spotLightZ,"spotLightZ");
	HX_MARK_END_CLASS();
}

void Scene_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cube,"cube");
	HX_VISIT_MEMBER_NAME(lightCube,"lightCube");
	HX_VISIT_MEMBER_NAME(proj,"proj");
	HX_VISIT_MEMBER_NAME(cubePositions,"cubePositions");
	HX_VISIT_MEMBER_NAME(pointLightPositions,"pointLightPositions");
	HX_VISIT_MEMBER_NAME(ui,"ui");
	HX_VISIT_MEMBER_NAME(dirLightAmbient,"dirLightAmbient");
	HX_VISIT_MEMBER_NAME(dirLightDiffuse,"dirLightDiffuse");
	HX_VISIT_MEMBER_NAME(dirLightSpecular,"dirLightSpecular");
	HX_VISIT_MEMBER_NAME(dirLightActive,"dirLightActive");
	HX_VISIT_MEMBER_NAME(dirLightColor,"dirLightColor");
	HX_VISIT_MEMBER_NAME(dirLightColorV,"dirLightColorV");
	HX_VISIT_MEMBER_NAME(dirLightX,"dirLightX");
	HX_VISIT_MEMBER_NAME(dirLightY,"dirLightY");
	HX_VISIT_MEMBER_NAME(dirLightZ,"dirLightZ");
	HX_VISIT_MEMBER_NAME(pointLightAmbient,"pointLightAmbient");
	HX_VISIT_MEMBER_NAME(pointLightDiffuse,"pointLightDiffuse");
	HX_VISIT_MEMBER_NAME(pointLightSpecular,"pointLightSpecular");
	HX_VISIT_MEMBER_NAME(pointLightActive,"pointLightActive");
	HX_VISIT_MEMBER_NAME(pointLightColor,"pointLightColor");
	HX_VISIT_MEMBER_NAME(pointLightColorV,"pointLightColorV");
	HX_VISIT_MEMBER_NAME(pointLightX,"pointLightX");
	HX_VISIT_MEMBER_NAME(pointLightY,"pointLightY");
	HX_VISIT_MEMBER_NAME(pointLightZ,"pointLightZ");
	HX_VISIT_MEMBER_NAME(spotLightAmbient,"spotLightAmbient");
	HX_VISIT_MEMBER_NAME(spotLightDiffuse,"spotLightDiffuse");
	HX_VISIT_MEMBER_NAME(spotLightSpecular,"spotLightSpecular");
	HX_VISIT_MEMBER_NAME(spotLightActive,"spotLightActive");
	HX_VISIT_MEMBER_NAME(spotLightColor,"spotLightColor");
	HX_VISIT_MEMBER_NAME(spotLightColorV,"spotLightColorV");
	HX_VISIT_MEMBER_NAME(spotLightX,"spotLightX");
	HX_VISIT_MEMBER_NAME(spotLightY,"spotLightY");
	HX_VISIT_MEMBER_NAME(spotLightZ,"spotLightZ");
}

::hx::Val Scene_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ui") ) { return ::hx::Val( ui ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cube") ) { return ::hx::Val( cube ); }
		if (HX_FIELD_EQ(inName,"proj") ) { return ::hx::Val( proj ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lightCube") ) { return ::hx::Val( lightCube ); }
		if (HX_FIELD_EQ(inName,"dirLightX") ) { return ::hx::Val( dirLightX ); }
		if (HX_FIELD_EQ(inName,"dirLightY") ) { return ::hx::Val( dirLightY ); }
		if (HX_FIELD_EQ(inName,"dirLightZ") ) { return ::hx::Val( dirLightZ ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"spotLightX") ) { return ::hx::Val( spotLightX ); }
		if (HX_FIELD_EQ(inName,"spotLightY") ) { return ::hx::Val( spotLightY ); }
		if (HX_FIELD_EQ(inName,"spotLightZ") ) { return ::hx::Val( spotLightZ ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointLightX") ) { return ::hx::Val( pointLightX ); }
		if (HX_FIELD_EQ(inName,"pointLightY") ) { return ::hx::Val( pointLightY ); }
		if (HX_FIELD_EQ(inName,"pointLightZ") ) { return ::hx::Val( pointLightZ ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cubePositions") ) { return ::hx::Val( cubePositions ); }
		if (HX_FIELD_EQ(inName,"dirLightColor") ) { return ::hx::Val( dirLightColor ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dirLightActive") ) { return ::hx::Val( dirLightActive ); }
		if (HX_FIELD_EQ(inName,"dirLightColorV") ) { return ::hx::Val( dirLightColorV ); }
		if (HX_FIELD_EQ(inName,"spotLightColor") ) { return ::hx::Val( spotLightColor ); }
		if (HX_FIELD_EQ(inName,"loadEverything") ) { return ::hx::Val( loadEverything_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dirLightAmbient") ) { return ::hx::Val( dirLightAmbient ); }
		if (HX_FIELD_EQ(inName,"dirLightDiffuse") ) { return ::hx::Val( dirLightDiffuse ); }
		if (HX_FIELD_EQ(inName,"pointLightColor") ) { return ::hx::Val( pointLightColor ); }
		if (HX_FIELD_EQ(inName,"spotLightActive") ) { return ::hx::Val( spotLightActive ); }
		if (HX_FIELD_EQ(inName,"spotLightColorV") ) { return ::hx::Val( spotLightColorV ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dirLightSpecular") ) { return ::hx::Val( dirLightSpecular ); }
		if (HX_FIELD_EQ(inName,"pointLightActive") ) { return ::hx::Val( pointLightActive ); }
		if (HX_FIELD_EQ(inName,"pointLightColorV") ) { return ::hx::Val( pointLightColorV ); }
		if (HX_FIELD_EQ(inName,"spotLightAmbient") ) { return ::hx::Val( spotLightAmbient ); }
		if (HX_FIELD_EQ(inName,"spotLightDiffuse") ) { return ::hx::Val( spotLightDiffuse ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"pointLightAmbient") ) { return ::hx::Val( pointLightAmbient ); }
		if (HX_FIELD_EQ(inName,"pointLightDiffuse") ) { return ::hx::Val( pointLightDiffuse ); }
		if (HX_FIELD_EQ(inName,"spotLightSpecular") ) { return ::hx::Val( spotLightSpecular ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointLightSpecular") ) { return ::hx::Val( pointLightSpecular ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointLightPositions") ) { return ::hx::Val( pointLightPositions ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Scene_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ui") ) { _hx_set_ui(HX_CTX_GET,inValue.Cast<  ::zui::Zui >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cube") ) { _hx_set_cube(HX_CTX_GET,inValue.Cast<  ::pipelines::TextureCubePipeline >()); return inValue; }
		if (HX_FIELD_EQ(inName,"proj") ) { _hx_set_proj(HX_CTX_GET,inValue.Cast<  ::kha::math::FastMatrix4 >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lightCube") ) { _hx_set_lightCube(HX_CTX_GET,inValue.Cast<  ::pipelines::LightCubePipeline >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dirLightX") ) { _hx_set_dirLightX(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dirLightY") ) { _hx_set_dirLightY(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dirLightZ") ) { _hx_set_dirLightZ(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"spotLightX") ) { _hx_set_spotLightX(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightY") ) { _hx_set_spotLightY(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightZ") ) { _hx_set_spotLightZ(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointLightX") ) { _hx_set_pointLightX(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointLightY") ) { _hx_set_pointLightY(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointLightZ") ) { _hx_set_pointLightZ(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cubePositions") ) { _hx_set_cubePositions(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dirLightColor") ) { _hx_set_dirLightColor(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dirLightActive") ) { _hx_set_dirLightActive(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dirLightColorV") ) { dirLightColorV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightColor") ) { _hx_set_spotLightColor(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dirLightAmbient") ) { _hx_set_dirLightAmbient(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"dirLightDiffuse") ) { _hx_set_dirLightDiffuse(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointLightColor") ) { _hx_set_pointLightColor(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightActive") ) { _hx_set_spotLightActive(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightColorV") ) { spotLightColorV=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dirLightSpecular") ) { _hx_set_dirLightSpecular(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointLightActive") ) { _hx_set_pointLightActive(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointLightColorV") ) { pointLightColorV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightAmbient") ) { _hx_set_spotLightAmbient(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightDiffuse") ) { _hx_set_spotLightDiffuse(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"pointLightAmbient") ) { _hx_set_pointLightAmbient(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"pointLightDiffuse") ) { _hx_set_pointLightDiffuse(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"spotLightSpecular") ) { _hx_set_spotLightSpecular(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointLightSpecular") ) { _hx_set_pointLightSpecular(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointLightPositions") ) { _hx_set_pointLightPositions(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Scene_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cube",f5,3c,c9,41));
	outFields->push(HX_("lightCube",eb,1c,e7,ba));
	outFields->push(HX_("proj",9d,c7,5e,4a));
	outFields->push(HX_("cubePositions",f5,cf,98,aa));
	outFields->push(HX_("pointLightPositions",64,ac,70,c7));
	outFields->push(HX_("ui",54,66,00,00));
	outFields->push(HX_("dirLightAmbient",cf,5e,df,4c));
	outFields->push(HX_("dirLightDiffuse",19,28,dd,7b));
	outFields->push(HX_("dirLightSpecular",2c,70,1c,42));
	outFields->push(HX_("dirLightActive",ef,fe,ad,4d));
	outFields->push(HX_("dirLightColor",5a,4c,d4,5b));
	outFields->push(HX_("dirLightColorV",bc,82,ee,fd));
	outFields->push(HX_("dirLightX",ef,53,23,7d));
	outFields->push(HX_("dirLightY",f0,53,23,7d));
	outFields->push(HX_("dirLightZ",f1,53,23,7d));
	outFields->push(HX_("pointLightAmbient",52,ce,3a,37));
	outFields->push(HX_("pointLightDiffuse",9c,97,38,66));
	outFields->push(HX_("pointLightSpecular",49,93,c2,67));
	outFields->push(HX_("pointLightActive",cc,30,7e,b9));
	outFields->push(HX_("pointLightColor",1d,c5,4d,9a));
	outFields->push(HX_("pointLightColorV",99,b4,be,69));
	outFields->push(HX_("pointLightX",32,6f,9a,ce));
	outFields->push(HX_("pointLightY",33,6f,9a,ce));
	outFields->push(HX_("pointLightZ",34,6f,9a,ce));
	outFields->push(HX_("spotLightAmbient",04,44,de,de));
	outFields->push(HX_("spotLightDiffuse",4e,0d,dc,0d));
	outFields->push(HX_("spotLightSpecular",57,19,26,6f));
	outFields->push(HX_("spotLightActive",5a,77,d8,80));
	outFields->push(HX_("spotLightColor",4f,0a,f0,a0));
	outFields->push(HX_("spotLightColorV",27,fb,18,31));
	outFields->push(HX_("spotLightX",64,b3,41,6c));
	outFields->push(HX_("spotLightY",65,b3,41,6c));
	outFields->push(HX_("spotLightZ",66,b3,41,6c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Scene_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::pipelines::TextureCubePipeline */ ,(int)offsetof(Scene_obj,cube),HX_("cube",f5,3c,c9,41)},
	{::hx::fsObject /*  ::pipelines::LightCubePipeline */ ,(int)offsetof(Scene_obj,lightCube),HX_("lightCube",eb,1c,e7,ba)},
	{::hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(Scene_obj,proj),HX_("proj",9d,c7,5e,4a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Scene_obj,cubePositions),HX_("cubePositions",f5,cf,98,aa)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Scene_obj,pointLightPositions),HX_("pointLightPositions",64,ac,70,c7)},
	{::hx::fsObject /*  ::zui::Zui */ ,(int)offsetof(Scene_obj,ui),HX_("ui",54,66,00,00)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightAmbient),HX_("dirLightAmbient",cf,5e,df,4c)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightDiffuse),HX_("dirLightDiffuse",19,28,dd,7b)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightSpecular),HX_("dirLightSpecular",2c,70,1c,42)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightActive),HX_("dirLightActive",ef,fe,ad,4d)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightColor),HX_("dirLightColor",5a,4c,d4,5b)},
	{::hx::fsInt,(int)offsetof(Scene_obj,dirLightColorV),HX_("dirLightColorV",bc,82,ee,fd)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightX),HX_("dirLightX",ef,53,23,7d)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightY),HX_("dirLightY",f0,53,23,7d)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,dirLightZ),HX_("dirLightZ",f1,53,23,7d)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightAmbient),HX_("pointLightAmbient",52,ce,3a,37)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightDiffuse),HX_("pointLightDiffuse",9c,97,38,66)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightSpecular),HX_("pointLightSpecular",49,93,c2,67)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightActive),HX_("pointLightActive",cc,30,7e,b9)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightColor),HX_("pointLightColor",1d,c5,4d,9a)},
	{::hx::fsInt,(int)offsetof(Scene_obj,pointLightColorV),HX_("pointLightColorV",99,b4,be,69)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightX),HX_("pointLightX",32,6f,9a,ce)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightY),HX_("pointLightY",33,6f,9a,ce)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,pointLightZ),HX_("pointLightZ",34,6f,9a,ce)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightAmbient),HX_("spotLightAmbient",04,44,de,de)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightDiffuse),HX_("spotLightDiffuse",4e,0d,dc,0d)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightSpecular),HX_("spotLightSpecular",57,19,26,6f)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightActive),HX_("spotLightActive",5a,77,d8,80)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightColor),HX_("spotLightColor",4f,0a,f0,a0)},
	{::hx::fsInt,(int)offsetof(Scene_obj,spotLightColorV),HX_("spotLightColorV",27,fb,18,31)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightX),HX_("spotLightX",64,b3,41,6c)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightY),HX_("spotLightY",65,b3,41,6c)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Scene_obj,spotLightZ),HX_("spotLightZ",66,b3,41,6c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Scene_obj_sStaticStorageInfo = 0;
#endif

static ::String Scene_obj_sMemberFields[] = {
	HX_("cube",f5,3c,c9,41),
	HX_("lightCube",eb,1c,e7,ba),
	HX_("proj",9d,c7,5e,4a),
	HX_("cubePositions",f5,cf,98,aa),
	HX_("pointLightPositions",64,ac,70,c7),
	HX_("ui",54,66,00,00),
	HX_("dirLightAmbient",cf,5e,df,4c),
	HX_("dirLightDiffuse",19,28,dd,7b),
	HX_("dirLightSpecular",2c,70,1c,42),
	HX_("dirLightActive",ef,fe,ad,4d),
	HX_("dirLightColor",5a,4c,d4,5b),
	HX_("dirLightColorV",bc,82,ee,fd),
	HX_("dirLightX",ef,53,23,7d),
	HX_("dirLightY",f0,53,23,7d),
	HX_("dirLightZ",f1,53,23,7d),
	HX_("pointLightAmbient",52,ce,3a,37),
	HX_("pointLightDiffuse",9c,97,38,66),
	HX_("pointLightSpecular",49,93,c2,67),
	HX_("pointLightActive",cc,30,7e,b9),
	HX_("pointLightColor",1d,c5,4d,9a),
	HX_("pointLightColorV",99,b4,be,69),
	HX_("pointLightX",32,6f,9a,ce),
	HX_("pointLightY",33,6f,9a,ce),
	HX_("pointLightZ",34,6f,9a,ce),
	HX_("spotLightAmbient",04,44,de,de),
	HX_("spotLightDiffuse",4e,0d,dc,0d),
	HX_("spotLightSpecular",57,19,26,6f),
	HX_("spotLightActive",5a,77,d8,80),
	HX_("spotLightColor",4f,0a,f0,a0),
	HX_("spotLightColorV",27,fb,18,31),
	HX_("spotLightX",64,b3,41,6c),
	HX_("spotLightY",65,b3,41,6c),
	HX_("spotLightZ",66,b3,41,6c),
	HX_("loadEverything",39,d4,86,35),
	HX_("update",09,86,05,87),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class Scene_obj::__mClass;

void Scene_obj::__register()
{
	Scene_obj _hx_dummy;
	Scene_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Scene",2c,49,ff,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Scene_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Scene_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scene_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scene_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

