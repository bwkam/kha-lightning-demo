// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <hxinc/kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_input_Pen
#include <hxinc/kha/input/Pen.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_zui_Handle
#include <hxinc/zui/Handle.h>
#endif
#ifndef INCLUDED_zui_Themes
#include <hxinc/zui/Themes.h>
#endif
#ifndef INCLUDED_zui_Zui
#include <hxinc/zui/Zui.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_24_new,"zui.Zui","new",0x1237fa00,"zui.Zui.new","Sources/zui/Zui.hx",24,0xe279dd08)
HX_DEFINE_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_199_new,"zui.Zui","new",0x1237fa00,"zui.Zui.new","Sources/zui/Zui.hx",199,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_215_setScale,"zui.Zui","setScale",0xb58429e8,"zui.Zui.setScale","Sources/zui/Zui.hx",215,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_235_bakeElements,"zui.Zui","bakeElements",0xa2bcb6d0,"zui.Zui.bakeElements","Sources/zui/Zui.hx",235,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_250_remove,"zui.Zui","remove",0xbca636a4,"zui.Zui.remove","Sources/zui/Zui.hx",250,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_262_registerInput,"zui.Zui","registerInput",0xb49af847,"zui.Zui.registerInput","Sources/zui/Zui.hx",262,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_253_registerInput,"zui.Zui","registerInput",0xb49af847,"zui.Zui.registerInput","Sources/zui/Zui.hx",253,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_266_unregisterInput,"zui.Zui","unregisterInput",0x354c764e,"zui.Zui.unregisterInput","Sources/zui/Zui.hx",266,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_280_begin,"zui.Zui","begin",0x22cfbbc9,"zui.Zui.begin","Sources/zui/Zui.hx",280,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_291_end,"zui.Zui","end",0x12312d7b,"zui.Zui.end","Sources/zui/Zui.hx",291,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_299_beginRegion,"zui.Zui","beginRegion",0xb1496d9d,"zui.Zui.beginRegion","Sources/zui/Zui.hx",299,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_319_endRegion,"zui.Zui","endRegion",0xc2c230cf,"zui.Zui.endRegion","Sources/zui/Zui.hx",319,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_326_beginSticky,"zui.Zui","beginSticky",0xbbf559d2,"zui.Zui.beginSticky","Sources/zui/Zui.hx",326,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_331_endSticky,"zui.Zui","endSticky",0xcd6e1d04,"zui.Zui.endSticky","Sources/zui/Zui.hx",331,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_340_endInput,"zui.Zui","endInput",0xea9c488f,"zui.Zui.endInput","Sources/zui/Zui.hx",340,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_364_inputChanged,"zui.Zui","inputChanged",0x1252ac6a,"zui.Zui.inputChanged","Sources/zui/Zui.hx",364,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_367_windowDirty,"zui.Zui","windowDirty",0xe139afa2,"zui.Zui.windowDirty","Sources/zui/Zui.hx",367,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_375_window,"zui.Zui","window",0x0aaa2e50,"zui.Zui.window","Sources/zui/Zui.hx",375,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_453_endWindow,"zui.Zui","endWindow",0x14c203cb,"zui.Zui.endWindow","Sources/zui/Zui.hx",453,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_546_scroll,"zui.Zui","scroll",0xff82726d,"zui.Zui.scroll","Sources/zui/Zui.hx",546,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_550_tab,"zui.Zui","tab",0x123c83f5,"zui.Zui.tab","Sources/zui/Zui.hx",550,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_572_drawTabs,"zui.Zui","drawTabs",0x8fe14d02,"zui.Zui.drawTabs","Sources/zui/Zui.hx",572,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_658_panel,"zui.Zui","panel",0x2fcc4ca4,"zui.Zui.panel","Sources/zui/Zui.hx",658,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_683_image,"zui.Zui","image",0x2fe2f0fb,"zui.Zui.image","Sources/zui/Zui.hx",683,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_739_text,"zui.Zui","text",0xe2ba0f0d,"zui.Zui.text","Sources/zui/Zui.hx",739,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_765_splitText,"zui.Zui","splitText",0xd3ac7a47,"zui.Zui.splitText","Sources/zui/Zui.hx",765,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_768_startTextEdit,"zui.Zui","startTextEdit",0x4bd9f179,"zui.Zui.startTextEdit","Sources/zui/Zui.hx",768,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_787_submitTextEdit,"zui.Zui","submitTextEdit",0xe34b03ef,"zui.Zui.submitTextEdit","Sources/zui/Zui.hx",787,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_795_updateTextEdit,"zui.Zui","updateTextEdit",0x6c030ae0,"zui.Zui.updateTextEdit","Sources/zui/Zui.hx",795,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_928_textInput,"zui.Zui","textInput",0xd95e75bd,"zui.Zui.textInput","Sources/zui/Zui.hx",928,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_966_setCursorToInput,"zui.Zui","setCursorToInput",0xd030b9b7,"zui.Zui.setCursorToInput","Sources/zui/Zui.hx",966,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_976_deselectText,"zui.Zui","deselectText",0xef7606ea,"zui.Zui.deselectText","Sources/zui/Zui.hx",976,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_988_button,"zui.Zui","button",0x91fdfc52,"zui.Zui.button","Sources/zui/Zui.hx",988,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1016_check,"zui.Zui","check",0xb8306a68,"zui.Zui.check","Sources/zui/Zui.hx",1016,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1043_radio,"zui.Zui","radio",0x5691e29b,"zui.Zui.radio","Sources/zui/Zui.hx",1043,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1072_combo,"zui.Zui","combo",0xbcd6f9ee,"zui.Zui.combo","Sources/zui/Zui.hx",1072,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1143_slider,"zui.Zui","slider",0x28226081,"zui.Zui.slider","Sources/zui/Zui.hx",1143,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1218_separator,"zui.Zui","separator",0xb3d28205,"zui.Zui.separator","Sources/zui/Zui.hx",1218,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1230_tooltip,"zui.Zui","tooltip",0xcc5626a3,"zui.Zui.tooltip","Sources/zui/Zui.hx",1230,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1235_tooltipImage,"zui.Zui","tooltipImage",0xc86279b8,"zui.Zui.tooltipImage","Sources/zui/Zui.hx",1235,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1242_drawArrow,"zui.Zui","drawArrow",0x6fedd0c5,"zui.Zui.drawArrow","Sources/zui/Zui.hx",1242,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1258_drawTree,"zui.Zui","drawTree",0x8fee35e2,"zui.Zui.drawTree","Sources/zui/Zui.hx",1258,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1272_drawCheck,"zui.Zui","drawCheck",0x9014efc4,"zui.Zui.drawCheck","Sources/zui/Zui.hx",1272,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1287_drawRadio,"zui.Zui","drawRadio",0x2e7667f7,"zui.Zui.drawRadio","Sources/zui/Zui.hx",1287,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1300_drawSlider,"zui.Zui","drawSlider",0x38328ba5,"zui.Zui.drawSlider","Sources/zui/Zui.hx",1300,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1319_drawCombo,"zui.Zui","drawCombo",0x94bb7f4a,"zui.Zui.drawCombo","Sources/zui/Zui.hx",1319,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1441_drawTooltip,"zui.Zui","drawTooltip",0xca6bbaff,"zui.Zui.drawTooltip","Sources/zui/Zui.hx",1441,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1489_drawTooltipText,"zui.Zui","drawTooltipText",0x6ed19f4c,"zui.Zui.drawTooltipText","Sources/zui/Zui.hx",1489,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1516_drawTooltipImage,"zui.Zui","drawTooltipImage",0x386997dc,"zui.Zui.drawTooltipImage","Sources/zui/Zui.hx",1516,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1532_drawString,"zui.Zui","drawString",0xd95dee55,"zui.Zui.drawString","Sources/zui/Zui.hx",1532,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1631_endElement,"zui.Zui","endElement",0x32e11e81,"zui.Zui.endElement","Sources/zui/Zui.hx",1631,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1660_highlightNextRow,"zui.Zui","highlightNextRow",0xb4768173,"zui.Zui.highlightNextRow","Sources/zui/Zui.hx",1660,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1664_getRatio,"zui.Zui","getRatio",0x727c36f5,"zui.Zui.getRatio","Sources/zui/Zui.hx",1664,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1671_row,"zui.Zui","row",0x123b0bba,"zui.Zui.row","Sources/zui/Zui.hx",1671,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1679_indent,"zui.Zui","indent",0x4c10a6cc,"zui.Zui.indent","Sources/zui/Zui.hx",1679,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1685_unindent,"zui.Zui","unindent",0xc4bb2de5,"zui.Zui.unindent","Sources/zui/Zui.hx",1685,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1692_fadeColor,"zui.Zui","fadeColor",0xb897ebe7,"zui.Zui.fadeColor","Sources/zui/Zui.hx",1692,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1695_fill,"zui.Zui","fill",0xd97c10e3,"zui.Zui.fill","Sources/zui/Zui.hx",1695,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1702_rect,"zui.Zui","rect",0xe1678f84,"zui.Zui.rect","Sources/zui/Zui.hx",1702,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1709_drawRect,"zui.Zui","drawRect",0x8e91e9a8,"zui.Zui.drawRect","Sources/zui/Zui.hx",1709,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1715_isVisible,"zui.Zui","isVisible",0x29761748,"zui.Zui.isVisible","Sources/zui/Zui.hx",1715,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1720_getReleased,"zui.Zui","getReleased",0xb3721513,"zui.Zui.getReleased","Sources/zui/Zui.hx",1720,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1725_getPushed,"zui.Zui","getPushed",0x70d6bf8f,"zui.Zui.getPushed","Sources/zui/Zui.hx",1725,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1730_getStarted,"zui.Zui","getStarted",0x0ae6f9ab,"zui.Zui.getStarted","Sources/zui/Zui.hx",1730,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1735_getInitialHover,"zui.Zui","getInitialHover",0xd6ab55ee,"zui.Zui.getInitialHover","Sources/zui/Zui.hx",1735,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1743_getHover,"zui.Zui","getHover",0xb9bce7a6,"zui.Zui.getHover","Sources/zui/Zui.hx",1743,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1753_getInputInRect,"zui.Zui","getInputInRect",0xf5ae54bd,"zui.Zui.getInputInRect","Sources/zui/Zui.hx",1753,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1758_onMouseDown,"zui.Zui","onMouseDown",0x279c5da8,"zui.Zui.onMouseDown","Sources/zui/Zui.hx",1758,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1770_onMouseUp,"zui.Zui","onMouseUp",0x1a70ce21,"zui.Zui.onMouseUp","Sources/zui/Zui.hx",1770,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1798_onMouseMove,"zui.Zui","onMouseMove",0x2d8f4857,"zui.Zui.onMouseMove","Sources/zui/Zui.hx",1798,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1803_onMouseWheel,"zui.Zui","onMouseWheel",0x6d246c95,"zui.Zui.onMouseWheel","Sources/zui/Zui.hx",1803,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1806_setInputPosition,"zui.Zui","setInputPosition",0x18492431,"zui.Zui.setInputPosition","Sources/zui/Zui.hx",1806,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1818_onPenDown,"zui.Zui","onPenDown",0x70c8341c,"zui.Zui.onPenDown","Sources/zui/Zui.hx",1818,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1821_onPenUp,"zui.Zui","onPenUp",0xb7fe5f95,"zui.Zui.onPenUp","Sources/zui/Zui.hx",1821,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1836_onPenMove,"zui.Zui","onPenMove",0x76bb1ecb,"zui.Zui.onPenMove","Sources/zui/Zui.hx",1836,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1839_onKeyDown,"zui.Zui","onKeyDown",0xf64543e2,"zui.Zui.onKeyDown","Sources/zui/Zui.hx",1839,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1865_onKeyUp,"zui.Zui","onKeyUp",0xd705d1db,"zui.Zui.onKeyUp","Sources/zui/Zui.hx",1865,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1887_onKeyPress,"zui.Zui","onKeyPress",0x71131803,"zui.Zui.onKeyPress","Sources/zui/Zui.hx",1887,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1945_onCut,"zui.Zui","onCut",0xa4dceb43,"zui.Zui.onCut","Sources/zui/Zui.hx",1945,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1949_onCopy,"zui.Zui","onCopy",0x9c6c5ed4,"zui.Zui.onCopy","Sources/zui/Zui.hx",1949,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1953_onPaste,"zui.Zui","onPaste",0xb55d6b54,"zui.Zui.onPaste","Sources/zui/Zui.hx",1953,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1959_ELEMENT_W,"zui.Zui","ELEMENT_W",0x4596d654,"zui.Zui.ELEMENT_W","Sources/zui/Zui.hx",1959,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1962_ELEMENT_H,"zui.Zui","ELEMENT_H",0x4596d645,"zui.Zui.ELEMENT_H","Sources/zui/Zui.hx",1962,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1965_ELEMENT_OFFSET,"zui.Zui","ELEMENT_OFFSET",0xf9919876,"zui.Zui.ELEMENT_OFFSET","Sources/zui/Zui.hx",1965,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1968_ARROW_SIZE,"zui.Zui","ARROW_SIZE",0xc52078b7,"zui.Zui.ARROW_SIZE","Sources/zui/Zui.hx",1968,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1971_BUTTON_H,"zui.Zui","BUTTON_H",0xe43933db,"zui.Zui.BUTTON_H","Sources/zui/Zui.hx",1971,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1974_CHECK_SIZE,"zui.Zui","CHECK_SIZE",0x616d9d58,"zui.Zui.CHECK_SIZE","Sources/zui/Zui.hx",1974,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1977_CHECK_SELECT_SIZE,"zui.Zui","CHECK_SELECT_SIZE",0xc767886d,"zui.Zui.CHECK_SELECT_SIZE","Sources/zui/Zui.hx",1977,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1980_FONT_SIZE,"zui.Zui","FONT_SIZE",0x02911211,"zui.Zui.FONT_SIZE","Sources/zui/Zui.hx",1980,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1983_SCROLL_W,"zui.Zui","SCROLL_W",0x145ba6c5,"zui.Zui.SCROLL_W","Sources/zui/Zui.hx",1983,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1986_TEXT_OFFSET,"zui.Zui","TEXT_OFFSET",0xfc6729c5,"zui.Zui.TEXT_OFFSET","Sources/zui/Zui.hx",1986,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1989_TAB_W,"zui.Zui","TAB_W",0xfb4bd22d,"zui.Zui.TAB_W","Sources/zui/Zui.hx",1989,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1992_HEADER_DRAG_H,"zui.Zui","HEADER_DRAG_H",0x520f754f,"zui.Zui.HEADER_DRAG_H","Sources/zui/Zui.hx",1992,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1995_SCALE,"zui.Zui","SCALE",0x6936d80a,"zui.Zui.SCALE","Sources/zui/Zui.hx",1995,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1998_TOOLTIP_DELAY,"zui.Zui","TOOLTIP_DELAY",0xdf599567,"zui.Zui.TOOLTIP_DELAY","Sources/zui/Zui.hx",1998,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_2001_resize,"zui.Zui","resize",0xc098f454,"zui.Zui.resize","Sources/zui/Zui.hx",2001,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1587_extractColoring,"zui.Zui","extractColoring",0xd9718f60,"zui.Zui.extractColoring","Sources/zui/Zui.hx",1587,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1623_isChar,"zui.Zui","isChar",0x1743be40,"zui.Zui.isChar","Sources/zui/Zui.hx",1623,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1626_checkStart,"zui.Zui","checkStart",0x1a65c0da,"zui.Zui.checkStart","Sources/zui/Zui.hx",1626,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_44_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",44,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_45_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",45,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_46_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",46,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_47_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",47,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_48_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",48,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_49_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",49,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_50_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",50,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_51_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",51,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_52_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",52,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_53_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",53,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_59_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",59,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_90_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",90,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_91_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",91,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_92_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",92,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_93_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",93,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_94_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",94,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_95_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",95,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_96_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",96,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1318_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",1318,0xe279dd08)
namespace zui{

void Zui_obj::__construct( ::Dynamic ops){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_24_new)
HXLINE( 183)		this->_hx_set_checkSelectImage(HX_CTX, null());
HXLINE( 182)		this->elementsBaked = false;
HXLINE( 180)		this->scissor = false;
HXLINE( 179)		this->sticky = false;
HXLINE( 178)		this->tabVertical = false;
HXLINE( 177)		this->tabScroll = ((Float)0.0);
HXLINE( 176)		this->_hx_set_tabHandle(HX_CTX, null());
HXLINE( 175)		this->_hx_set_tabColors(HX_CTX, null());
HXLINE( 174)		this->_hx_set_tabNames(HX_CTX, null());
HXLINE( 173)		this->tooltipTime = ((Float)0.0);
HXLINE( 172)		this->tooltipWait = false;
HXLINE( 171)		this->tooltipShown = false;
HXLINE( 170)		this->tooltipY = ((Float)0.0);
HXLINE( 169)		this->tooltipX = ((Float)0.0);
HXLINE( 168)		this->tooltipInvertY = false;
HXLINE( 167)		this->_hx_set_tooltipImgMaxWidth(HX_CTX, null());
HXLINE( 166)		this->_hx_set_tooltipImg(HX_CTX, null());
HXLINE( 165)		this->_hx_set_tooltipText(HX_CTX, HX_("",00,00,00,00));
HXLINE( 164)		this->comboInitialValue = 0;
HXLINE( 163)		this->comboToSubmit = 0;
HXLINE( 162)		this->_hx_set_submitComboHandle(HX_CTX, null());
HXLINE( 161)		this->comboSearchBar = false;
HXLINE( 154)		this->_hx_set_comboSelectedWindow(HX_CTX, null());
HXLINE( 153)		this->_hx_set_comboSelectedHandle(HX_CTX, null());
HXLINE( 152)		this->_hx_set_tabPressedHandle(HX_CTX, null());
HXLINE( 151)		this->tabPressed = false;
HXLINE( 150)		this->_hx_set_textToSubmit(HX_CTX, HX_("",00,00,00,00));
HXLINE( 149)		this->_hx_set_submitTextHandle(HX_CTX, null());
HXLINE( 147)		this->_hx_set_textSelectedHandle(HX_CTX, null());
HXLINE( 145)		this->restoreY = ((Float)-1.0);
HXLINE( 144)		this->restoreX = ((Float)-1.0);
HXLINE( 143)		this->windowHeaderH = ((Float)0.0);
HXLINE( 142)		this->windowHeaderW = ((Float)0.0);
HXLINE( 141)		this->_hx_set_dragHandle(HX_CTX, null());
HXLINE( 140)		this->_hx_set_scrollHandle(HX_CTX, null());
HXLINE( 139)		this->windowEnded = true;
HXLINE( 135)		this->_windowY = ((Float)0.0);
HXLINE( 134)		this->_windowX = ((Float)0.0);
HXLINE( 127)		this->imageScrollAlign = true;
HXLINE( 126)		this->scrollAlign = ((Float)0.0);
HXLINE( 102)		this->curRatio = -1;
HXLINE( 100)		this->highlightAnchor = 0;
HXLINE(  99)		this->cursorX = 0;
HXLINE(  98)		this->inputStartedTime = ((Float)0.0);
HXLINE(  88)		this->_hx_set_key(HX_CTX, null());
HXLINE(  87)		this->isTabDown = false;
HXLINE(  86)		this->isReturnDown = false;
HXLINE(  85)		this->isEscapeDown = false;
HXLINE(  84)		this->isDeleteDown = false;
HXLINE(  83)		this->isBackspaceDown = false;
HXLINE(  82)		this->isADown = false;
HXLINE(  81)		this->isAltDown = false;
HXLINE(  80)		this->isCtrlDown = false;
HXLINE(  79)		this->isShiftDown = false;
HXLINE(  78)		this->isKeyDown = false;
HXLINE(  77)		this->isKeyPressed = false;
HXLINE(  69)		this->inputWheelDelta = 0;
HXLINE(  62)		this->inputEnabled = true;
HXLINE(  61)		this->inputRegistered = false;
HXLINE(  58)		this->sliderTooltipW = ((Float)0.0);
HXLINE(  57)		this->sliderTooltipY = ((Float)0.0);
HXLINE(  56)		this->sliderTooltipX = ((Float)0.0);
HXLINE(  55)		this->sliderTooltip = false;
HXLINE(  54)		this->touchHoldActivated = false;
HXLINE(  43)		this->highlightFullRow = false;
HXLINE(  42)		this->windowBorderRight = 0;
HXLINE(  41)		this->windowBorderLeft = 0;
HXLINE(  40)		this->windowBorderBottom = 0;
HXLINE(  39)		this->windowBorderTop = 0;
HXLINE(  38)		this->_hx_set_textColoring(HX_CTX, null());
HXLINE(  37)		this->tabSwitchEnabled = true;
HXLINE(  36)		this->highlightOnSelect = true;
HXLINE(  35)		this->alwaysRedraw = false;
HXLINE(  34)		this->scrollEnabled = true;
HXLINE(  33)		this->imageInvertY = false;
HXLINE(  32)		this->changed = false;
HXLINE(  31)		this->isReleased = false;
HXLINE(  30)		this->isHovered = false;
HXLINE(  29)		this->isPushed = false;
HXLINE(  28)		this->isStarted = false;
HXLINE(  27)		this->enabled = true;
HXLINE(  26)		this->isTyping = false;
HXLINE(  25)		this->isScrolling = false;
HXLINE( 186)		if (::hx::IsNull( ops->__Field(HX_("theme",09,7e,86,0f),::hx::paccDynamic) )) {
HXLINE( 186)			ops->__SetField(HX_("theme",09,7e,86,0f),::zui::Themes_obj::dark,::hx::paccDynamic);
            		}
HXLINE( 187)		this->_hx_set_t(HX_CTX, ops->__Field(HX_("theme",09,7e,86,0f),::hx::paccDynamic));
HXLINE( 188)		if (::hx::IsNull( ops->__Field(HX_("khaWindowId",2f,bc,2f,40),::hx::paccDynamic) )) {
HXLINE( 188)			ops->__SetField(HX_("khaWindowId",2f,bc,2f,40),0,::hx::paccDynamic);
            		}
HXLINE( 189)		if (::hx::IsNull( ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic) )) {
HXLINE( 189)			ops->__SetField(HX_("scaleFactor",f9,5e,11,d0),((Float)1.0),::hx::paccDynamic);
            		}
HXLINE( 190)		if (::hx::IsNull( ops->__Field(HX_("autoNotifyInput",52,41,f2,7c),::hx::paccDynamic) )) {
HXLINE( 190)			ops->__SetField(HX_("autoNotifyInput",52,41,f2,7c),true,::hx::paccDynamic);
            		}
HXLINE( 191)		this->_hx_set_ops(HX_CTX, ops);
HXLINE( 192)		this->setScale(( (Float)(ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE( 193)		if (( (bool)(ops->__Field(HX_("autoNotifyInput",52,41,f2,7c),::hx::paccDynamic)) )) {
HXLINE( 193)			this->registerInput();
            		}
HXLINE( 194)		if (::hx::IsNull( ::zui::Zui_obj::copyReceiver )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> frames){
            				HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_199_new)
HXLINE( 199)				bool _hx_tmp;
HXDLIN( 199)				bool _hx_tmp1;
HXDLIN( 199)				if (!(::zui::Zui_obj::isCopy)) {
HXLINE( 199)					_hx_tmp1 = ::zui::Zui_obj::isPaste;
            				}
            				else {
HXLINE( 199)					_hx_tmp1 = true;
            				}
HXDLIN( 199)				if (_hx_tmp1) {
HXLINE( 199)					_hx_tmp = (++::zui::Zui_obj::copyFrame > 1);
            				}
            				else {
HXLINE( 199)					_hx_tmp = false;
            				}
HXDLIN( 199)				if (_hx_tmp) {
HXLINE( 200)					::zui::Zui_obj::isCopy = (::zui::Zui_obj::isCut = (::zui::Zui_obj::isPaste = false));
            				}
            				else {
HXLINE( 203)					bool _hx_tmp2;
HXDLIN( 203)					if ((::zui::Zui_obj::copyFrame > 1)) {
HXLINE( 203)						_hx_tmp2 = (++::zui::Zui_obj::copyFrame > 2);
            					}
            					else {
HXLINE( 203)						_hx_tmp2 = false;
            					}
HXDLIN( 203)					if (_hx_tmp2) {
HXLINE( 204)						::zui::Zui_obj::copyFrame = 0;
HXLINE( 205)						::zui::Zui_obj::textToPaste = HX_("",00,00,00,00);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 195)			::zui::Zui_obj::copyReceiver = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 196)			::kha::System_obj::notifyOnCutCopyPaste(this->onCut_dyn(),this->onCopy_dyn(),this->onPaste_dyn());
HXLINE( 197)			::kha::System_obj::notifyOnFrames( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 209)		 ::kha::graphics4::VertexStructure rtTextVS = ::kha::graphics4::Graphics2_obj::createTextVertexStructure();
HXLINE( 210)		this->_hx_set_rtTextPipeline(HX_CTX, ::kha::graphics4::Graphics2_obj::createTextPipeline(rtTextVS));
HXLINE( 211)		this->rtTextPipeline->alphaBlendSource = 1;
HXLINE( 212)		this->rtTextPipeline->compile();
            	}

Dynamic Zui_obj::__CreateEmpty() { return new Zui_obj; }

void *Zui_obj::_hx_vtable = 0;

Dynamic Zui_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Zui_obj > _hx_result = new Zui_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Zui_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x263c3520;
}

void Zui_obj::setScale(Float factor){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_215_setScale)
HXLINE( 216)		this->ops->__SetField(HX_("scaleFactor",f9,5e,11,d0),factor,::hx::paccDynamic);
HXLINE( 217)		this->fontSize = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("FONT_SIZE",71,f0,3d,80),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 218)		Float fontHeight = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->height(this->fontSize);
HXLINE( 219)		this->fontOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - fontHeight) / ( (Float)(2) ));
HXLINE( 220)		this->arrowOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 221)		this->arrowOffsetX = this->arrowOffsetY;
HXLINE( 222)		this->titleOffsetX = (((this->arrowOffsetX * ( (Float)(2) )) + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE( 223)		this->buttonOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 224)		this->checkOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 225)		this->checkOffsetX = this->checkOffsetY;
HXLINE( 226)		this->checkSelectOffsetY = (((( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 227)		this->checkSelectOffsetX = this->checkSelectOffsetY;
HXLINE( 228)		this->radioOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 229)		this->radioOffsetX = this->radioOffsetY;
HXLINE( 230)		this->radioSelectOffsetY = (((( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 231)		this->radioSelectOffsetX = this->radioSelectOffsetY;
HXLINE( 232)		this->elementsBaked = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,setScale,(void))

void Zui_obj::bakeElements(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_235_bakeElements)
HXLINE( 236)		if (::hx::IsNotNull( this->checkSelectImage )) {
HXLINE( 237)			this->checkSelectImage->unload();
            		}
HXLINE( 239)		int _hx_tmp = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXDLIN( 239)		this->_hx_set_checkSelectImage(HX_CTX, ::kha::Image_obj::createRenderTarget(_hx_tmp,::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),null(),0,1));
HXLINE( 240)		 ::kha::graphics2::Graphics g = this->checkSelectImage->get_g2();
HXLINE( 241)		g->begin(true,0);
HXLINE( 242)		g->set_color(( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),::hx::paccDynamic)) ));
HXLINE( 243)		int _hx_tmp1 = this->checkSelectImage->get_width();
HXDLIN( 243)		int _hx_tmp2 = this->checkSelectImage->get_height();
HXDLIN( 243)		g->drawLine(( (Float)(0) ),( (Float)(0) ),( (Float)(_hx_tmp1) ),( (Float)(_hx_tmp2) ),(( (Float)(2) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 244)		int _hx_tmp3 = this->checkSelectImage->get_width();
HXDLIN( 244)		int _hx_tmp4 = this->checkSelectImage->get_height();
HXDLIN( 244)		g->drawLine(( (Float)(_hx_tmp3) ),( (Float)(0) ),( (Float)(0) ),( (Float)(_hx_tmp4) ),(( (Float)(2) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 245)		g->end();
HXLINE( 246)		this->elementsBaked = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,bakeElements,(void))

void Zui_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_250_remove)
HXDLIN( 250)		if (( (bool)(this->ops->__Field(HX_("autoNotifyInput",52,41,f2,7c),::hx::paccDynamic)) )) {
HXDLIN( 250)			this->unregisterInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,remove,(void))

void Zui_obj::registerInput(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::zui::Zui,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_262_registerInput)
HXLINE( 262)			_gthis->inputDX = (_gthis->inputDY = ( (Float)(0) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_253_registerInput)
HXDLIN( 253)		 ::zui::Zui _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 254)		if (this->inputRegistered) {
HXLINE( 254)			return;
            		}
HXLINE( 255)		::kha::input::Mouse_obj::get(null())->notifyWindowed(( (int)(this->ops->__Field(HX_("khaWindowId",2f,bc,2f,40),::hx::paccDynamic)) ),this->onMouseDown_dyn(),this->onMouseUp_dyn(),this->onMouseMove_dyn(),this->onMouseWheel_dyn(),null());
HXLINE( 256)		if (::hx::IsNotNull( ::kha::input::Pen_obj::get(null()) )) {
HXLINE( 256)			::kha::input::Pen_obj::get(null())->notify(this->onPenDown_dyn(),this->onPenUp_dyn(),this->onPenMove_dyn());
            		}
HXLINE( 257)		::kha::input::Keyboard_obj::get(null())->notify(this->onKeyDown_dyn(),this->onKeyUp_dyn(),this->onKeyPress_dyn());
HXLINE( 262)		::kha::System_obj::notifyOnApplicationState( ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 263)		this->inputRegistered = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,registerInput,(void))

void Zui_obj::unregisterInput(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_266_unregisterInput)
HXLINE( 267)		if (!(this->inputRegistered)) {
HXLINE( 267)			return;
            		}
HXLINE( 268)		::kha::input::Mouse_obj::get(null())->removeWindowed(( (int)(this->ops->__Field(HX_("khaWindowId",2f,bc,2f,40),::hx::paccDynamic)) ),this->onMouseDown_dyn(),this->onMouseUp_dyn(),this->onMouseMove_dyn(),this->onMouseWheel_dyn(),null());
HXLINE( 269)		if (::hx::IsNotNull( ::kha::input::Pen_obj::get(null()) )) {
HXLINE( 269)			::kha::input::Pen_obj::get(null())->remove(this->onPenDown_dyn(),this->onPenUp_dyn(),this->onPenMove_dyn());
            		}
HXLINE( 270)		::kha::input::Keyboard_obj::get(null())->remove(this->onKeyDown_dyn(),this->onKeyUp_dyn(),this->onKeyPress_dyn());
HXLINE( 274)		this->endInput();
HXLINE( 275)		this->isShiftDown = (this->isCtrlDown = (this->isAltDown = false));
HXLINE( 276)		this->inputX = (this->inputY = ( (Float)(0) ));
HXLINE( 277)		this->inputRegistered = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,unregisterInput,(void))

void Zui_obj::begin( ::kha::graphics2::Graphics g){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_280_begin)
HXLINE( 281)		if (!(this->elementsBaked)) {
HXLINE( 281)			this->bakeElements();
            		}
HXLINE( 282)		this->changed = false;
HXLINE( 283)		this->_hx_set_globalG(HX_CTX, g);
HXLINE( 284)		::zui::Zui_obj::current = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 285)		this->_x = ( (Float)(0) );
HXLINE( 286)		this->_y = ( (Float)(0) );
HXLINE( 287)		this->_w = 0;
HXLINE( 288)		this->_h = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,begin,(void))

void Zui_obj::end(::hx::Null< bool >  __o_last){
            		bool last = __o_last.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_291_end)
HXLINE( 292)		if (!(this->windowEnded)) {
HXLINE( 292)			this->endWindow(null());
            		}
HXLINE( 293)		this->drawCombo();
HXLINE( 294)		this->drawTooltip(true);
HXLINE( 295)		this->_hx_set_tabPressedHandle(HX_CTX, null());
HXLINE( 296)		if (last) {
HXLINE( 296)			this->endInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,end,(void))

void Zui_obj::beginRegion( ::kha::graphics2::Graphics g,int x,int y,int w){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_299_beginRegion)
HXLINE( 300)		if (!(this->elementsBaked)) {
HXLINE( 301)			g->end();
HXLINE( 302)			this->bakeElements();
HXLINE( 303)			g->begin(false,null());
            		}
HXLINE( 305)		this->changed = false;
HXLINE( 306)		this->_hx_set_globalG(HX_CTX, g);
HXLINE( 307)		this->_hx_set_g(HX_CTX, g);
HXLINE( 308)		this->_hx_set_currentWindow(HX_CTX, null());
HXLINE( 309)		this->_hx_set_tooltipText(HX_CTX, HX_("",00,00,00,00));
HXLINE( 310)		this->_hx_set_tooltipImg(HX_CTX, null());
HXLINE( 311)		this->_windowX = ( (Float)(0) );
HXLINE( 312)		this->_windowY = ( (Float)(0) );
HXLINE( 313)		this->_windowW = ( (Float)(w) );
HXLINE( 314)		this->_x = ( (Float)(x) );
HXLINE( 315)		this->_y = ( (Float)(y) );
HXLINE( 316)		this->_w = w;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,beginRegion,(void))

void Zui_obj::endRegion(::hx::Null< bool >  __o_last){
            		bool last = __o_last.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_319_endRegion)
HXLINE( 320)		this->drawTooltip(false);
HXLINE( 321)		this->_hx_set_tabPressedHandle(HX_CTX, null());
HXLINE( 322)		if (last) {
HXLINE( 322)			this->endInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,endRegion,(void))

void Zui_obj::beginSticky(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_326_beginSticky)
HXLINE( 327)		this->sticky = true;
HXLINE( 328)		 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 328)		_hx_tmp->_y = (_hx_tmp->_y - this->currentWindow->scrollOffset);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,beginSticky,(void))

void Zui_obj::endSticky(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_331_endSticky)
HXLINE( 332)		this->sticky = false;
HXLINE( 333)		this->scissor = true;
HXLINE( 334)		 ::kha::graphics2::Graphics _hx_tmp = this->g;
HXDLIN( 334)		int _hx_tmp1 = ::Std_obj::_hx_int(this->_y);
HXDLIN( 334)		int _hx_tmp2 = ::Std_obj::_hx_int(this->_windowW);
HXDLIN( 334)		_hx_tmp->scissor(0,_hx_tmp1,_hx_tmp2,::Std_obj::_hx_int((this->_windowH - this->_y)));
HXLINE( 335)		 ::zui::Zui _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 335)		_hx_tmp3->windowHeaderH = (_hx_tmp3->windowHeaderH + (this->_y - this->windowHeaderH));
HXLINE( 336)		 ::zui::Zui _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 336)		_hx_tmp4->_y = (_hx_tmp4->_y + this->currentWindow->scrollOffset);
HXLINE( 337)		this->isHovered = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,endSticky,(void))

void Zui_obj::endInput(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_340_endInput)
HXLINE( 341)		this->isKeyPressed = false;
HXLINE( 342)		this->inputStarted = false;
HXLINE( 343)		this->inputStartedR = false;
HXLINE( 344)		this->inputReleased = false;
HXLINE( 345)		this->inputReleasedR = false;
HXLINE( 346)		this->inputDX = ( (Float)(0) );
HXLINE( 347)		this->inputDY = ( (Float)(0) );
HXLINE( 348)		this->inputWheelDelta = 0;
HXLINE( 349)		this->penInUse = false;
HXLINE( 350)		bool _hx_tmp;
HXDLIN( 350)		bool _hx_tmp1;
HXDLIN( 350)		if (::zui::Zui_obj::keyRepeat) {
HXLINE( 350)			_hx_tmp1 = this->isKeyDown;
            		}
            		else {
HXLINE( 350)			_hx_tmp1 = false;
            		}
HXDLIN( 350)		if (_hx_tmp1) {
HXLINE( 350)			Float _hx_tmp2 = ::kha::Scheduler_obj::time();
HXDLIN( 350)			_hx_tmp = ((_hx_tmp2 - ::zui::Zui_obj::keyRepeatTime) > ((Float)0.05));
            		}
            		else {
HXLINE( 350)			_hx_tmp = false;
            		}
HXDLIN( 350)		if (_hx_tmp) {
HXLINE( 351)			bool _hx_tmp3;
HXDLIN( 351)			bool _hx_tmp4;
HXDLIN( 351)			bool _hx_tmp5;
HXDLIN( 351)			bool _hx_tmp6;
HXDLIN( 351)			bool _hx_tmp7;
HXDLIN( 351)			if (::hx::IsNotEq( this->key,8 )) {
HXLINE( 351)				_hx_tmp7 = ::hx::IsEq( this->key,46 );
            			}
            			else {
HXLINE( 351)				_hx_tmp7 = true;
            			}
HXDLIN( 351)			if (!(_hx_tmp7)) {
HXLINE( 351)				_hx_tmp6 = ::hx::IsEq( this->key,37 );
            			}
            			else {
HXLINE( 351)				_hx_tmp6 = true;
            			}
HXDLIN( 351)			if (!(_hx_tmp6)) {
HXLINE( 351)				_hx_tmp5 = ::hx::IsEq( this->key,39 );
            			}
            			else {
HXLINE( 351)				_hx_tmp5 = true;
            			}
HXDLIN( 351)			if (!(_hx_tmp5)) {
HXLINE( 351)				_hx_tmp4 = ::hx::IsEq( this->key,38 );
            			}
            			else {
HXLINE( 351)				_hx_tmp4 = true;
            			}
HXDLIN( 351)			if (!(_hx_tmp4)) {
HXLINE( 351)				_hx_tmp3 = ::hx::IsEq( this->key,40 );
            			}
            			else {
HXLINE( 351)				_hx_tmp3 = true;
            			}
HXDLIN( 351)			if (_hx_tmp3) {
HXLINE( 352)				::zui::Zui_obj::keyRepeatTime = ::kha::Scheduler_obj::time();
HXLINE( 353)				this->isKeyPressed = true;
            			}
            		}
HXLINE( 356)		bool _hx_tmp8;
HXDLIN( 356)		bool _hx_tmp9;
HXDLIN( 356)		bool _hx_tmp10;
HXDLIN( 356)		bool _hx_tmp11;
HXDLIN( 356)		bool _hx_tmp12;
HXDLIN( 356)		if (::zui::Zui_obj::touchHold) {
HXLINE( 356)			_hx_tmp12 = this->inputDown;
            		}
            		else {
HXLINE( 356)			_hx_tmp12 = false;
            		}
HXDLIN( 356)		if (_hx_tmp12) {
HXLINE( 356)			_hx_tmp11 = (this->inputX == this->inputStartedX);
            		}
            		else {
HXLINE( 356)			_hx_tmp11 = false;
            		}
HXDLIN( 356)		if (_hx_tmp11) {
HXLINE( 356)			_hx_tmp10 = (this->inputY == this->inputStartedY);
            		}
            		else {
HXLINE( 356)			_hx_tmp10 = false;
            		}
HXDLIN( 356)		if (_hx_tmp10) {
HXLINE( 356)			_hx_tmp9 = (this->inputStartedTime > 0);
            		}
            		else {
HXLINE( 356)			_hx_tmp9 = false;
            		}
HXDLIN( 356)		if (_hx_tmp9) {
HXLINE( 356)			Float _hx_tmp13 = ::kha::Scheduler_obj::time();
HXDLIN( 356)			_hx_tmp8 = ((_hx_tmp13 - this->inputStartedTime) > ((Float)0.7));
            		}
            		else {
HXLINE( 356)			_hx_tmp8 = false;
            		}
HXDLIN( 356)		if (_hx_tmp8) {
HXLINE( 357)			this->touchHoldActivated = true;
HXLINE( 358)			this->inputReleasedR = true;
HXLINE( 359)			this->inputStartedTime = ( (Float)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,endInput,(void))

bool Zui_obj::inputChanged(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_364_inputChanged)
HXDLIN( 364)		bool _hx_tmp;
HXDLIN( 364)		bool _hx_tmp1;
HXDLIN( 364)		bool _hx_tmp2;
HXDLIN( 364)		bool _hx_tmp3;
HXDLIN( 364)		bool _hx_tmp4;
HXDLIN( 364)		bool _hx_tmp5;
HXDLIN( 364)		bool _hx_tmp6;
HXDLIN( 364)		bool _hx_tmp7;
HXDLIN( 364)		if ((this->inputDX == 0)) {
HXDLIN( 364)			_hx_tmp7 = (this->inputDY != 0);
            		}
            		else {
HXDLIN( 364)			_hx_tmp7 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp7)) {
HXDLIN( 364)			_hx_tmp6 = (this->inputWheelDelta != 0);
            		}
            		else {
HXDLIN( 364)			_hx_tmp6 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp6)) {
HXDLIN( 364)			_hx_tmp5 = this->inputStarted;
            		}
            		else {
HXDLIN( 364)			_hx_tmp5 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp5)) {
HXDLIN( 364)			_hx_tmp4 = this->inputStartedR;
            		}
            		else {
HXDLIN( 364)			_hx_tmp4 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp4)) {
HXDLIN( 364)			_hx_tmp3 = this->inputReleased;
            		}
            		else {
HXDLIN( 364)			_hx_tmp3 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp3)) {
HXDLIN( 364)			_hx_tmp2 = this->inputReleasedR;
            		}
            		else {
HXDLIN( 364)			_hx_tmp2 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp2)) {
HXDLIN( 364)			_hx_tmp1 = this->inputDown;
            		}
            		else {
HXDLIN( 364)			_hx_tmp1 = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp1)) {
HXDLIN( 364)			_hx_tmp = this->inputDownR;
            		}
            		else {
HXDLIN( 364)			_hx_tmp = true;
            		}
HXDLIN( 364)		if (!(_hx_tmp)) {
HXDLIN( 364)			return this->isKeyPressed;
            		}
            		else {
HXDLIN( 364)			return true;
            		}
HXDLIN( 364)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,inputChanged,return )

bool Zui_obj::windowDirty( ::zui::Handle handle,int x,int y,int w,int h){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_367_windowDirty)
HXLINE( 368)		int wx = (x + handle->dragX);
HXLINE( 369)		int wy = (y + handle->dragY);
HXLINE( 370)		bool inputChanged;
HXDLIN( 370)		if (this->getInputInRect(( (Float)(wx) ),( (Float)(wy) ),( (Float)(w) ),( (Float)(h) ),null())) {
HXLINE( 370)			inputChanged = this->inputChanged();
            		}
            		else {
HXLINE( 370)			inputChanged = false;
            		}
HXLINE( 371)		bool _hx_tmp;
HXDLIN( 371)		if (!(this->alwaysRedraw)) {
HXLINE( 371)			_hx_tmp = this->isScrolling;
            		}
            		else {
HXLINE( 371)			_hx_tmp = true;
            		}
HXDLIN( 371)		if (!(_hx_tmp)) {
HXLINE( 371)			return inputChanged;
            		}
            		else {
HXLINE( 371)			return true;
            		}
HXDLIN( 371)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,windowDirty,return )

bool Zui_obj::window( ::zui::Handle handle,int x,int y,int w,int h,::hx::Null< bool >  __o_drag){
            		bool drag = __o_drag.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_375_window)
HXLINE( 376)		bool _hx_tmp;
HXDLIN( 376)		bool _hx_tmp1;
HXDLIN( 376)		if (::hx::IsNotNull( handle->texture )) {
HXLINE( 376)			_hx_tmp1 = (w != handle->texture->get_width());
            		}
            		else {
HXLINE( 376)			_hx_tmp1 = true;
            		}
HXDLIN( 376)		if (!(_hx_tmp1)) {
HXLINE( 376)			_hx_tmp = (h != handle->texture->get_height());
            		}
            		else {
HXLINE( 376)			_hx_tmp = true;
            		}
HXDLIN( 376)		if (_hx_tmp) {
HXLINE( 377)			this->resize(handle,w,h);
            		}
HXLINE( 380)		if (!(this->windowEnded)) {
HXLINE( 380)			this->endWindow(null());
            		}
HXLINE( 381)		this->windowEnded = false;
HXLINE( 383)		this->_hx_set_g(HX_CTX, handle->texture->get_g2());
HXLINE( 384)		this->_hx_set_currentWindow(HX_CTX, handle);
HXLINE( 385)		this->_windowX = ( (Float)((x + handle->dragX)) );
HXLINE( 386)		this->_windowY = ( (Float)((y + handle->dragY)) );
HXLINE( 387)		this->_windowW = ( (Float)(w) );
HXLINE( 388)		this->_windowH = ( (Float)(h) );
HXLINE( 389)		this->windowHeaderW = ( (Float)(0) );
HXLINE( 390)		this->windowHeaderH = ( (Float)(0) );
HXLINE( 392)		if (this->windowDirty(handle,x,y,w,h)) {
HXLINE( 393)			handle->redraws = 2;
            		}
HXLINE( 396)		if (::hx::IsNotNull( ::zui::Zui_obj::onBorderHover )) {
HXLINE( 397)			if (this->getInputInRect((this->_windowX - ( (Float)(4) )),this->_windowY,( (Float)(8) ),this->_windowH,null())) {
HXLINE( 398)				::zui::Zui_obj::onBorderHover(handle,0);
            			}
            			else {
HXLINE( 400)				if (this->getInputInRect(((this->_windowX + this->_windowW) - ( (Float)(4) )),this->_windowY,( (Float)(8) ),this->_windowH,null())) {
HXLINE( 401)					::zui::Zui_obj::onBorderHover(handle,1);
            				}
            				else {
HXLINE( 403)					if (this->getInputInRect(this->_windowX,(this->_windowY - ( (Float)(4) )),this->_windowW,( (Float)(8) ),null())) {
HXLINE( 404)						::zui::Zui_obj::onBorderHover(handle,2);
            					}
            					else {
HXLINE( 406)						if (this->getInputInRect(this->_windowX,((this->_windowY + this->_windowH) - ( (Float)(4) )),this->_windowW,( (Float)(8) ),null())) {
HXLINE( 407)							::zui::Zui_obj::onBorderHover(handle,3);
            						}
            					}
            				}
            			}
            		}
HXLINE( 411)		if ((handle->redraws <= 0)) {
HXLINE( 412)			return false;
            		}
HXLINE( 415)		this->_x = ( (Float)(0) );
HXLINE( 416)		this->_y = handle->scrollOffset;
HXLINE( 417)		if ((handle->layout == 1)) {
HXLINE( 417)			w = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
HXLINE( 418)		int _hx_tmp2;
HXDLIN( 418)		if (!(handle->scrollEnabled)) {
HXLINE( 418)			_hx_tmp2 = w;
            		}
            		else {
HXLINE( 418)			_hx_tmp2 = (w - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
HXDLIN( 418)		this->_w = _hx_tmp2;
HXLINE( 419)		this->_h = h;
HXLINE( 420)		this->_hx_set_tooltipText(HX_CTX, HX_("",00,00,00,00));
HXLINE( 421)		this->_hx_set_tooltipImg(HX_CTX, null());
HXLINE( 422)		this->_hx_set_tabNames(HX_CTX, null());
HXLINE( 424)		if (( (bool)(this->t->__Field(HX_("FILL_WINDOW_BG",f8,19,75,d3),::hx::paccDynamic)) )) {
HXLINE( 425)			this->g->begin(true,this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),::hx::paccDynamic));
            		}
            		else {
HXLINE( 428)			this->g->begin(true,0);
HXLINE( 429)			this->g->set_color(( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),::hx::paccDynamic)) ));
HXLINE( 430)			this->g->fillRect(this->_x,(this->_y - handle->scrollOffset),handle->lastMaxX,handle->lastMaxY);
            		}
HXLINE( 433)		handle->dragEnabled = drag;
HXLINE( 434)		if (drag) {
HXLINE( 435)			bool _hx_tmp3;
HXDLIN( 435)			if (this->inputStarted) {
HXLINE( 435)				Float _hx_tmp4 = this->_windowX;
HXDLIN( 435)				Float _hx_tmp5 = this->_windowY;
HXDLIN( 435)				Float _hx_tmp6 = this->_windowW;
HXDLIN( 435)				_hx_tmp3 = this->getInputInRect(_hx_tmp4,_hx_tmp5,_hx_tmp6,( (Float)(::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ),null());
            			}
            			else {
HXLINE( 435)				_hx_tmp3 = false;
            			}
HXDLIN( 435)			if (_hx_tmp3) {
HXLINE( 436)				this->_hx_set_dragHandle(HX_CTX, handle);
            			}
            			else {
HXLINE( 438)				if (this->inputReleased) {
HXLINE( 439)					this->_hx_set_dragHandle(HX_CTX, null());
            				}
            			}
HXLINE( 441)			if (::hx::IsInstanceEq( handle,this->dragHandle )) {
HXLINE( 442)				handle->redraws = 2;
HXLINE( 443)				 ::zui::Handle handle1 = handle;
HXDLIN( 443)				int handle2 = handle1->dragX;
HXDLIN( 443)				handle1->dragX = (handle2 + ::Std_obj::_hx_int(this->inputDX));
HXLINE( 444)				 ::zui::Handle handle3 = handle;
HXDLIN( 444)				int handle4 = handle3->dragY;
HXDLIN( 444)				handle3->dragY = (handle4 + ::Std_obj::_hx_int(this->inputDY));
            			}
HXLINE( 446)			 ::zui::Zui _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 446)			Float _hx_tmp8 = _hx_tmp7->_y;
HXDLIN( 446)			_hx_tmp7->_y = (_hx_tmp8 + ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE( 447)			 ::zui::Zui _hx_tmp9 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 447)			Float _hx_tmp10 = _hx_tmp9->windowHeaderH;
HXDLIN( 447)			_hx_tmp9->windowHeaderH = (_hx_tmp10 + ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
HXLINE( 450)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Zui_obj,window,return )

void Zui_obj::endWindow(::hx::Null< bool >  __o_bindGlobalG){
            		bool bindGlobalG = __o_bindGlobalG.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_453_endWindow)
HXLINE( 454)		 ::zui::Handle handle = this->currentWindow;
HXLINE( 455)		if (::hx::IsNull( handle )) {
HXLINE( 455)			return;
            		}
HXLINE( 456)		bool _hx_tmp;
HXDLIN( 456)		if ((handle->redraws <= 0)) {
HXLINE( 456)			_hx_tmp = this->isScrolling;
            		}
            		else {
HXLINE( 456)			_hx_tmp = true;
            		}
HXDLIN( 456)		if (_hx_tmp) {
HXLINE( 457)			if (this->scissor) {
HXLINE( 458)				this->scissor = false;
HXLINE( 459)				this->g->disableScissor();
            			}
HXLINE( 462)			if (::hx::IsNotNull( this->tabNames )) {
HXLINE( 462)				this->drawTabs();
            			}
HXLINE( 464)			if (handle->dragEnabled) {
HXLINE( 465)				this->g->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE( 466)				 ::kha::graphics2::Graphics _hx_tmp1 = this->g;
HXDLIN( 466)				Float _hx_tmp2 = this->_windowW;
HXDLIN( 466)				_hx_tmp1->fillRect(( (Float)(0) ),( (Float)(0) ),_hx_tmp2,( (Float)(::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ));
            			}
HXLINE( 469)			Float wh = (this->_windowH - this->windowHeaderH);
HXLINE( 470)			Float fullHeight = ((this->_y - handle->scrollOffset) - this->windowHeaderH);
HXLINE( 471)			bool _hx_tmp3;
HXDLIN( 471)			bool _hx_tmp4;
HXDLIN( 471)			if (!((fullHeight < wh))) {
HXLINE( 471)				_hx_tmp4 = (handle->layout == 1);
            			}
            			else {
HXLINE( 471)				_hx_tmp4 = true;
            			}
HXDLIN( 471)			if (!(_hx_tmp4)) {
HXLINE( 471)				_hx_tmp3 = !(this->scrollEnabled);
            			}
            			else {
HXLINE( 471)				_hx_tmp3 = true;
            			}
HXDLIN( 471)			if (_hx_tmp3) {
HXLINE( 472)				handle->scrollEnabled = false;
HXLINE( 473)				handle->scrollOffset = ( (Float)(0) );
            			}
            			else {
HXLINE( 476)				handle->scrollEnabled = true;
HXLINE( 477)				if ((this->tabScroll < 0)) {
HXLINE( 478)					handle->scrollOffset = this->tabScroll;
HXLINE( 479)					this->tabScroll = ( (Float)(0) );
            				}
HXLINE( 481)				Float wy = (this->_windowY + this->windowHeaderH);
HXLINE( 482)				Float amountToScroll = (fullHeight - wh);
HXLINE( 483)				Float amountScrolled = -(handle->scrollOffset);
HXLINE( 484)				Float ratio = (amountScrolled / amountToScroll);
HXLINE( 485)				Float barH = (wh * ::Math_obj::abs((wh / fullHeight)));
HXLINE( 486)				barH = ::Math_obj::max(barH,(( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 488)				Float totalScrollableArea = (wh - barH);
HXLINE( 489)				Float e = (amountToScroll / totalScrollableArea);
HXLINE( 490)				Float barY = ((totalScrollableArea * ratio) + this->windowHeaderH);
HXLINE( 491)				Float barFocus = (this->_windowX + this->_windowW);
HXDLIN( 491)				Float barFocus1 = (barFocus - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ));
HXDLIN( 491)				Float barFocus2 = (barY + this->_windowY);
HXDLIN( 491)				bool barFocus3 = this->getInputInRect(barFocus1,barFocus2,( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ),barH,null());
HXLINE( 493)				bool _hx_tmp5;
HXDLIN( 493)				if (this->inputStarted) {
HXLINE( 493)					_hx_tmp5 = barFocus3;
            				}
            				else {
HXLINE( 493)					_hx_tmp5 = false;
            				}
HXDLIN( 493)				if (_hx_tmp5) {
HXLINE( 494)					this->_hx_set_scrollHandle(HX_CTX, handle);
HXLINE( 495)					this->isScrolling = true;
            				}
HXLINE( 498)				Float scrollDelta = ( (Float)(this->inputWheelDelta) );
HXLINE( 499)				bool _hx_tmp6;
HXDLIN( 499)				bool _hx_tmp7;
HXDLIN( 499)				bool _hx_tmp8;
HXDLIN( 499)				bool _hx_tmp9;
HXDLIN( 499)				if (::zui::Zui_obj::touchScroll) {
HXLINE( 499)					_hx_tmp9 = this->inputDown;
            				}
            				else {
HXLINE( 499)					_hx_tmp9 = false;
            				}
HXDLIN( 499)				if (_hx_tmp9) {
HXLINE( 499)					_hx_tmp8 = (this->inputDY != 0);
            				}
            				else {
HXLINE( 499)					_hx_tmp8 = false;
            				}
HXDLIN( 499)				if (_hx_tmp8) {
HXLINE( 499)					_hx_tmp7 = (this->inputX > (this->_windowX + this->windowHeaderW));
            				}
            				else {
HXLINE( 499)					_hx_tmp7 = false;
            				}
HXDLIN( 499)				if (_hx_tmp7) {
HXLINE( 499)					_hx_tmp6 = (this->inputY > (this->_windowY + this->windowHeaderH));
            				}
            				else {
HXLINE( 499)					_hx_tmp6 = false;
            				}
HXDLIN( 499)				if (_hx_tmp6) {
HXLINE( 500)					this->isScrolling = true;
HXLINE( 501)					scrollDelta = (-(this->inputDY) / ( (Float)(20) ));
            				}
HXLINE( 503)				if (::hx::IsInstanceEq( handle,this->scrollHandle )) {
HXLINE( 504)					this->scroll((this->inputDY * e),fullHeight);
            				}
            				else {
HXLINE( 506)					bool _hx_tmp10;
HXDLIN( 506)					bool _hx_tmp11;
HXDLIN( 506)					if ((scrollDelta != 0)) {
HXLINE( 506)						_hx_tmp11 = ::hx::IsNull( this->comboSelectedHandle );
            					}
            					else {
HXLINE( 506)						_hx_tmp11 = false;
            					}
HXDLIN( 506)					if (_hx_tmp11) {
HXLINE( 506)						_hx_tmp10 = this->getInputInRect(this->_windowX,wy,this->_windowW,wh,null());
            					}
            					else {
HXLINE( 506)						_hx_tmp10 = false;
            					}
HXDLIN( 506)					if (_hx_tmp10) {
HXLINE( 508)						this->scroll((scrollDelta * (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),fullHeight);
            					}
            				}
HXLINE( 512)				if ((handle->scrollOffset > 0)) {
HXLINE( 513)					handle->scrollOffset = ( (Float)(0) );
            				}
            				else {
HXLINE( 515)					if (((fullHeight + handle->scrollOffset) < wh)) {
HXLINE( 516)						handle->scrollOffset = (wh - fullHeight);
            					}
            				}
HXLINE( 519)				this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE( 520)				Float scrollbarFocus = (this->_windowX + this->_windowW);
HXDLIN( 520)				Float scrollbarFocus1 = (scrollbarFocus - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ));
HXDLIN( 520)				bool scrollbarFocus2 = this->getInputInRect(scrollbarFocus1,wy,( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ),wh,null());
HXLINE( 521)				Float barW;
HXDLIN( 521)				bool barW1;
HXDLIN( 521)				if (!(scrollbarFocus2)) {
HXLINE( 521)					barW1 = ::hx::IsInstanceEq( handle,this->scrollHandle );
            				}
            				else {
HXLINE( 521)					barW1 = true;
            				}
HXDLIN( 521)				if (barW1) {
HXLINE( 521)					barW = ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) );
            				}
            				else {
HXLINE( 521)					barW = (( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ) / ( (Float)(3) ));
            				}
HXLINE( 522)				this->g->fillRect(((this->_windowW - barW) - this->scrollAlign),barY,barW,barH);
            			}
HXLINE( 525)			handle->lastMaxX = this->_x;
HXLINE( 526)			handle->lastMaxY = this->_y;
HXLINE( 527)			if ((handle->layout == 0)) {
HXLINE( 527)				 ::zui::Handle handle1 = handle;
HXDLIN( 527)				handle1->lastMaxX = (handle1->lastMaxX + this->_windowW);
            			}
            			else {
HXLINE( 528)				 ::zui::Handle handle2 = handle;
HXDLIN( 528)				handle2->lastMaxY = (handle2->lastMaxY + this->_windowH);
            			}
HXLINE( 529)			handle->redraws--;
HXLINE( 531)			this->g->end();
            		}
HXLINE( 534)		this->windowEnded = true;
HXLINE( 537)		bool _hx_tmp12;
HXDLIN( 537)		if (!(::zui::Zui_obj::alwaysRedrawWindow)) {
HXLINE( 537)			_hx_tmp12 = (handle->redraws > -4);
            		}
            		else {
HXLINE( 537)			_hx_tmp12 = true;
            		}
HXDLIN( 537)		if (_hx_tmp12) {
HXLINE( 538)			if (bindGlobalG) {
HXLINE( 538)				this->globalG->begin(false,null());
            			}
HXLINE( 539)			this->globalG->set_color(( (int)(this->t->__Field(HX_("WINDOW_TINT_COL",0b,c9,a0,ae),::hx::paccDynamic)) ));
HXLINE( 540)			this->globalG->drawImage(handle->texture,( (float)(this->_windowX) ),( (float)(this->_windowY) ));
HXLINE( 541)			if (bindGlobalG) {
HXLINE( 541)				this->globalG->end();
            			}
HXLINE( 542)			if ((handle->redraws <= 0)) {
HXLINE( 542)				handle->redraws--;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,endWindow,(void))

void Zui_obj::scroll(Float delta,Float fullHeight){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_546_scroll)
HXLINE( 547)		 ::zui::Handle fh = this->currentWindow;
HXDLIN( 547)		fh->scrollOffset = (fh->scrollOffset - delta);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,scroll,(void))

bool Zui_obj::tab( ::zui::Handle handle,::String text,::hx::Null< bool >  __o_vertical,::hx::Null< int >  __o_color){
            		bool vertical = __o_vertical.Default(false);
            		int color = __o_color.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_550_tab)
HXLINE( 551)		if (::hx::IsNull( this->tabNames )) {
HXLINE( 552)			this->_hx_set_tabNames(HX_CTX, ::Array_obj< ::String >::__new(0));
HXLINE( 553)			this->_hx_set_tabColors(HX_CTX, ::Array_obj< int >::__new(0));
HXLINE( 554)			this->_hx_set_tabHandle(HX_CTX, handle);
HXLINE( 555)			this->tabVertical = vertical;
HXLINE( 556)			 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 556)			int _hx_tmp1 = _hx_tmp->_w;
HXDLIN( 556)			int _hx_tmp2;
HXDLIN( 556)			if (this->tabVertical) {
HXLINE( 556)				_hx_tmp2 = ::Std_obj::_hx_int((((( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) + (( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) - ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            			}
            			else {
HXLINE( 556)				_hx_tmp2 = 0;
            			}
HXDLIN( 556)			_hx_tmp->_w = (_hx_tmp1 - _hx_tmp2);
HXLINE( 557)			if (vertical) {
HXLINE( 558)				 ::zui::Zui _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 558)				_hx_tmp3->windowHeaderW = (_hx_tmp3->windowHeaderW + (( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            			}
            			else {
HXLINE( 559)				 ::zui::Zui _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 559)				_hx_tmp4->windowHeaderH = (_hx_tmp4->windowHeaderH + (((( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) + this->buttonOffsetY) + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            			}
HXLINE( 560)			this->restoreX = this->inputX;
HXLINE( 561)			this->restoreY = this->inputY;
HXLINE( 562)			bool _hx_tmp5;
HXDLIN( 562)			if (!(vertical)) {
HXLINE( 562)				_hx_tmp5 = this->getInputInRect(this->_windowX,this->_windowY,this->_windowW,this->windowHeaderH,null());
            			}
            			else {
HXLINE( 562)				_hx_tmp5 = false;
            			}
HXDLIN( 562)			if (_hx_tmp5) {
HXLINE( 563)				this->inputX = (this->inputY = ( (Float)(-1) ));
            			}
HXLINE( 565)			if (vertical) {
HXLINE( 565)				 ::zui::Zui _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 565)				_hx_tmp6->_x = (_hx_tmp6->_x + (this->windowHeaderW + 6));
HXDLIN( 565)				 ::zui::Zui _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 565)				_hx_tmp7->_w = (_hx_tmp7->_w - 6);
            			}
            			else {
HXLINE( 565)				 ::zui::Zui _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 565)				_hx_tmp8->_y = (_hx_tmp8->_y + (this->windowHeaderH + 3));
            			}
            		}
HXLINE( 567)		this->tabNames->push(text);
HXLINE( 568)		this->tabColors->push(color);
HXLINE( 569)		return (handle->position == (this->tabNames->length - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,tab,return )

void Zui_obj::drawTabs(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_572_drawTabs)
HXLINE( 573)		this->inputX = this->restoreX;
HXLINE( 574)		this->inputY = this->restoreY;
HXLINE( 575)		if (::hx::IsNull( this->currentWindow )) {
HXLINE( 575)			return;
            		}
HXLINE( 576)		Float tabX = ((Float)0.0);
HXLINE( 577)		Float tabY = ((Float)0.0);
HXLINE( 578)		int tabHMin = ::Std_obj::_hx_int(((( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ((Float)1.1)));
HXLINE( 579)		int headerH;
HXDLIN( 579)		if (this->currentWindow->dragEnabled) {
HXLINE( 579)			headerH = ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
            		else {
HXLINE( 579)			headerH = 0;
            		}
HXLINE( 580)		int tabH;
HXDLIN( 580)		bool tabH1;
HXDLIN( 580)		if (( (bool)(this->t->__Field(HX_("FULL_TABS",6e,dc,09,52),::hx::paccDynamic)) )) {
HXLINE( 580)			tabH1 = this->tabVertical;
            		}
            		else {
HXLINE( 580)			tabH1 = false;
            		}
HXDLIN( 580)		if (tabH1) {
HXLINE( 580)			tabH = ::Std_obj::_hx_int(((this->_windowH - ( (Float)(headerH) )) / ( (Float)(this->tabNames->length) )));
            		}
            		else {
HXLINE( 580)			tabH = tabHMin;
            		}
HXLINE( 581)		Float origy = this->_y;
HXLINE( 582)		this->_y = ( (Float)(headerH) );
HXLINE( 583)		this->tabHandle->changed = false;
HXLINE( 585)		bool _hx_tmp;
HXDLIN( 585)		if (this->isCtrlDown) {
HXLINE( 585)			_hx_tmp = this->isTabDown;
            		}
            		else {
HXLINE( 585)			_hx_tmp = false;
            		}
HXDLIN( 585)		if (_hx_tmp) {
HXLINE( 586)			this->tabHandle->position++;
HXLINE( 587)			if ((this->tabHandle->position >= this->tabNames->length)) {
HXLINE( 587)				this->tabHandle->position = 0;
            			}
HXLINE( 588)			this->tabHandle->changed = true;
HXLINE( 589)			this->isTabDown = false;
            		}
HXLINE( 592)		if ((this->tabHandle->position >= this->tabNames->length)) {
HXLINE( 592)			this->tabHandle->position = (this->tabNames->length - 1);
            		}
HXLINE( 594)		this->g->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE( 595)		if (this->tabVertical) {
HXLINE( 596)			this->g->fillRect(( (Float)(0) ),this->_y,(( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),this->_windowH);
            		}
            		else {
HXLINE( 597)			this->g->fillRect(( (Float)(0) ),this->_y,this->_windowW,((this->buttonOffsetY + tabH) + 2));
            		}
HXLINE( 599)		this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE( 600)		if (this->tabVertical) {
HXLINE( 601)			this->g->fillRect((( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),this->_y,( (Float)(1) ),this->_windowH);
            		}
            		else {
HXLINE( 602)			this->g->fillRect(this->buttonOffsetY,(((this->_y + this->buttonOffsetY) + tabH) + 2),(this->_windowW - (this->buttonOffsetY * ( (Float)(2) ))),( (Float)(1) ));
            		}
HXLINE( 604)		Float basey;
HXDLIN( 604)		if (this->tabVertical) {
HXLINE( 604)			basey = this->_y;
            		}
            		else {
HXLINE( 604)			basey = (this->_y + 2);
            		}
HXLINE( 606)		{
HXLINE( 606)			int _g = 0;
HXDLIN( 606)			int _g1 = this->tabNames->length;
HXDLIN( 606)			while((_g < _g1)){
HXLINE( 606)				_g = (_g + 1);
HXDLIN( 606)				int i = (_g - 1);
HXLINE( 607)				this->_x = tabX;
HXLINE( 608)				this->_y = (basey + tabY);
HXLINE( 609)				int _hx_tmp1;
HXDLIN( 609)				if (this->tabVertical) {
HXLINE( 609)					_hx_tmp1 = ::Std_obj::_hx_int(((( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) - ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            				}
            				else {
HXLINE( 610)					if (( (bool)(this->t->__Field(HX_("FULL_TABS",6e,dc,09,52),::hx::paccDynamic)) )) {
HXLINE( 609)						_hx_tmp1 = ::Std_obj::_hx_int((this->_windowW / ( (Float)(this->tabNames->length) )));
            					}
            					else {
HXLINE( 611)						Float _hx_tmp2 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,this->tabNames->__get(i));
HXLINE( 609)						_hx_tmp1 = ::Std_obj::_hx_int(((_hx_tmp2 + (this->buttonOffsetY * ( (Float)(2) ))) + (( (Float)(18) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            					}
            				}
HXDLIN( 609)				this->_w = _hx_tmp1;
HXLINE( 612)				bool released = this->getReleased(tabH);
HXLINE( 613)				bool pushed = this->getPushed(tabH);
HXLINE( 614)				bool hover = this->getHover(tabH);
HXLINE( 615)				if (released) {
HXLINE( 616)					 ::zui::Handle h = this->tabHandle->nest(this->tabHandle->position,null());
HXLINE( 617)					h->scrollOffset = this->currentWindow->scrollOffset;
HXLINE( 618)					h = this->tabHandle->nest(i,null());
HXLINE( 619)					this->tabScroll = h->scrollOffset;
HXLINE( 620)					this->tabHandle->position = i;
HXLINE( 621)					this->currentWindow->redraws = 3;
HXLINE( 622)					this->tabHandle->changed = true;
            				}
HXLINE( 624)				bool selected = (this->tabHandle->position == i);
HXLINE( 626)				int _hx_tmp3;
HXDLIN( 626)				bool _hx_tmp4;
HXDLIN( 626)				if (!(pushed)) {
HXLINE( 626)					_hx_tmp4 = hover;
            				}
            				else {
HXLINE( 626)					_hx_tmp4 = true;
            				}
HXDLIN( 626)				if (_hx_tmp4) {
HXLINE( 626)					_hx_tmp3 = ( (int)(this->t->__Field(HX_("BUTTON_HOVER_COL",f0,a8,9f,7e),::hx::paccDynamic)) );
            				}
            				else {
HXLINE( 627)					if ((this->tabColors->__get(i) != -1)) {
HXLINE( 626)						_hx_tmp3 = this->tabColors->__get(i);
            					}
            					else {
HXLINE( 628)						if (selected) {
HXLINE( 626)							_hx_tmp3 = ( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),::hx::paccDynamic)) );
            						}
            						else {
HXLINE( 626)							_hx_tmp3 = ( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) );
            						}
            					}
            				}
HXDLIN( 626)				this->g->set_color(_hx_tmp3);
HXLINE( 630)				if (this->tabVertical) {
HXLINE( 631)					tabY = (tabY + (tabH + 1));
            				}
            				else {
HXLINE( 632)					tabX = (tabX + (this->_w + 1));
            				}
HXLINE( 633)				{
HXLINE( 633)					 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 633)					Float x = (this->_x + this->buttonOffsetY);
HXDLIN( 633)					Float y = (this->_y + this->buttonOffsetY);
HXDLIN( 633)					Float w = ( (Float)(this->_w) );
HXDLIN( 633)					Float strength = ((Float)0.0);
HXDLIN( 633)					if ((strength == ((Float)0.0))) {
HXLINE( 633)						strength = ( (Float)(1) );
            					}
HXDLIN( 633)					if (!(this->enabled)) {
HXLINE( 633)						this->fadeColor();
            					}
HXDLIN( 633)					g->fillRect(x,(y - ( (Float)(1) )),w,(tabH + 1));
            				}
HXLINE( 634)				int _hx_tmp5;
HXDLIN( 634)				if (selected) {
HXLINE( 634)					_hx_tmp5 = ( (int)(this->t->__Field(HX_("BUTTON_TEXT_COL",7b,eb,33,eb),::hx::paccDynamic)) );
            				}
            				else {
HXLINE( 634)					_hx_tmp5 = ( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) );
            				}
HXDLIN( 634)				this->g->set_color(_hx_tmp5);
HXLINE( 635)				int _hx_tmp6;
HXDLIN( 635)				if (( (bool)(this->t->__Field(HX_("FULL_TABS",6e,dc,09,52),::hx::paccDynamic)) )) {
HXLINE( 635)					_hx_tmp6 = 1;
            				}
            				else {
HXLINE( 635)					_hx_tmp6 = 0;
            				}
HXDLIN( 635)				this->drawString(this->g,this->tabNames->__get(i),null(),(( (Float)((tabH - tabHMin)) ) / ( (Float)(2) )),_hx_tmp6,null());
HXLINE( 637)				if (selected) {
HXLINE( 638)					if (this->tabVertical) {
HXLINE( 641)						this->g->set_color(( (int)(this->t->__Field(HX_("HIGHLIGHT_COL",35,c1,35,0e),::hx::paccDynamic)) ));
HXLINE( 642)						this->g->fillRect((this->_x + this->buttonOffsetY),((this->_y + this->buttonOffsetY) - ( (Float)(1) )),( (Float)(2) ),(tabH + this->buttonOffsetY));
            					}
            					else {
HXLINE( 645)						this->g->set_color(( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),::hx::paccDynamic)) ));
HXLINE( 646)						this->g->fillRect(((this->_x + this->buttonOffsetY) + 1),((this->_y + this->buttonOffsetY) + tabH),( (Float)((this->_w - 1)) ),( (Float)(1) ));
HXLINE( 647)						this->g->set_color(( (int)(this->t->__Field(HX_("HIGHLIGHT_COL",35,c1,35,0e),::hx::paccDynamic)) ));
HXLINE( 648)						this->g->fillRect((this->_x + this->buttonOffsetY),(this->_y + this->buttonOffsetY),( (Float)(this->_w) ),( (Float)(2) ));
            					}
            				}
            			}
            		}
HXLINE( 653)		this->_x = ( (Float)(0) );
HXLINE( 654)		this->_y = origy;
HXLINE( 655)		Float _hx_tmp7;
HXDLIN( 655)		if (!(this->currentWindow->scrollEnabled)) {
HXLINE( 655)			_hx_tmp7 = this->_windowW;
            		}
            		else {
HXLINE( 655)			Float _hx_tmp8 = this->_windowW;
HXDLIN( 655)			_hx_tmp7 = (_hx_tmp8 - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ));
            		}
HXDLIN( 655)		this->_w = ::Std_obj::_hx_int(_hx_tmp7);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawTabs,(void))

bool Zui_obj::panel( ::zui::Handle handle,::String text,::hx::Null< bool >  __o_isTree,::hx::Null< bool >  __o_filled,::hx::Null< bool >  __o_pack){
            		bool isTree = __o_isTree.Default(false);
            		bool filled = __o_filled.Default(true);
            		bool pack = __o_pack.Default(true);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_658_panel)
HXLINE( 659)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE( 660)			this->endElement(null());
HXLINE( 661)			return handle->selected;
            		}
HXLINE( 663)		if (this->getReleased(null())) {
HXLINE( 664)			handle->selected = !(handle->selected);
HXLINE( 665)			handle->changed = (this->changed = true);
            		}
HXLINE( 667)		if (filled) {
HXLINE( 668)			this->g->set_color(( (int)(this->t->__Field(HX_("PANEL_BG_COL",a1,a4,7d,a3),::hx::paccDynamic)) ));
HXLINE( 669)			{
HXLINE( 669)				 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 669)				Float x = this->_x;
HXDLIN( 669)				Float y = this->_y;
HXDLIN( 669)				Float w = ( (Float)(this->_w) );
HXDLIN( 669)				Float h = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN( 669)				Float strength = ((Float)0.0);
HXDLIN( 669)				if ((strength == ((Float)0.0))) {
HXLINE( 669)					strength = ( (Float)(1) );
            				}
HXDLIN( 669)				if (!(this->enabled)) {
HXLINE( 669)					this->fadeColor();
            				}
HXDLIN( 669)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            		}
HXLINE( 672)		if (isTree) {
HXLINE( 672)			this->drawTree(handle->selected);
            		}
            		else {
HXLINE( 672)			this->drawArrow(handle->selected);
            		}
HXLINE( 674)		this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE( 675)		this->drawString(this->g,text,this->titleOffsetX,0,null(),null());
HXLINE( 677)		this->endElement(null());
HXLINE( 678)		bool _hx_tmp;
HXDLIN( 678)		if (pack) {
HXLINE( 678)			_hx_tmp = !(handle->selected);
            		}
            		else {
HXLINE( 678)			_hx_tmp = false;
            		}
HXDLIN( 678)		if (_hx_tmp) {
HXLINE( 678)			 ::zui::Zui _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 678)			_hx_tmp1->_y = (_hx_tmp1->_y - (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
HXLINE( 680)		return handle->selected;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,panel,return )

int Zui_obj::image( ::kha::Image image,::hx::Null< int >  __o_tint, ::Dynamic h,::hx::Null< int >  __o_sx,::hx::Null< int >  __o_sy,::hx::Null< int >  __o_sw,::hx::Null< int >  __o_sh){
            		int tint = __o_tint.Default(-1);
            		int sx = __o_sx.Default(0);
            		int sy = __o_sy.Default(0);
            		int sw = __o_sw.Default(0);
            		int sh = __o_sh.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_683_image)
HXLINE( 684)		int iw;
HXDLIN( 684)		if ((sw > 0)) {
HXLINE( 684)			iw = sw;
            		}
            		else {
HXLINE( 684)			iw = image->get_width();
            		}
HXDLIN( 684)		Float iw1 = (( (Float)(iw) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE( 685)		int ih;
HXDLIN( 685)		if ((sh > 0)) {
HXLINE( 685)			ih = sh;
            		}
            		else {
HXLINE( 685)			ih = image->get_height();
            		}
HXDLIN( 685)		Float ih1 = (( (Float)(ih) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE( 686)		Float w = ::Math_obj::min(iw1,( (Float)(this->_w) ));
HXLINE( 687)		Float x = this->_x;
HXLINE( 688)		bool scroll;
HXDLIN( 688)		if (::hx::IsNotNull( this->currentWindow )) {
HXLINE( 688)			scroll = this->currentWindow->scrollEnabled;
            		}
            		else {
HXLINE( 688)			scroll = false;
            		}
HXLINE( 689)		Float r;
HXDLIN( 689)		if ((this->curRatio == -1)) {
HXLINE( 689)			r = ((Float)1.0);
            		}
            		else {
HXLINE( 689)			Float ratio = this->ratios->__get(this->curRatio);
HXDLIN( 689)			if ((ratio < 0)) {
HXLINE( 689)				r = -(ratio);
            			}
            			else {
HXLINE( 689)				r = ratio;
            			}
            		}
HXLINE( 690)		if (this->imageScrollAlign) {
HXLINE( 691)			w = ::Math_obj::min(iw1,(( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) ))));
HXLINE( 692)			x = (x + this->buttonOffsetY);
HXLINE( 693)			if (!(scroll)) {
HXLINE( 694)				w = (w - (( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ) * r));
HXLINE( 695)				x = (x + ((( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ) * r) / ( (Float)(2) )));
            			}
            		}
            		else {
HXLINE( 698)			if (scroll) {
HXLINE( 698)				w = (w + (( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ) * r));
            			}
            		}
HXLINE( 701)		Float ratio1;
HXDLIN( 701)		if (::hx::IsNull( h )) {
HXLINE( 701)			ratio1 = (w / iw1);
            		}
            		else {
HXLINE( 701)			ratio1 = (( (Float)(h) ) / ih1);
            		}
HXLINE( 704)		if (::hx::IsNull( h )) {
HXLINE( 705)			h = (ih1 * ratio1);
            		}
            		else {
HXLINE( 706)			w = (iw1 * ratio1);
            		}
HXLINE( 708)		if (!(this->isVisible(( (Float)(h) )))) {
HXLINE( 709)			this->endElement(h);
HXLINE( 710)			return 0;
            		}
HXLINE( 712)		bool started = this->getStarted(h);
HXLINE( 713)		bool down = this->getPushed(h);
HXLINE( 714)		bool released = this->getReleased(h);
HXLINE( 715)		bool hover = this->getHover(h);
HXLINE( 716)		bool _hx_tmp;
HXDLIN( 716)		if ((this->curRatio == -1)) {
HXLINE( 716)			bool _hx_tmp1;
HXDLIN( 716)			bool _hx_tmp2;
HXDLIN( 716)			if (!(started)) {
HXLINE( 716)				_hx_tmp2 = down;
            			}
            			else {
HXLINE( 716)				_hx_tmp2 = true;
            			}
HXDLIN( 716)			if (!(_hx_tmp2)) {
HXLINE( 716)				_hx_tmp1 = released;
            			}
            			else {
HXLINE( 716)				_hx_tmp1 = true;
            			}
HXDLIN( 716)			if (!(_hx_tmp1)) {
HXLINE( 716)				_hx_tmp = hover;
            			}
            			else {
HXLINE( 716)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 716)			_hx_tmp = false;
            		}
HXDLIN( 716)		if (_hx_tmp) {
HXLINE( 717)			bool _hx_tmp3;
HXDLIN( 717)			if (!((this->inputX < (this->_windowX + this->_x)))) {
HXLINE( 717)				_hx_tmp3 = (this->inputX > ((this->_windowX + this->_x) + w));
            			}
            			else {
HXLINE( 717)				_hx_tmp3 = true;
            			}
HXDLIN( 717)			if (_hx_tmp3) {
HXLINE( 718)				hover = false;
HXDLIN( 718)				released = hover;
HXDLIN( 718)				down = released;
HXDLIN( 718)				started = down;
            			}
            		}
HXLINE( 721)		this->g->set_color(tint);
HXLINE( 722)		if (!(this->enabled)) {
HXLINE( 722)			this->fadeColor();
            		}
HXLINE( 723)		Float h_float = ( (Float)(h) );
HXLINE( 724)		if ((sw > 0)) {
HXLINE( 725)			if (this->imageInvertY) {
HXLINE( 726)				this->g->drawScaledSubImage(image,( (float)(sx) ),( (float)(sy) ),( (float)(sw) ),( (float)(sh) ),( (float)(x) ),( (float)((this->_y + h_float)) ),( (float)(w) ),( (float)(-(h_float)) ));
            			}
            			else {
HXLINE( 727)				this->g->drawScaledSubImage(image,( (float)(sx) ),( (float)(sy) ),( (float)(sw) ),( (float)(sh) ),( (float)(x) ),( (float)(this->_y) ),( (float)(w) ),( (float)(h_float) ));
            			}
            		}
            		else {
HXLINE( 730)			if (this->imageInvertY) {
HXLINE( 731)				this->g->drawScaledImage(image,( (float)(x) ),( (float)((this->_y + h_float)) ),( (float)(w) ),( (float)(-(h_float)) ));
            			}
            			else {
HXLINE( 732)				this->g->drawScaledImage(image,( (float)(x) ),( (float)(this->_y) ),( (float)(w) ),( (float)(h_float) ));
            			}
            		}
HXLINE( 735)		this->endElement(h);
HXLINE( 736)		if (started) {
HXLINE( 736)			return 1;
            		}
            		else {
HXLINE( 736)			if (released) {
HXLINE( 736)				return 3;
            			}
            			else {
HXLINE( 736)				if (down) {
HXLINE( 736)					return 2;
            				}
            				else {
HXLINE( 736)					if (hover) {
HXLINE( 736)						return 4;
            					}
            					else {
HXLINE( 736)						return 0;
            					}
            				}
            			}
            		}
HXDLIN( 736)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC7(Zui_obj,image,return )

int Zui_obj::text(::String text,::hx::Null< int >  __o_align,::hx::Null< int >  __o_bg){
            		int align = __o_align.Default(0);
            		int bg = __o_bg.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_739_text)
HXLINE( 740)		if ((text.indexOf(HX_("\n",0a,00,00,00),null()) >= 0)) {
HXLINE( 741)			{
HXLINE( 741)				int _g = 0;
HXDLIN( 741)				::Array< ::String > _g1 = text.split(HX_("\n",0a,00,00,00));
HXDLIN( 741)				while((_g < _g1->length)){
HXLINE( 741)					::String line = _g1->__get(_g);
HXDLIN( 741)					_g = (_g + 1);
HXDLIN( 741)					this->text(line,align,bg);
            				}
            			}
HXLINE( 742)			return 0;
            		}
HXLINE( 744)		Float h = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN( 744)		Float h1 = ::Math_obj::max(h,( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->height(this->fontSize));
HXLINE( 745)		if (!(this->isVisible(h1))) {
HXLINE( 746)			this->endElement((h1 + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE( 747)			return 0;
            		}
HXLINE( 749)		bool started = this->getStarted(h1);
HXLINE( 750)		bool down = this->getPushed(h1);
HXLINE( 751)		bool released = this->getReleased(h1);
HXLINE( 752)		bool hover = this->getHover(h1);
HXLINE( 753)		if ((bg != 0)) {
HXLINE( 754)			this->g->set_color(bg);
HXLINE( 755)			this->g->fillRect((this->_x + this->buttonOffsetY),(this->_y + this->buttonOffsetY),(( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) ))),(( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
HXLINE( 757)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE( 758)		this->drawString(this->g,text,null(),0,align,null());
HXLINE( 760)		this->endElement((h1 + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE( 761)		if (started) {
HXLINE( 761)			return 1;
            		}
            		else {
HXLINE( 761)			if (released) {
HXLINE( 761)				return 3;
            			}
            			else {
HXLINE( 761)				if (down) {
HXLINE( 761)					return 2;
            				}
            				else {
HXLINE( 761)					return 0;
            				}
            			}
            		}
HXDLIN( 761)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,text,return )

void Zui_obj::splitText(::String lines,::hx::Null< int >  __o_align,::hx::Null< int >  __o_bg){
            		int align = __o_align.Default(0);
            		int bg = __o_bg.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_765_splitText)
HXDLIN( 765)		int _g = 0;
HXDLIN( 765)		::Array< ::String > _g1 = lines.split(HX_("\n",0a,00,00,00));
HXDLIN( 765)		while((_g < _g1->length)){
HXDLIN( 765)			::String line = _g1->__get(_g);
HXDLIN( 765)			_g = (_g + 1);
HXDLIN( 765)			this->text(line,align,bg);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,splitText,(void))

void Zui_obj::startTextEdit( ::zui::Handle handle,::hx::Null< int >  __o_align){
            		int align = __o_align.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_768_startTextEdit)
HXLINE( 769)		this->isTyping = true;
HXLINE( 770)		this->_hx_set_submitTextHandle(HX_CTX, this->textSelectedHandle);
HXLINE( 771)		this->_hx_set_textToSubmit(HX_CTX, this->textSelected);
HXLINE( 772)		this->_hx_set_textSelectedHandle(HX_CTX, handle);
HXLINE( 773)		this->_hx_set_textSelected(HX_CTX, handle->text);
HXLINE( 774)		this->cursorX = handle->text.length;
HXLINE( 775)		if (this->tabPressed) {
HXLINE( 776)			this->tabPressed = false;
HXLINE( 777)			this->isKeyPressed = false;
            		}
            		else {
HXLINE( 779)			if (!(this->highlightOnSelect)) {
HXLINE( 780)				this->setCursorToInput(align);
            			}
            		}
HXLINE( 782)		this->_hx_set_tabPressedHandle(HX_CTX, handle);
HXLINE( 783)		int _hx_tmp;
HXDLIN( 783)		if (this->highlightOnSelect) {
HXLINE( 783)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 783)			_hx_tmp = this->cursorX;
            		}
HXDLIN( 783)		this->highlightAnchor = _hx_tmp;
HXLINE( 784)		if (::hx::IsNotNull( ::kha::input::Keyboard_obj::get(null()) )) {
HXLINE( 784)			::kha::input::Keyboard_obj::get(null())->show();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,startTextEdit,(void))

void Zui_obj::submitTextEdit(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_787_submitTextEdit)
HXLINE( 788)		this->submitTextHandle->changed = (this->submitTextHandle->text != this->textToSubmit);
HXLINE( 789)		this->submitTextHandle->_hx_set_text(HX_CTX, this->textToSubmit);
HXLINE( 790)		this->_hx_set_submitTextHandle(HX_CTX, null());
HXLINE( 791)		this->_hx_set_textToSubmit(HX_CTX, HX_("",00,00,00,00));
HXLINE( 792)		this->_hx_set_textSelected(HX_CTX, HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,submitTextEdit,(void))

void Zui_obj::updateTextEdit(::hx::Null< int >  __o_align,::hx::Null< bool >  __o_editable,::hx::Null< bool >  __o_liveUpdate){
            		int align = __o_align.Default(0);
            		bool editable = __o_editable.Default(true);
            		bool liveUpdate = __o_liveUpdate.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_795_updateTextEdit)
HXLINE( 796)		::String text = this->textSelected;
HXLINE( 797)		if (this->isKeyPressed) {
HXLINE( 798)			if (::hx::IsEq( this->key,37 )) {
HXLINE( 799)				if ((this->cursorX > 0)) {
HXLINE( 799)					this->cursorX--;
            				}
            			}
            			else {
HXLINE( 801)				if (::hx::IsEq( this->key,39 )) {
HXLINE( 802)					if ((this->cursorX < text.length)) {
HXLINE( 802)						this->cursorX++;
            					}
            				}
            				else {
HXLINE( 804)					bool _hx_tmp;
HXDLIN( 804)					if (editable) {
HXLINE( 804)						_hx_tmp = ::hx::IsEq( this->key,8 );
            					}
            					else {
HXLINE( 804)						_hx_tmp = false;
            					}
HXDLIN( 804)					if (_hx_tmp) {
HXLINE( 805)						bool _hx_tmp1;
HXDLIN( 805)						if ((this->cursorX > 0)) {
HXLINE( 805)							_hx_tmp1 = (this->highlightAnchor == this->cursorX);
            						}
            						else {
HXLINE( 805)							_hx_tmp1 = false;
            						}
HXDLIN( 805)						if (_hx_tmp1) {
HXLINE( 806)							::String text1 = text.substr(0,(this->cursorX - 1));
HXDLIN( 806)							text = (text1 + text.substr(this->cursorX,text.length));
HXLINE( 807)							this->cursorX--;
            						}
            						else {
HXLINE( 809)							if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 810)								::String text2 = text.substr(0,this->highlightAnchor);
HXDLIN( 810)								text = (text2 + text.substr(this->cursorX,text.length));
HXLINE( 811)								this->cursorX = this->highlightAnchor;
            							}
            							else {
HXLINE( 814)								::String text3 = text.substr(0,this->cursorX);
HXDLIN( 814)								text = (text3 + text.substr(this->highlightAnchor,text.length));
            							}
            						}
            					}
            					else {
HXLINE( 817)						bool _hx_tmp2;
HXDLIN( 817)						if (editable) {
HXLINE( 817)							_hx_tmp2 = ::hx::IsEq( this->key,46 );
            						}
            						else {
HXLINE( 817)							_hx_tmp2 = false;
            						}
HXDLIN( 817)						if (_hx_tmp2) {
HXLINE( 818)							if ((this->highlightAnchor == this->cursorX)) {
HXLINE( 819)								::String text4 = text.substr(0,this->cursorX);
HXDLIN( 819)								text = (text4 + text.substr((this->cursorX + 1),null()));
            							}
            							else {
HXLINE( 821)								if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 822)									::String text5 = text.substr(0,this->highlightAnchor);
HXDLIN( 822)									text = (text5 + text.substr(this->cursorX,text.length));
HXLINE( 823)									this->cursorX = this->highlightAnchor;
            								}
            								else {
HXLINE( 826)									::String text6 = text.substr(0,this->cursorX);
HXDLIN( 826)									text = (text6 + text.substr(this->highlightAnchor,text.length));
            								}
            							}
            						}
            						else {
HXLINE( 829)							if (::hx::IsEq( this->key,13 )) {
HXLINE( 830)								this->deselectText();
            							}
            							else {
HXLINE( 832)								if (::hx::IsEq( this->key,27 )) {
HXLINE( 833)									this->_hx_set_textSelected(HX_CTX, this->textSelectedHandle->text);
HXLINE( 834)									this->deselectText();
            								}
            								else {
HXLINE( 836)									bool _hx_tmp3;
HXDLIN( 836)									bool _hx_tmp4;
HXDLIN( 836)									if (::hx::IsEq( this->key,9 )) {
HXLINE( 836)										_hx_tmp4 = this->tabSwitchEnabled;
            									}
            									else {
HXLINE( 836)										_hx_tmp4 = false;
            									}
HXDLIN( 836)									if (_hx_tmp4) {
HXLINE( 836)										_hx_tmp3 = !(this->isCtrlDown);
            									}
            									else {
HXLINE( 836)										_hx_tmp3 = false;
            									}
HXDLIN( 836)									if (_hx_tmp3) {
HXLINE( 837)										this->tabPressed = true;
HXLINE( 838)										this->deselectText();
HXLINE( 839)										this->_hx_set_key(HX_CTX, null());
            									}
            									else {
HXLINE( 841)										if (::hx::IsEq( this->key,36 )) {
HXLINE( 842)											this->cursorX = 0;
            										}
            										else {
HXLINE( 844)											if (::hx::IsEq( this->key,35 )) {
HXLINE( 845)												this->cursorX = text.length;
            											}
            											else {
HXLINE( 847)												bool _hx_tmp5;
HXDLIN( 847)												if (this->isCtrlDown) {
HXLINE( 847)													_hx_tmp5 = this->isADown;
            												}
            												else {
HXLINE( 847)													_hx_tmp5 = false;
            												}
HXDLIN( 847)												if (_hx_tmp5) {
HXLINE( 848)													this->cursorX = text.length;
HXLINE( 849)													this->highlightAnchor = 0;
            												}
            												else {
HXLINE( 851)													bool _hx_tmp6;
HXDLIN( 851)													bool _hx_tmp7;
HXDLIN( 851)													bool _hx_tmp8;
HXDLIN( 851)													bool _hx_tmp9;
HXDLIN( 851)													bool _hx_tmp10;
HXDLIN( 851)													bool _hx_tmp11;
HXDLIN( 851)													bool _hx_tmp12;
HXDLIN( 851)													bool _hx_tmp13;
HXDLIN( 851)													bool _hx_tmp14;
HXDLIN( 851)													bool _hx_tmp15;
HXDLIN( 851)													if (editable) {
HXLINE( 851)														_hx_tmp15 = ::hx::IsNotEq( this->key,16 );
            													}
            													else {
HXLINE( 851)														_hx_tmp15 = false;
            													}
HXDLIN( 851)													if (_hx_tmp15) {
HXLINE( 851)														_hx_tmp14 = ::hx::IsNotEq( this->key,20 );
            													}
            													else {
HXLINE( 851)														_hx_tmp14 = false;
            													}
HXDLIN( 851)													if (_hx_tmp14) {
HXLINE( 851)														_hx_tmp13 = ::hx::IsNotEq( this->key,17 );
            													}
            													else {
HXLINE( 851)														_hx_tmp13 = false;
            													}
HXDLIN( 851)													if (_hx_tmp13) {
HXLINE( 851)														_hx_tmp12 = ::hx::IsNotEq( this->key,224 );
            													}
            													else {
HXLINE( 851)														_hx_tmp12 = false;
            													}
HXDLIN( 851)													if (_hx_tmp12) {
HXLINE( 851)														_hx_tmp11 = ::hx::IsNotEq( this->key,18 );
            													}
            													else {
HXLINE( 851)														_hx_tmp11 = false;
            													}
HXDLIN( 851)													if (_hx_tmp11) {
HXLINE( 851)														_hx_tmp10 = ::hx::IsNotEq( this->key,38 );
            													}
            													else {
HXLINE( 851)														_hx_tmp10 = false;
            													}
HXDLIN( 851)													if (_hx_tmp10) {
HXLINE( 851)														_hx_tmp9 = ::hx::IsNotEq( this->key,40 );
            													}
            													else {
HXLINE( 851)														_hx_tmp9 = false;
            													}
HXDLIN( 851)													if (_hx_tmp9) {
HXLINE( 851)														_hx_tmp8 = ::hx::IsNotNull( this->_hx_char );
            													}
            													else {
HXLINE( 851)														_hx_tmp8 = false;
            													}
HXDLIN( 851)													if (_hx_tmp8) {
HXLINE( 851)														_hx_tmp7 = (this->_hx_char != HX_("",00,00,00,00));
            													}
            													else {
HXLINE( 851)														_hx_tmp7 = false;
            													}
HXDLIN( 851)													if (_hx_tmp7) {
HXLINE( 851)														_hx_tmp6 = ::hx::IsGreaterEq( this->_hx_char.charCodeAt(0),32 );
            													}
            													else {
HXLINE( 851)														_hx_tmp6 = false;
            													}
HXDLIN( 851)													if (_hx_tmp6) {
HXLINE( 862)														::String text7 = text.substr(0,this->highlightAnchor);
HXDLIN( 862)														::String text8 = (text7 + this->_hx_char);
HXDLIN( 862)														text = (text8 + text.substr(this->cursorX,null()));
HXLINE( 863)														int _hx_tmp16;
HXDLIN( 863)														if (((this->cursorX + 1) > text.length)) {
HXLINE( 863)															_hx_tmp16 = text.length;
            														}
            														else {
HXLINE( 863)															_hx_tmp16 = (this->cursorX + 1);
            														}
HXDLIN( 863)														this->cursorX = _hx_tmp16;
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 865)			bool selecting;
HXDLIN( 865)			if (this->isShiftDown) {
HXLINE( 865)				bool selecting1;
HXDLIN( 865)				if (::hx::IsNotEq( this->key,37 )) {
HXLINE( 865)					selecting1 = ::hx::IsEq( this->key,39 );
            				}
            				else {
HXLINE( 865)					selecting1 = true;
            				}
HXDLIN( 865)				if (!(selecting1)) {
HXLINE( 865)					selecting = ::hx::IsEq( this->key,16 );
            				}
            				else {
HXLINE( 865)					selecting = true;
            				}
            			}
            			else {
HXLINE( 865)				selecting = false;
            			}
HXLINE( 868)			bool _hx_tmp17;
HXDLIN( 868)			if (!(selecting)) {
HXLINE( 868)				if (this->isCtrlDown) {
HXLINE( 868)					if (this->isCtrlDown) {
HXLINE( 868)						_hx_tmp17 = this->isAltDown;
            					}
            					else {
HXLINE( 868)						_hx_tmp17 = false;
            					}
            				}
            				else {
HXLINE( 868)					_hx_tmp17 = true;
            				}
            			}
            			else {
HXLINE( 868)				_hx_tmp17 = false;
            			}
HXDLIN( 868)			if (_hx_tmp17) {
HXLINE( 868)				this->highlightAnchor = this->cursorX;
            			}
            		}
HXLINE( 871)		bool _hx_tmp18;
HXDLIN( 871)		if (editable) {
HXLINE( 871)			_hx_tmp18 = (::zui::Zui_obj::textToPaste != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 871)			_hx_tmp18 = false;
            		}
HXDLIN( 871)		if (_hx_tmp18) {
HXLINE( 872)			::String text9 = text.substr(0,this->highlightAnchor);
HXDLIN( 872)			::String text10 = (text9 + ::zui::Zui_obj::textToPaste);
HXDLIN( 872)			text = (text10 + text.substr(this->cursorX,null()));
HXLINE( 873)			 ::zui::Zui _hx_tmp19 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 873)			_hx_tmp19->cursorX = (_hx_tmp19->cursorX + ::zui::Zui_obj::textToPaste.length);
HXLINE( 874)			this->highlightAnchor = this->cursorX;
HXLINE( 875)			::zui::Zui_obj::textToPaste = HX_("",00,00,00,00);
HXLINE( 876)			::zui::Zui_obj::isPaste = false;
            		}
HXLINE( 878)		if ((this->highlightAnchor == this->cursorX)) {
HXLINE( 878)			::zui::Zui_obj::textToCopy = text;
            		}
            		else {
HXLINE( 879)			if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 879)				::zui::Zui_obj::textToCopy = text.substring(this->highlightAnchor,this->cursorX);
            			}
            			else {
HXLINE( 880)				::zui::Zui_obj::textToCopy = text.substring(this->cursorX,this->highlightAnchor);
            			}
            		}
HXLINE( 881)		bool _hx_tmp20;
HXDLIN( 881)		if (editable) {
HXLINE( 881)			_hx_tmp20 = ::zui::Zui_obj::isCut;
            		}
            		else {
HXLINE( 881)			_hx_tmp20 = false;
            		}
HXDLIN( 881)		if (_hx_tmp20) {
HXLINE( 882)			if ((this->highlightAnchor == this->cursorX)) {
HXLINE( 882)				text = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 883)				if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 884)					::String text11 = text.substr(0,this->highlightAnchor);
HXDLIN( 884)					text = (text11 + text.substr(this->cursorX,text.length));
HXLINE( 885)					this->cursorX = this->highlightAnchor;
            				}
            				else {
HXLINE( 888)					::String text12 = text.substr(0,this->cursorX);
HXDLIN( 888)					text = (text12 + text.substr(this->highlightAnchor,text.length));
            				}
            			}
            		}
HXLINE( 892)		Float off = (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE( 893)		Float lineHeight = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE( 894)		Float cursorHeight = (lineHeight - (this->buttonOffsetY * ((Float)3.0)));
HXLINE( 896)		if ((this->highlightAnchor != this->cursorX)) {
HXLINE( 897)			int istart = this->cursorX;
HXLINE( 898)			int iend = this->highlightAnchor;
HXLINE( 899)			if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 900)				istart = this->highlightAnchor;
HXLINE( 901)				iend = this->cursorX;
            			}
HXLINE( 903)			::String hlstr = text.substr(istart,(iend - istart));
HXLINE( 904)			Float hlstrw = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,hlstr);
HXLINE( 905)			 ::kha::Kravur startoff = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN( 905)			int startoff1 = this->fontSize;
HXDLIN( 905)			Float startoff2 = startoff->width(startoff1,text.substr(0,istart));
HXLINE( 906)			Float hlStart;
HXDLIN( 906)			if ((align == 0)) {
HXLINE( 906)				hlStart = ((this->_x + startoff2) + off);
            			}
            			else {
HXLINE( 906)				hlStart = (((this->_x + this->_w) - hlstrw) - off);
            			}
HXLINE( 907)			if ((align == 2)) {
HXLINE( 908)				 ::kha::Kravur hlStart1 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN( 908)				int hlStart2 = this->fontSize;
HXDLIN( 908)				hlStart = (hlStart - hlStart1->width(hlStart2,text.substr(iend,text.length)));
            			}
HXLINE( 910)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),::hx::paccDynamic)) ));
HXLINE( 911)			this->g->fillRect(hlStart,(this->_y + (this->buttonOffsetY * ((Float)1.5))),hlstrw,cursorHeight);
            		}
HXLINE( 915)		::String str;
HXDLIN( 915)		if ((align == 0)) {
HXLINE( 915)			str = text.substr(0,this->cursorX);
            		}
            		else {
HXLINE( 915)			str = text.substring(this->cursorX,text.length);
            		}
HXLINE( 916)		Float strw = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,str);
HXLINE( 917)		Float cursorX;
HXDLIN( 917)		if ((align == 0)) {
HXLINE( 917)			cursorX = ((this->_x + strw) + off);
            		}
            		else {
HXLINE( 917)			cursorX = (((this->_x + this->_w) - strw) - off);
            		}
HXLINE( 918)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE( 919)		this->g->fillRect(cursorX,(this->_y + (this->buttonOffsetY * ((Float)1.5))),(( (Float)(2) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),cursorHeight);
HXLINE( 921)		this->_hx_set_textSelected(HX_CTX, text);
HXLINE( 922)		bool _hx_tmp21;
HXDLIN( 922)		if (liveUpdate) {
HXLINE( 922)			_hx_tmp21 = ::hx::IsNotNull( this->textSelectedHandle );
            		}
            		else {
HXLINE( 922)			_hx_tmp21 = false;
            		}
HXDLIN( 922)		if (_hx_tmp21) {
HXLINE( 923)			this->textSelectedHandle->changed = (this->textSelectedHandle->text != this->textSelected);
HXLINE( 924)			this->textSelectedHandle->_hx_set_text(HX_CTX, this->textSelected);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,updateTextEdit,(void))

::String Zui_obj::textInput( ::zui::Handle handle,::String __o_label,::hx::Null< int >  __o_align,::hx::Null< bool >  __o_editable,::hx::Null< bool >  __o_liveUpdate){
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		int align = __o_align.Default(0);
            		bool editable = __o_editable.Default(true);
            		bool liveUpdate = __o_liveUpdate.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_928_textInput)
HXLINE( 929)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE( 930)			this->endElement(null());
HXLINE( 931)			return handle->text;
            		}
HXLINE( 934)		bool hover = this->getHover(null());
HXLINE( 935)		bool _hx_tmp;
HXDLIN( 935)		if (hover) {
HXLINE( 935)			_hx_tmp = ::hx::IsNotNull( ::zui::Zui_obj::onTextHover );
            		}
            		else {
HXLINE( 935)			_hx_tmp = false;
            		}
HXDLIN( 935)		if (_hx_tmp) {
HXLINE( 935)			::zui::Zui_obj::onTextHover();
            		}
HXLINE( 936)		int _hx_tmp1;
HXDLIN( 936)		if (hover) {
HXLINE( 936)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 936)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) );
            		}
HXDLIN( 936)		this->g->set_color(_hx_tmp1);
HXLINE( 937)		{
HXLINE( 937)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 937)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),::hx::paccDynamic)) );
HXDLIN( 937)			Float x = (this->_x + this->buttonOffsetY);
HXDLIN( 937)			Float y = (this->_y + this->buttonOffsetY);
HXDLIN( 937)			Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 937)			Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN( 937)			Float strength = ((Float)0.0);
HXDLIN( 937)			if ((strength == ((Float)0.0))) {
HXLINE( 937)				strength = ( (Float)(1) );
            			}
HXDLIN( 937)			if (!(this->enabled)) {
HXLINE( 937)				this->fadeColor();
            			}
HXDLIN( 937)			if (fill) {
HXLINE( 937)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE( 937)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE( 939)		bool released = this->getReleased(null());
HXLINE( 940)		bool _hx_tmp2;
HXDLIN( 940)		if (::hx::IsInstanceEq( this->submitTextHandle,handle )) {
HXLINE( 940)			_hx_tmp2 = released;
            		}
            		else {
HXLINE( 940)			_hx_tmp2 = false;
            		}
HXDLIN( 940)		if (_hx_tmp2) {
HXLINE( 941)			this->isTyping = true;
HXLINE( 942)			this->_hx_set_textSelectedHandle(HX_CTX, this->submitTextHandle);
HXLINE( 943)			this->_hx_set_submitTextHandle(HX_CTX, null());
HXLINE( 944)			this->setCursorToInput(align);
            		}
HXLINE( 946)		bool startEdit;
HXDLIN( 946)		if (!(released)) {
HXLINE( 946)			startEdit = this->tabPressed;
            		}
            		else {
HXLINE( 946)			startEdit = true;
            		}
HXLINE( 947)		handle->changed = false;
HXLINE( 949)		bool _hx_tmp3;
HXDLIN( 949)		if (::hx::IsInstanceNotEq( this->textSelectedHandle,handle )) {
HXLINE( 949)			_hx_tmp3 = startEdit;
            		}
            		else {
HXLINE( 949)			_hx_tmp3 = false;
            		}
HXDLIN( 949)		if (_hx_tmp3) {
HXLINE( 949)			this->startTextEdit(handle,align);
            		}
HXLINE( 950)		if (::hx::IsInstanceEq( this->textSelectedHandle,handle )) {
HXLINE( 950)			this->updateTextEdit(align,editable,liveUpdate);
            		}
HXLINE( 951)		if (::hx::IsInstanceEq( this->submitTextHandle,handle )) {
HXLINE( 951)			this->submitTextEdit();
            		}
HXLINE( 953)		if ((label != HX_("",00,00,00,00))) {
HXLINE( 954)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE( 955)			int labelAlign;
HXDLIN( 955)			if ((align == 2)) {
HXLINE( 955)				labelAlign = 0;
            			}
            			else {
HXLINE( 955)				labelAlign = 2;
            			}
HXLINE( 956)			 ::Dynamic _hx_tmp4;
HXDLIN( 956)			if ((labelAlign == 0)) {
HXLINE( 956)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 956)				_hx_tmp4 = 0;
            			}
HXDLIN( 956)			this->drawString(this->g,label,_hx_tmp4,0,labelAlign,null());
            		}
HXLINE( 959)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE( 960)		if (::hx::IsInstanceNotEq( this->textSelectedHandle,handle )) {
HXLINE( 960)			this->drawString(this->g,handle->text,null(),0,align,null());
            		}
            		else {
HXLINE( 960)			this->drawString(this->g,this->textSelected,null(),0,align,false);
            		}
HXLINE( 962)		this->endElement(null());
HXLINE( 963)		return handle->text;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,textInput,return )

void Zui_obj::setCursorToInput(int align){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_966_setCursorToInput)
HXLINE( 967)		Float off;
HXDLIN( 967)		if ((align == 0)) {
HXLINE( 967)			off = (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 967)			int off1 = this->_w;
HXDLIN( 967)			off = (( (Float)(off1) ) - ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,this->textSelected));
            		}
HXLINE( 968)		Float x = (this->inputX - ((this->_windowX + this->_x) + off));
HXLINE( 969)		this->cursorX = 0;
HXLINE( 970)		while(true){
HXLINE( 970)			bool _hx_tmp;
HXDLIN( 970)			if ((this->cursorX < this->textSelected.length)) {
HXLINE( 970)				 ::kha::Kravur _hx_tmp1 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN( 970)				int _hx_tmp2 = this->fontSize;
HXDLIN( 970)				_hx_tmp = (_hx_tmp1->width(_hx_tmp2,this->textSelected.substr(0,this->cursorX)) < x);
            			}
            			else {
HXLINE( 970)				_hx_tmp = false;
            			}
HXDLIN( 970)			if (!(_hx_tmp)) {
HXLINE( 970)				goto _hx_goto_33;
            			}
HXLINE( 971)			this->cursorX++;
            		}
            		_hx_goto_33:;
HXLINE( 973)		this->highlightAnchor = this->cursorX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,setCursorToInput,(void))

void Zui_obj::deselectText(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_976_deselectText)
HXLINE( 977)		if (::hx::IsNull( this->textSelectedHandle )) {
HXLINE( 977)			return;
            		}
HXLINE( 978)		this->_hx_set_submitTextHandle(HX_CTX, this->textSelectedHandle);
HXLINE( 979)		this->_hx_set_textToSubmit(HX_CTX, this->textSelected);
HXLINE( 980)		this->_hx_set_textSelectedHandle(HX_CTX, null());
HXLINE( 981)		this->isTyping = false;
HXLINE( 982)		if (::hx::IsNotNull( this->currentWindow )) {
HXLINE( 982)			this->currentWindow->redraws = 2;
            		}
HXLINE( 983)		if (::hx::IsNotNull( ::kha::input::Keyboard_obj::get(null()) )) {
HXLINE( 983)			::kha::input::Keyboard_obj::get(null())->hide();
            		}
HXLINE( 984)		this->highlightAnchor = this->cursorX;
HXLINE( 985)		if (::hx::IsNotNull( ::zui::Zui_obj::onDeselectText )) {
HXLINE( 985)			::zui::Zui_obj::onDeselectText();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,deselectText,(void))

bool Zui_obj::button(::String text,::hx::Null< int >  __o_align,::String __o_label){
            		int align = __o_align.Default(1);
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_988_button)
HXLINE( 989)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE( 990)			this->endElement(null());
HXLINE( 991)			return false;
            		}
HXLINE( 993)		bool released = this->getReleased(null());
HXLINE( 994)		bool pushed = this->getPushed(null());
HXLINE( 995)		bool hover = this->getHover(null());
HXLINE( 996)		if (released) {
HXLINE( 996)			this->changed = true;
            		}
HXLINE( 998)		int _hx_tmp;
HXDLIN( 998)		if (pushed) {
HXLINE( 998)			_hx_tmp = ( (int)(this->t->__Field(HX_("BUTTON_PRESSED_COL",96,4f,5e,ed),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 999)			if (hover) {
HXLINE( 998)				_hx_tmp = ( (int)(this->t->__Field(HX_("BUTTON_HOVER_COL",f0,a8,9f,7e),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 998)				_hx_tmp = ( (int)(this->t->__Field(HX_("BUTTON_COL",13,50,64,c5),::hx::paccDynamic)) );
            			}
            		}
HXDLIN( 998)		this->g->set_color(_hx_tmp);
HXLINE(1002)		{
HXLINE(1002)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1002)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_BUTTON_BG",36,79,48,8d),::hx::paccDynamic)) );
HXDLIN(1002)			Float x = (this->_x + this->buttonOffsetY);
HXDLIN(1002)			Float y = (this->_y + this->buttonOffsetY);
HXDLIN(1002)			Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN(1002)			Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1002)			Float strength = ((Float)0.0);
HXDLIN(1002)			if ((strength == ((Float)0.0))) {
HXLINE(1002)				strength = ( (Float)(1) );
            			}
HXDLIN(1002)			if (!(this->enabled)) {
HXLINE(1002)				this->fadeColor();
            			}
HXDLIN(1002)			if (fill) {
HXLINE(1002)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1002)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1004)		this->g->set_color(( (int)(this->t->__Field(HX_("BUTTON_TEXT_COL",7b,eb,33,eb),::hx::paccDynamic)) ));
HXLINE(1005)		this->drawString(this->g,text,null(),0,align,null());
HXLINE(1006)		if ((label != HX_("",00,00,00,00))) {
HXLINE(1007)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1008)			int _hx_tmp1;
HXDLIN(1008)			if ((align == 2)) {
HXLINE(1008)				_hx_tmp1 = 0;
            			}
            			else {
HXLINE(1008)				_hx_tmp1 = 2;
            			}
HXDLIN(1008)			this->drawString(this->g,label,null(),0,_hx_tmp1,null());
            		}
HXLINE(1011)		this->endElement(null());
HXLINE(1013)		return released;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,button,return )

bool Zui_obj::check( ::zui::Handle handle,::String text,::String __o_label){
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1016_check)
HXLINE(1017)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE(1018)			this->endElement(null());
HXLINE(1019)			return handle->selected;
            		}
HXLINE(1021)		if (this->getReleased(null())) {
HXLINE(1022)			handle->selected = !(handle->selected);
HXLINE(1023)			handle->changed = (this->changed = true);
            		}
            		else {
HXLINE(1025)			handle->changed = false;
            		}
HXLINE(1027)		bool hover = this->getHover(null());
HXLINE(1028)		this->drawCheck(handle->selected,hover);
HXLINE(1030)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1031)		this->drawString(this->g,text,this->titleOffsetX,0,0,null());
HXLINE(1033)		if ((label != HX_("",00,00,00,00))) {
HXLINE(1034)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1035)			this->drawString(this->g,label,null(),0,2,null());
            		}
HXLINE(1038)		this->endElement(null());
HXLINE(1040)		return handle->selected;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,check,return )

bool Zui_obj::radio( ::zui::Handle handle,int position,::String text,::String __o_label){
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1043_radio)
HXLINE(1044)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE(1045)			this->endElement(null());
HXLINE(1046)			return (handle->position == position);
            		}
HXLINE(1048)		if ((position == 0)) {
HXLINE(1049)			handle->changed = false;
            		}
HXLINE(1051)		if (this->getReleased(null())) {
HXLINE(1052)			handle->position = position;
HXLINE(1053)			handle->changed = (this->changed = true);
            		}
HXLINE(1056)		bool hover = this->getHover(null());
HXLINE(1057)		this->drawRadio((handle->position == position),hover);
HXLINE(1059)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1060)		this->drawString(this->g,text,this->titleOffsetX,0,null(),null());
HXLINE(1062)		if ((label != HX_("",00,00,00,00))) {
HXLINE(1063)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1064)			this->drawString(this->g,label,null(),0,2,null());
            		}
HXLINE(1067)		this->endElement(null());
HXLINE(1069)		return (handle->position == position);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,radio,return )

int Zui_obj::combo( ::zui::Handle handle,::Array< ::String > texts,::String __o_label,::hx::Null< bool >  __o_showLabel,::hx::Null< int >  __o_align,::hx::Null< bool >  __o_searchBar){
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		bool showLabel = __o_showLabel.Default(false);
            		int align = __o_align.Default(0);
            		bool searchBar = __o_searchBar.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1072_combo)
HXLINE(1073)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE(1074)			this->endElement(null());
HXLINE(1075)			return handle->position;
            		}
HXLINE(1077)		if (this->getReleased(null())) {
HXLINE(1078)			if (::hx::IsNull( this->comboSelectedHandle )) {
HXLINE(1079)				this->inputEnabled = false;
HXLINE(1080)				this->_hx_set_comboSelectedHandle(HX_CTX, handle);
HXLINE(1081)				this->_hx_set_comboSelectedWindow(HX_CTX, this->currentWindow);
HXLINE(1082)				this->comboSelectedAlign = align;
HXLINE(1083)				this->_hx_set_comboSelectedTexts(HX_CTX, texts);
HXLINE(1084)				this->_hx_set_comboSelectedLabel(HX_CTX, label);
HXLINE(1085)				this->comboSelectedX = ::Std_obj::_hx_int((this->_x + this->_windowX));
HXLINE(1086)				this->comboSelectedY = ::Std_obj::_hx_int(((this->_y + this->_windowY) + (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE(1087)				this->comboSelectedW = ::Std_obj::_hx_int(( (Float)(this->_w) ));
HXLINE(1088)				this->comboSearchBar = searchBar;
HXLINE(1089)				{
HXLINE(1089)					int _g = 0;
HXDLIN(1089)					while((_g < texts->length)){
HXLINE(1089)						::String t = texts->__get(_g);
HXDLIN(1089)						_g = (_g + 1);
HXLINE(1090)						int w = (::Std_obj::_hx_int(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,t)) + 10);
HXLINE(1091)						if ((this->comboSelectedW < w)) {
HXLINE(1091)							this->comboSelectedW = w;
            						}
            					}
            				}
HXLINE(1093)				if ((this->comboSelectedW > (this->_w * 2))) {
HXLINE(1093)					this->comboSelectedW = ::Std_obj::_hx_int(( (Float)((this->_w * 2)) ));
            				}
HXLINE(1094)				if ((this->comboSelectedW > this->_w)) {
HXLINE(1094)					 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1094)					int _hx_tmp1 = _hx_tmp->comboSelectedW;
HXDLIN(1094)					_hx_tmp->comboSelectedW = (_hx_tmp1 + ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            				}
HXLINE(1095)				this->comboToSubmit = handle->position;
HXLINE(1096)				this->comboInitialValue = handle->position;
            			}
            		}
HXLINE(1099)		bool _hx_tmp2;
HXDLIN(1099)		if (::hx::IsInstanceEq( handle,this->comboSelectedHandle )) {
HXLINE(1099)			if (!(this->isEscapeDown)) {
HXLINE(1099)				_hx_tmp2 = this->inputReleasedR;
            			}
            			else {
HXLINE(1099)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(1099)			_hx_tmp2 = false;
            		}
HXDLIN(1099)		if (_hx_tmp2) {
HXLINE(1100)			handle->position = this->comboInitialValue;
HXLINE(1101)			handle->changed = (this->changed = true);
HXLINE(1102)			this->_hx_set_submitComboHandle(HX_CTX, null());
            		}
            		else {
HXLINE(1104)			if (::hx::IsInstanceEq( handle,this->submitComboHandle )) {
HXLINE(1105)				handle->position = this->comboToSubmit;
HXLINE(1106)				this->_hx_set_submitComboHandle(HX_CTX, null());
HXLINE(1107)				handle->changed = (this->changed = true);
            			}
            			else {
HXLINE(1109)				handle->changed = false;
            			}
            		}
HXLINE(1111)		bool hover = this->getHover(null());
HXLINE(1112)		if (hover) {
HXLINE(1113)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) ));
HXLINE(1114)			{
HXLINE(1114)				 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1114)				bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),::hx::paccDynamic)) );
HXDLIN(1114)				Float x = (this->_x + this->buttonOffsetY);
HXDLIN(1114)				Float y = (this->_y + this->buttonOffsetY);
HXDLIN(1114)				Float w1 = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN(1114)				Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1114)				Float strength = ((Float)0.0);
HXDLIN(1114)				if ((strength == ((Float)0.0))) {
HXLINE(1114)					strength = ( (Float)(1) );
            				}
HXDLIN(1114)				if (!(this->enabled)) {
HXLINE(1114)					this->fadeColor();
            				}
HXDLIN(1114)				if (fill) {
HXLINE(1114)					g->fillRect(x,(y - ( (Float)(1) )),w1,(h + 1));
            				}
            				else {
HXLINE(1114)					g->drawRect(x,y,w1,h,strength);
            				}
            			}
            		}
            		else {
HXLINE(1117)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE(1118)			{
HXLINE(1118)				 ::kha::graphics2::Graphics g1 = this->g;
HXDLIN(1118)				bool fill1 = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),::hx::paccDynamic)) );
HXDLIN(1118)				Float x1 = (this->_x + this->buttonOffsetY);
HXDLIN(1118)				Float y1 = (this->_y + this->buttonOffsetY);
HXDLIN(1118)				Float w2 = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN(1118)				Float h1 = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1118)				Float strength1 = ((Float)0.0);
HXDLIN(1118)				if ((strength1 == ((Float)0.0))) {
HXLINE(1118)					strength1 = ( (Float)(1) );
            				}
HXDLIN(1118)				if (!(this->enabled)) {
HXLINE(1118)					this->fadeColor();
            				}
HXDLIN(1118)				if (fill1) {
HXLINE(1118)					g1->fillRect(x1,(y1 - ( (Float)(1) )),w2,(h1 + 1));
            				}
            				else {
HXLINE(1118)					g1->drawRect(x1,y1,w2,h1,strength1);
            				}
            			}
            		}
HXLINE(1121)		Float x2 = (((this->_x + this->_w) - this->arrowOffsetX) - ( (Float)(8) ));
HXLINE(1122)		Float y2 = ((this->_y + this->arrowOffsetY) + 3);
HXLINE(1123)		this->g->fillTriangle(x2,y2,(x2 + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),y2,(x2 + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(2) ))),(y2 + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(2) ))));
HXLINE(1125)		bool _hx_tmp3;
HXDLIN(1125)		if (showLabel) {
HXLINE(1125)			_hx_tmp3 = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1125)			_hx_tmp3 = false;
            		}
HXDLIN(1125)		if (_hx_tmp3) {
HXLINE(1126)			if ((align == 0)) {
HXLINE(1126)				 ::zui::Zui _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1126)				_hx_tmp4->_x = (_hx_tmp4->_x - ( (Float)(15) ));
            			}
HXLINE(1127)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1128)			int _hx_tmp5;
HXDLIN(1128)			if ((align == 0)) {
HXLINE(1128)				_hx_tmp5 = 2;
            			}
            			else {
HXLINE(1128)				_hx_tmp5 = 0;
            			}
HXDLIN(1128)			this->drawString(this->g,label,null(),0,_hx_tmp5,null());
HXLINE(1129)			if ((align == 0)) {
HXLINE(1129)				 ::zui::Zui _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1129)				_hx_tmp6->_x = (_hx_tmp6->_x + 15);
            			}
            		}
HXLINE(1132)		if ((align == 2)) {
HXLINE(1132)			 ::zui::Zui _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1132)			_hx_tmp7->_x = (_hx_tmp7->_x - ( (Float)(15) ));
            		}
HXLINE(1133)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1134)		if ((handle->position < texts->length)) {
HXLINE(1135)			this->drawString(this->g,texts->__get(handle->position),null(),0,align,null());
            		}
HXLINE(1137)		if ((align == 2)) {
HXLINE(1137)			 ::zui::Zui _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1137)			_hx_tmp8->_x = (_hx_tmp8->_x + 15);
            		}
HXLINE(1139)		this->endElement(null());
HXLINE(1140)		return handle->position;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Zui_obj,combo,return )

Float Zui_obj::slider( ::zui::Handle handle,::String text,::hx::Null< Float >  __o_from,::hx::Null< Float >  __o_to,::hx::Null< bool >  __o_filled,::hx::Null< Float >  __o_precision,::hx::Null< bool >  __o_displayValue,::hx::Null< int >  __o_align,::hx::Null< bool >  __o_textEdit){
            		Float from = __o_from.Default(((Float)0.0));
            		Float to = __o_to.Default(((Float)1.0));
            		bool filled = __o_filled.Default(false);
            		Float precision = __o_precision.Default(((Float)100.0));
            		bool displayValue = __o_displayValue.Default(true);
            		int align = __o_align.Default(2);
            		bool textEdit = __o_textEdit.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1143_slider)
HXLINE(1144)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE(1145)			this->endElement(null());
HXLINE(1146)			return handle->value;
            		}
HXLINE(1148)		if (this->getStarted(null())) {
HXLINE(1149)			this->_hx_set_scrollHandle(HX_CTX, handle);
HXLINE(1150)			this->isScrolling = true;
HXLINE(1151)			this->changed = (handle->changed = true);
HXLINE(1152)			if (::zui::Zui_obj::touchTooltip) {
HXLINE(1153)				this->sliderTooltip = true;
HXLINE(1154)				this->sliderTooltipX = (this->_x + this->_windowX);
HXLINE(1155)				this->sliderTooltipY = (this->_y + this->_windowY);
HXLINE(1156)				this->sliderTooltipW = ( (Float)(this->_w) );
            			}
            		}
            		else {
HXLINE(1159)			handle->changed = false;
            		}
HXLINE(1162)		bool _hx_tmp;
HXDLIN(1162)		if (::hx::IsInstanceEq( handle,this->scrollHandle )) {
HXLINE(1162)			_hx_tmp = (this->inputDX != 0);
            		}
            		else {
HXLINE(1162)			_hx_tmp = false;
            		}
HXDLIN(1162)		if (_hx_tmp) {
HXLINE(1166)			Float range = (to - from);
HXLINE(1167)			Float sliderX = ((this->_x + this->_windowX) + this->buttonOffsetY);
HXLINE(1168)			Float sliderW = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXLINE(1169)			Float step = (range / sliderW);
HXLINE(1170)			Float value = (from + ((this->inputX - sliderX) * step));
HXLINE(1171)			handle->value = (( (Float)(::Math_obj::round((value * precision))) ) / precision);
HXLINE(1172)			if ((handle->value < from)) {
HXLINE(1172)				handle->value = from;
            			}
            			else {
HXLINE(1173)				if ((handle->value > to)) {
HXLINE(1173)					handle->value = to;
            				}
            			}
HXLINE(1174)			handle->changed = (this->changed = true);
            		}
HXLINE(1177)		bool hover = this->getHover(null());
HXLINE(1178)		this->drawSlider(handle->value,from,to,filled,hover);
HXLINE(1181)		bool startEdit;
HXDLIN(1181)		bool startEdit1;
HXDLIN(1181)		if (!(this->getReleased(null()))) {
HXLINE(1181)			startEdit1 = this->tabPressed;
            		}
            		else {
HXLINE(1181)			startEdit1 = true;
            		}
HXDLIN(1181)		if (startEdit1) {
HXLINE(1181)			startEdit = textEdit;
            		}
            		else {
HXLINE(1181)			startEdit = false;
            		}
HXLINE(1182)		if (startEdit) {
HXLINE(1183)			handle->_hx_set_text(HX_CTX, (handle->value + HX_("",00,00,00,00)));
HXLINE(1184)			this->startTextEdit(handle,null());
HXLINE(1185)			handle->changed = (this->changed = true);
            		}
HXLINE(1187)		int lalign;
HXDLIN(1187)		if ((align == 0)) {
HXLINE(1187)			lalign = 2;
            		}
            		else {
HXLINE(1187)			lalign = 0;
            		}
HXLINE(1188)		if (::hx::IsInstanceEq( this->textSelectedHandle,handle )) {
HXLINE(1189)			this->updateTextEdit(lalign,null(),null());
            		}
HXLINE(1191)		if (::hx::IsInstanceEq( this->submitTextHandle,handle )) {
HXLINE(1192)			this->submitTextEdit();
HXLINE(1199)			handle->value = ::Std_obj::parseFloat(handle->text);
HXLINE(1201)			handle->changed = (this->changed = true);
            		}
HXLINE(1204)		this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1205)		this->drawString(this->g,text,null(),0,align,null());
HXLINE(1207)		if (displayValue) {
HXLINE(1208)			this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1209)			if (::hx::IsInstanceNotEq( this->textSelectedHandle,handle )) {
HXLINE(1210)				this->drawString(this->g,((( (Float)(::Math_obj::round((handle->value * precision))) ) / precision) + HX_("",00,00,00,00)),null(),0,lalign,null());
            			}
            			else {
HXLINE(1211)				this->drawString(this->g,this->textSelected,null(),0,lalign,null());
            			}
            		}
HXLINE(1214)		this->endElement(null());
HXLINE(1215)		return handle->value;
            	}


HX_DEFINE_DYNAMIC_FUNC9(Zui_obj,slider,return )

void Zui_obj::separator(::hx::Null< int >  __o_h,::hx::Null< bool >  __o_fill){
            		int h = __o_h.Default(4);
            		bool fill = __o_fill.Default(true);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1218_separator)
HXLINE(1219)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE(1220)			 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1220)			_hx_tmp->_y = (_hx_tmp->_y + (( (Float)(h) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE(1221)			return;
            		}
HXLINE(1223)		if (fill) {
HXLINE(1224)			this->g->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE(1225)			this->g->fillRect(this->_x,this->_y,( (Float)(this->_w) ),(( (Float)(h) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
HXLINE(1227)		 ::zui::Zui _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1227)		_hx_tmp1->_y = (_hx_tmp1->_y + (( (Float)(h) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,separator,(void))

void Zui_obj::tooltip(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1230_tooltip)
HXLINE(1231)		this->_hx_set_tooltipText(HX_CTX, text);
HXLINE(1232)		this->tooltipY = (this->_y + this->_windowY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,tooltip,(void))

void Zui_obj::tooltipImage( ::kha::Image image, ::Dynamic maxWidth){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1235_tooltipImage)
HXLINE(1236)		this->_hx_set_tooltipImg(HX_CTX, image);
HXLINE(1237)		this->_hx_set_tooltipImgMaxWidth(HX_CTX, maxWidth);
HXLINE(1238)		this->tooltipInvertY = this->imageInvertY;
HXLINE(1239)		this->tooltipY = (this->_y + this->_windowY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,tooltipImage,(void))

void Zui_obj::drawArrow(bool selected){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1242_drawArrow)
HXLINE(1243)		Float x = (this->_x + this->arrowOffsetX);
HXLINE(1244)		Float y = (this->_y + this->arrowOffsetY);
HXLINE(1245)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1246)		if (selected) {
HXLINE(1247)			this->g->fillTriangle(x,y,(x + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),y,(x + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(2) ))),(y + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
            		else {
HXLINE(1252)			this->g->fillTriangle(x,y,x,(y + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(x + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(y + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(2) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawArrow,(void))

void Zui_obj::drawTree(bool selected){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1258_drawTree)
HXLINE(1259)		Float SIGN_W = (( (Float)(7) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE(1260)		Float x = ((this->_x + this->arrowOffsetX) + 1);
HXLINE(1261)		Float y = ((this->_y + this->arrowOffsetY) + 1);
HXLINE(1262)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1263)		if (selected) {
HXLINE(1264)			this->g->fillRect(x,((y + (SIGN_W / ( (Float)(2) ))) - ( (Float)(1) )),SIGN_W,(SIGN_W / ( (Float)(8) )));
            		}
            		else {
HXLINE(1267)			this->g->fillRect(x,((y + (SIGN_W / ( (Float)(2) ))) - ( (Float)(1) )),SIGN_W,(SIGN_W / ( (Float)(8) )));
HXLINE(1268)			this->g->fillRect(((x + (SIGN_W / ( (Float)(2) ))) - ( (Float)(1) )),y,(SIGN_W / ( (Float)(8) )),SIGN_W);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawTree,(void))

void Zui_obj::drawCheck(bool selected,bool hover){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1272_drawCheck)
HXLINE(1273)		Float x = (this->_x + this->checkOffsetX);
HXLINE(1274)		Float y = (this->_y + this->checkOffsetY);
HXLINE(1276)		int _hx_tmp;
HXDLIN(1276)		if (hover) {
HXLINE(1276)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1276)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) );
            		}
HXDLIN(1276)		this->g->set_color(_hx_tmp);
HXLINE(1277)		{
HXLINE(1277)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1277)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),::hx::paccDynamic)) );
HXDLIN(1277)			Float w = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1277)			Float h = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1277)			Float strength = ((Float)0.0);
HXDLIN(1277)			if ((strength == ((Float)0.0))) {
HXLINE(1277)				strength = ( (Float)(1) );
            			}
HXDLIN(1277)			if (!(this->enabled)) {
HXLINE(1277)				this->fadeColor();
            			}
HXDLIN(1277)			if (fill) {
HXLINE(1277)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1277)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1279)		if (selected) {
HXLINE(1280)			this->g->set_color(-1);
HXLINE(1281)			if (!(this->enabled)) {
HXLINE(1281)				this->fadeColor();
            			}
HXLINE(1282)			int size = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE(1283)			this->g->drawScaledImage(this->checkSelectImage,( (float)((x + this->checkSelectOffsetX)) ),( (float)((y + this->checkSelectOffsetY)) ),( (float)(size) ),( (float)(size) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,drawCheck,(void))

void Zui_obj::drawRadio(bool selected,bool hover){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1287_drawRadio)
HXLINE(1288)		Float x = (this->_x + this->radioOffsetX);
HXLINE(1289)		Float y = (this->_y + this->radioOffsetY);
HXLINE(1290)		int _hx_tmp;
HXDLIN(1290)		if (hover) {
HXLINE(1290)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1290)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) );
            		}
HXDLIN(1290)		this->g->set_color(_hx_tmp);
HXLINE(1291)		{
HXLINE(1291)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1291)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),::hx::paccDynamic)) );
HXDLIN(1291)			Float w = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1291)			Float h = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1291)			Float strength = ((Float)0.0);
HXDLIN(1291)			if ((strength == ((Float)0.0))) {
HXLINE(1291)				strength = ( (Float)(1) );
            			}
HXDLIN(1291)			if (!(this->enabled)) {
HXLINE(1291)				this->fadeColor();
            			}
HXDLIN(1291)			if (fill) {
HXLINE(1291)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1291)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1293)		if (selected) {
HXLINE(1294)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),::hx::paccDynamic)) ));
HXLINE(1295)			if (!(this->enabled)) {
HXLINE(1295)				this->fadeColor();
            			}
HXLINE(1296)			this->g->fillRect((x + this->radioSelectOffsetX),(y + this->radioSelectOffsetY),(( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,drawRadio,(void))

void Zui_obj::drawSlider(Float value,Float from,Float to,bool filled,bool hover){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1300_drawSlider)
HXLINE(1301)		Float x = (this->_x + this->buttonOffsetY);
HXLINE(1302)		Float y = (this->_y + this->buttonOffsetY);
HXLINE(1303)		Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXLINE(1305)		int _hx_tmp;
HXDLIN(1305)		if (hover) {
HXLINE(1305)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1305)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) );
            		}
HXDLIN(1305)		this->g->set_color(_hx_tmp);
HXLINE(1306)		{
HXLINE(1306)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1306)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),::hx::paccDynamic)) );
HXDLIN(1306)			Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1306)			Float strength = ((Float)0.0);
HXDLIN(1306)			if ((strength == ((Float)0.0))) {
HXLINE(1306)				strength = ( (Float)(1) );
            			}
HXDLIN(1306)			if (!(this->enabled)) {
HXLINE(1306)				this->fadeColor();
            			}
HXDLIN(1306)			if (fill) {
HXLINE(1306)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1306)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1308)		int _hx_tmp1;
HXDLIN(1308)		if (hover) {
HXLINE(1308)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1308)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) );
            		}
HXDLIN(1308)		this->g->set_color(_hx_tmp1);
HXLINE(1309)		Float offset = ((value - from) / (to - from));
HXLINE(1310)		Float barW = (( (Float)(8) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE(1311)		Float sliderX;
HXDLIN(1311)		if (filled) {
HXLINE(1311)			sliderX = x;
            		}
            		else {
HXLINE(1311)			sliderX = (x + ((w - barW) * offset));
            		}
HXLINE(1312)		sliderX = ::Math_obj::max(::Math_obj::min(sliderX,(x + (w - barW))),x);
HXLINE(1313)		Float sliderW;
HXDLIN(1313)		if (filled) {
HXLINE(1313)			sliderW = (w * offset);
            		}
            		else {
HXLINE(1313)			sliderW = barW;
            		}
HXLINE(1314)		sliderW = ::Math_obj::max(::Math_obj::min(sliderW,w),( (Float)(0) ));
HXLINE(1315)		{
HXLINE(1315)			 ::kha::graphics2::Graphics g1 = this->g;
HXDLIN(1315)			Float h1 = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXDLIN(1315)			Float strength1 = ((Float)0.0);
HXDLIN(1315)			if ((strength1 == ((Float)0.0))) {
HXLINE(1315)				strength1 = ( (Float)(1) );
            			}
HXDLIN(1315)			if (!(this->enabled)) {
HXLINE(1315)				this->fadeColor();
            			}
HXDLIN(1315)			g1->fillRect(sliderX,(y - ( (Float)(1) )),sliderW,(h1 + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,drawSlider,(void))

void Zui_obj::drawCombo(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1319_drawCombo)
HXLINE(1320)		if (::hx::IsNull( this->comboSelectedHandle )) {
HXLINE(1320)			return;
            		}
HXLINE(1321)		 ::kha::graphics2::Graphics _g = this->g;
HXLINE(1322)		this->globalG->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE(1323)		this->globalG->begin(false,null());
HXLINE(1325)		int comboH;
HXDLIN(1325)		if ((this->comboSelectedLabel != HX_("",00,00,00,00))) {
HXLINE(1325)			comboH = 1;
            		}
            		else {
HXLINE(1325)			comboH = 0;
            		}
HXDLIN(1325)		int comboH1;
HXDLIN(1325)		if (this->comboSearchBar) {
HXLINE(1325)			comboH1 = 1;
            		}
            		else {
HXLINE(1325)			comboH1 = 0;
            		}
HXDLIN(1325)		int comboH2 = ((this->comboSelectedTexts->length + comboH) + comboH1);
HXDLIN(1325)		int comboH3 = (comboH2 * ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE(1326)		int distTop = (this->comboSelectedY - comboH3);
HXDLIN(1326)		int distTop1 = (distTop - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXDLIN(1326)		int distTop2 = (distTop1 - this->windowBorderTop);
HXLINE(1327)		int distBottom = ::kha::System_obj::windowHeight(null());
HXDLIN(1327)		int distBottom1 = ((distBottom - this->windowBorderBottom) - (this->comboSelectedY + comboH3));
HXLINE(1328)		bool unrollUp;
HXDLIN(1328)		if ((distBottom1 < 0)) {
HXLINE(1328)			unrollUp = (distBottom1 < distTop2);
            		}
            		else {
HXLINE(1328)			unrollUp = false;
            		}
HXLINE(1329)		this->beginRegion(this->globalG,this->comboSelectedX,this->comboSelectedY,this->comboSelectedW);
HXLINE(1330)		bool _hx_tmp;
HXDLIN(1330)		if (!(this->isKeyPressed)) {
HXLINE(1330)			_hx_tmp = (this->inputWheelDelta != 0);
            		}
            		else {
HXLINE(1330)			_hx_tmp = true;
            		}
HXDLIN(1330)		if (_hx_tmp) {
HXLINE(1331)			bool arrowUp;
HXDLIN(1331)			if (this->isKeyPressed) {
HXLINE(1331)				 ::Dynamic arrowUp1;
HXDLIN(1331)				if (unrollUp) {
HXLINE(1331)					arrowUp1 = 40;
            				}
            				else {
HXLINE(1331)					arrowUp1 = 38;
            				}
HXDLIN(1331)				arrowUp = ::hx::IsEq( this->key,arrowUp1 );
            			}
            			else {
HXLINE(1331)				arrowUp = false;
            			}
HXLINE(1332)			bool arrowDown;
HXDLIN(1332)			if (this->isKeyPressed) {
HXLINE(1332)				 ::Dynamic arrowDown1;
HXDLIN(1332)				if (unrollUp) {
HXLINE(1332)					arrowDown1 = 38;
            				}
            				else {
HXLINE(1332)					arrowDown1 = 40;
            				}
HXDLIN(1332)				arrowDown = ::hx::IsEq( this->key,arrowDown1 );
            			}
            			else {
HXLINE(1332)				arrowDown = false;
            			}
HXLINE(1333)			bool wheelUp;
HXDLIN(1333)			bool wheelUp1;
HXDLIN(1333)			if (unrollUp) {
HXLINE(1333)				wheelUp1 = (this->inputWheelDelta > 0);
            			}
            			else {
HXLINE(1333)				wheelUp1 = false;
            			}
HXDLIN(1333)			if (!(wheelUp1)) {
HXLINE(1333)				if (!(unrollUp)) {
HXLINE(1333)					wheelUp = (this->inputWheelDelta < 0);
            				}
            				else {
HXLINE(1333)					wheelUp = false;
            				}
            			}
            			else {
HXLINE(1333)				wheelUp = true;
            			}
HXLINE(1334)			bool wheelDown;
HXDLIN(1334)			bool wheelDown1;
HXDLIN(1334)			if (unrollUp) {
HXLINE(1334)				wheelDown1 = (this->inputWheelDelta < 0);
            			}
            			else {
HXLINE(1334)				wheelDown1 = false;
            			}
HXDLIN(1334)			if (!(wheelDown1)) {
HXLINE(1334)				if (!(unrollUp)) {
HXLINE(1334)					wheelDown = (this->inputWheelDelta > 0);
            				}
            				else {
HXLINE(1334)					wheelDown = false;
            				}
            			}
            			else {
HXLINE(1334)				wheelDown = true;
            			}
HXLINE(1335)			bool _hx_tmp1;
HXDLIN(1335)			bool _hx_tmp2;
HXDLIN(1335)			if (!(arrowUp)) {
HXLINE(1335)				_hx_tmp2 = wheelUp;
            			}
            			else {
HXLINE(1335)				_hx_tmp2 = true;
            			}
HXDLIN(1335)			if (_hx_tmp2) {
HXLINE(1335)				_hx_tmp1 = (this->comboToSubmit > 0);
            			}
            			else {
HXLINE(1335)				_hx_tmp1 = false;
            			}
HXDLIN(1335)			if (_hx_tmp1) {
HXLINE(1336)				int step = 1;
HXLINE(1337)				bool _hx_tmp3;
HXDLIN(1337)				if (this->comboSearchBar) {
HXLINE(1337)					_hx_tmp3 = (this->textSelected.length > 0);
            				}
            				else {
HXLINE(1337)					_hx_tmp3 = false;
            				}
HXDLIN(1337)				if (_hx_tmp3) {
HXLINE(1338)					::String search = this->textSelected.toLowerCase();
HXLINE(1339)					while(true){
HXLINE(1339)						bool _hx_tmp4;
HXDLIN(1339)						if ((this->comboSelectedTexts->__get((this->comboToSubmit - step)).toLowerCase().indexOf(search,null()) < 0)) {
HXLINE(1339)							_hx_tmp4 = ((this->comboToSubmit - step) > 0);
            						}
            						else {
HXLINE(1339)							_hx_tmp4 = false;
            						}
HXDLIN(1339)						if (!(_hx_tmp4)) {
HXLINE(1339)							goto _hx_goto_50;
            						}
HXLINE(1340)						step = (step + 1);
            					}
            					_hx_goto_50:;
HXLINE(1343)					if ((this->comboSelectedTexts->__get((this->comboToSubmit - step)).toLowerCase().indexOf(search,null()) < 0)) {
HXLINE(1343)						step = 0;
            					}
            				}
HXLINE(1345)				 ::zui::Zui _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1345)				_hx_tmp5->comboToSubmit = (_hx_tmp5->comboToSubmit - step);
HXLINE(1346)				this->_hx_set_submitComboHandle(HX_CTX, this->comboSelectedHandle);
            			}
            			else {
HXLINE(1348)				bool _hx_tmp6;
HXDLIN(1348)				bool _hx_tmp7;
HXDLIN(1348)				if (!(arrowDown)) {
HXLINE(1348)					_hx_tmp7 = wheelDown;
            				}
            				else {
HXLINE(1348)					_hx_tmp7 = true;
            				}
HXDLIN(1348)				if (_hx_tmp7) {
HXLINE(1348)					_hx_tmp6 = (this->comboToSubmit < (this->comboSelectedTexts->length - 1));
            				}
            				else {
HXLINE(1348)					_hx_tmp6 = false;
            				}
HXDLIN(1348)				if (_hx_tmp6) {
HXLINE(1349)					int step1 = 1;
HXLINE(1350)					bool _hx_tmp8;
HXDLIN(1350)					if (this->comboSearchBar) {
HXLINE(1350)						_hx_tmp8 = (this->textSelected.length > 0);
            					}
            					else {
HXLINE(1350)						_hx_tmp8 = false;
            					}
HXDLIN(1350)					if (_hx_tmp8) {
HXLINE(1351)						::String search1 = this->textSelected.toLowerCase();
HXLINE(1352)						while(true){
HXLINE(1352)							bool _hx_tmp9;
HXDLIN(1352)							if ((this->comboSelectedTexts->__get((this->comboToSubmit + step1)).toLowerCase().indexOf(search1,null()) < 0)) {
HXLINE(1352)								_hx_tmp9 = ((this->comboToSubmit + step1) < (this->comboSelectedTexts->length - 1));
            							}
            							else {
HXLINE(1352)								_hx_tmp9 = false;
            							}
HXDLIN(1352)							if (!(_hx_tmp9)) {
HXLINE(1352)								goto _hx_goto_51;
            							}
HXLINE(1353)							step1 = (step1 + 1);
            						}
            						_hx_goto_51:;
HXLINE(1356)						if ((this->comboSelectedTexts->__get((this->comboToSubmit + step1)).toLowerCase().indexOf(search1,null()) < 0)) {
HXLINE(1356)							step1 = 0;
            						}
            					}
HXLINE(1359)					 ::zui::Zui _hx_tmp10 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1359)					_hx_tmp10->comboToSubmit = (_hx_tmp10->comboToSubmit + step1);
HXLINE(1360)					this->_hx_set_submitComboHandle(HX_CTX, this->comboSelectedHandle);
            				}
            			}
HXLINE(1362)			if (::hx::IsNotNull( this->comboSelectedWindow )) {
HXLINE(1362)				this->comboSelectedWindow->redraws = 2;
            			}
            		}
HXLINE(1365)		this->inputEnabled = true;
HXLINE(1366)		int _BUTTON_COL = ( (int)(this->t->__Field(HX_("BUTTON_COL",13,50,64,c5),::hx::paccDynamic)) );
HXLINE(1367)		int _ELEMENT_OFFSET = ( (int)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) );
HXLINE(1368)		this->t->__SetField(HX_("ELEMENT_OFFSET",16,9e,c2,08),0,::hx::paccDynamic);
HXLINE(1369)		int unrollRight;
HXDLIN(1369)		Float unrollRight1 = (this->_x + (this->comboSelectedW * 2));
HXDLIN(1369)		int unrollRight2 = ::kha::System_obj::windowWidth(null());
HXDLIN(1369)		if ((unrollRight1 < (unrollRight2 - this->windowBorderRight))) {
HXLINE(1369)			unrollRight = 1;
            		}
            		else {
HXLINE(1369)			unrollRight = -1;
            		}
HXLINE(1370)		bool resetPosition = false;
HXLINE(1371)		::String search2 = HX_("",00,00,00,00);
HXLINE(1372)		if (this->comboSearchBar) {
HXLINE(1373)			if (unrollUp) {
HXLINE(1373)				 ::zui::Zui _hx_tmp11 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1373)				_hx_tmp11->_y = (_hx_tmp11->_y - ((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ( (Float)(2) )));
            			}
HXLINE(1374)			 ::zui::Handle comboSearchHandle = ::zui::Handle_obj::global->nest(27,null());
HXLINE(1375)			if (::zui::Zui_obj::comboFirst) {
HXLINE(1375)				comboSearchHandle->_hx_set_text(HX_CTX, HX_("",00,00,00,00));
            			}
HXLINE(1376)			this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE(1377)			search2 = this->textInput(comboSearchHandle,HX_("",00,00,00,00),0,true,true).toLowerCase();
HXLINE(1378)			if (this->isReleased) {
HXLINE(1378)				::zui::Zui_obj::comboFirst = true;
            			}
HXLINE(1379)			if (::zui::Zui_obj::comboFirst) {
HXLINE(1381)				this->startTextEdit(comboSearchHandle,null());
            			}
HXLINE(1384)			resetPosition = comboSearchHandle->changed;
            		}
HXLINE(1387)		{
HXLINE(1387)			int _g1 = 0;
HXDLIN(1387)			int _g2 = this->comboSelectedTexts->length;
HXDLIN(1387)			while((_g1 < _g2)){
HXLINE(1387)				_g1 = (_g1 + 1);
HXDLIN(1387)				int i = (_g1 - 1);
HXLINE(1388)				bool _hx_tmp12;
HXDLIN(1388)				if ((search2.length > 0)) {
HXLINE(1388)					_hx_tmp12 = (this->comboSelectedTexts->__get(i).toLowerCase().indexOf(search2,null()) < 0);
            				}
            				else {
HXLINE(1388)					_hx_tmp12 = false;
            				}
HXDLIN(1388)				if (_hx_tmp12) {
HXLINE(1389)					continue;
            				}
HXLINE(1391)				if (resetPosition) {
HXLINE(1392)					this->comboToSubmit = (this->comboSelectedHandle->position = i);
HXLINE(1393)					this->_hx_set_submitComboHandle(HX_CTX, this->comboSelectedHandle);
HXLINE(1394)					resetPosition = false;
            				}
HXLINE(1396)				if (unrollUp) {
HXLINE(1396)					 ::zui::Zui _hx_tmp13 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1396)					_hx_tmp13->_y = (_hx_tmp13->_y - ((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ( (Float)(2) )));
            				}
HXLINE(1397)				int _hx_tmp14;
HXDLIN(1397)				if ((i == this->comboSelectedHandle->position)) {
HXLINE(1397)					_hx_tmp14 = ( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(1397)					_hx_tmp14 = ( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) );
            				}
HXDLIN(1397)				this->t->__SetField(HX_("BUTTON_COL",13,50,64,c5),_hx_tmp14,::hx::paccDynamic);
HXLINE(1398)				this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE(1399)				if (this->button(this->comboSelectedTexts->__get(i),this->comboSelectedAlign,null())) {
HXLINE(1400)					this->comboToSubmit = i;
HXLINE(1401)					this->_hx_set_submitComboHandle(HX_CTX, this->comboSelectedHandle);
HXLINE(1402)					if (::hx::IsNotNull( this->comboSelectedWindow )) {
HXLINE(1402)						this->comboSelectedWindow->redraws = 2;
            					}
HXLINE(1403)					goto _hx_goto_52;
            				}
HXLINE(1405)				bool _hx_tmp15;
HXDLIN(1405)				Float _hx_tmp16 = (this->_y + (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXDLIN(1405)				int _hx_tmp17 = ::kha::System_obj::windowHeight(null());
HXDLIN(1405)				if (!((_hx_tmp16 > (_hx_tmp17 - this->windowBorderBottom)))) {
HXLINE(1405)					_hx_tmp15 = ((this->_y - ((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ( (Float)(2) ))) < this->windowBorderTop);
            				}
            				else {
HXLINE(1405)					_hx_tmp15 = true;
            				}
HXDLIN(1405)				if (_hx_tmp15) {
HXLINE(1406)					 ::zui::Zui _hx_tmp18 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1406)					_hx_tmp18->_x = (_hx_tmp18->_x + (this->comboSelectedW * unrollRight));
HXLINE(1407)					this->_y = ( (Float)(this->comboSelectedY) );
            				}
            			}
            			_hx_goto_52:;
            		}
HXLINE(1410)		this->t->__SetField(HX_("BUTTON_COL",13,50,64,c5),_BUTTON_COL,::hx::paccDynamic);
HXLINE(1411)		this->t->__SetField(HX_("ELEMENT_OFFSET",16,9e,c2,08),_ELEMENT_OFFSET,::hx::paccDynamic);
HXLINE(1413)		if ((this->comboSelectedLabel != HX_("",00,00,00,00))) {
HXLINE(1414)			if (unrollUp) {
HXLINE(1415)				 ::zui::Zui _hx_tmp19 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1415)				_hx_tmp19->_y = (_hx_tmp19->_y - ((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ( (Float)(2) )));
HXLINE(1416)				this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE(1417)				this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1418)				this->drawString(this->g,this->comboSelectedLabel,null(),0,2,null());
HXLINE(1419)				 ::zui::Zui _hx_tmp20 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1419)				_hx_tmp20->_y = (_hx_tmp20->_y + (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE(1420)				this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ),( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(1423)				this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE(1424)				this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ),( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),::hx::paccDynamic)) ));
HXLINE(1425)				this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic)) ));
HXLINE(1426)				this->drawString(this->g,this->comboSelectedLabel,null(),0,2,null());
            			}
            		}
HXLINE(1430)		bool _hx_tmp21;
HXDLIN(1430)		bool _hx_tmp22;
HXDLIN(1430)		bool _hx_tmp23;
HXDLIN(1430)		bool _hx_tmp24;
HXDLIN(1430)		if (!(this->inputReleased)) {
HXLINE(1430)			_hx_tmp24 = this->inputReleasedR;
            		}
            		else {
HXLINE(1430)			_hx_tmp24 = true;
            		}
HXDLIN(1430)		if (!(_hx_tmp24)) {
HXLINE(1430)			_hx_tmp23 = this->isEscapeDown;
            		}
            		else {
HXLINE(1430)			_hx_tmp23 = true;
            		}
HXDLIN(1430)		if (!(_hx_tmp23)) {
HXLINE(1430)			_hx_tmp22 = this->isReturnDown;
            		}
            		else {
HXLINE(1430)			_hx_tmp22 = true;
            		}
HXDLIN(1430)		if (_hx_tmp22) {
HXLINE(1430)			_hx_tmp21 = !(::zui::Zui_obj::comboFirst);
            		}
            		else {
HXLINE(1430)			_hx_tmp21 = false;
            		}
HXDLIN(1430)		if (_hx_tmp21) {
HXLINE(1431)			this->_hx_set_comboSelectedHandle(HX_CTX, null());
HXLINE(1432)			::zui::Zui_obj::comboFirst = true;
            		}
            		else {
HXLINE(1434)			::zui::Zui_obj::comboFirst = false;
            		}
HXLINE(1435)		this->inputEnabled = ::hx::IsNull( this->comboSelectedHandle );
HXLINE(1436)		this->endRegion(false);
HXLINE(1437)		this->globalG->end();
HXLINE(1438)		this->_hx_set_g(HX_CTX, _g);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawCombo,(void))

void Zui_obj::drawTooltip(bool bindGlobalG){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1441_drawTooltip)
HXLINE(1442)		if (this->sliderTooltip) {
HXLINE(1443)			if (bindGlobalG) {
HXLINE(1443)				this->globalG->begin(false,null());
            			}
HXLINE(1444)			this->globalG->set_font(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) ));
HXLINE(1445)			this->globalG->set_fontSize((this->fontSize * 2));
HXLINE(1446)			::String text = ((( (Float)(::Math_obj::round((this->scrollHandle->value * ( (Float)(100) )))) ) / ( (Float)(100) )) + HX_("",00,00,00,00));
HXLINE(1447)			 ::kha::Kravur xoff = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN(1447)			Float xoff1 = (xoff->width(this->globalG->get_fontSize(),text) / ( (Float)(2) ));
HXLINE(1448)			 ::kha::Kravur yoff = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN(1448)			Float yoff1 = yoff->height(this->globalG->get_fontSize());
HXLINE(1449)			Float x = ::Math_obj::min(::Math_obj::max(this->sliderTooltipX,this->inputX),(this->sliderTooltipX + this->sliderTooltipW));
HXLINE(1450)			this->globalG->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE(1451)			this->globalG->fillRect((x - xoff1),(this->sliderTooltipY - yoff1),(xoff1 * ( (Float)(2) )),yoff1);
HXLINE(1452)			this->globalG->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1453)			this->globalG->drawString(text,(x - xoff1),(this->sliderTooltipY - yoff1));
HXLINE(1454)			if (bindGlobalG) {
HXLINE(1454)				this->globalG->end();
            			}
            		}
HXLINE(1456)		bool _hx_tmp;
HXDLIN(1456)		if (::zui::Zui_obj::touchTooltip) {
HXLINE(1456)			_hx_tmp = ::hx::IsNotNull( this->textSelectedHandle );
            		}
            		else {
HXLINE(1456)			_hx_tmp = false;
            		}
HXDLIN(1456)		if (_hx_tmp) {
HXLINE(1457)			if (bindGlobalG) {
HXLINE(1457)				this->globalG->begin(false,null());
            			}
HXLINE(1458)			this->globalG->set_font(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) ));
HXLINE(1459)			this->globalG->set_fontSize((this->fontSize * 2));
HXLINE(1460)			 ::kha::Kravur xoff2 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN(1460)			int xoff3 = this->globalG->get_fontSize();
HXDLIN(1460)			Float xoff4 = (xoff2->width(xoff3,this->textSelected) / ( (Float)(2) ));
HXLINE(1461)			 ::kha::Kravur yoff2 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) );
HXDLIN(1461)			Float yoff3 = (yoff2->height(this->globalG->get_fontSize()) / ( (Float)(2) ));
HXLINE(1462)			Float x1 = (( (Float)(::kha::System_obj::windowWidth(null())) ) / ( (Float)(2) ));
HXLINE(1463)			Float y = (( (Float)(::kha::System_obj::windowHeight(null())) ) / ( (Float)(3) ));
HXLINE(1464)			this->globalG->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE(1465)			this->globalG->fillRect((x1 - xoff4),(y - yoff3),(xoff4 * ( (Float)(2) )),(yoff3 * ( (Float)(2) )));
HXLINE(1466)			this->globalG->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1467)			this->globalG->drawString(this->textSelected,(x1 - xoff4),(y - yoff3));
HXLINE(1468)			if (bindGlobalG) {
HXLINE(1468)				this->globalG->end();
            			}
            		}
HXLINE(1471)		bool _hx_tmp1;
HXDLIN(1471)		if ((this->tooltipText == HX_("",00,00,00,00))) {
HXLINE(1471)			_hx_tmp1 = ::hx::IsNotNull( this->tooltipImg );
            		}
            		else {
HXLINE(1471)			_hx_tmp1 = true;
            		}
HXDLIN(1471)		if (_hx_tmp1) {
HXLINE(1472)			if (this->inputChanged()) {
HXLINE(1473)				this->tooltipShown = false;
HXLINE(1474)				bool _hx_tmp2;
HXDLIN(1474)				if ((this->inputDX == 0)) {
HXLINE(1474)					_hx_tmp2 = (this->inputDY == 0);
            				}
            				else {
HXLINE(1474)					_hx_tmp2 = false;
            				}
HXDLIN(1474)				this->tooltipWait = _hx_tmp2;
            			}
HXLINE(1476)			if (!(this->tooltipShown)) {
HXLINE(1477)				this->tooltipShown = true;
HXLINE(1478)				this->tooltipX = this->inputX;
HXLINE(1479)				this->tooltipTime = ::kha::Scheduler_obj::time();
            			}
HXLINE(1481)			bool _hx_tmp3;
HXDLIN(1481)			if (!(this->tooltipWait)) {
HXLINE(1481)				Float _hx_tmp4 = ::kha::Scheduler_obj::time();
HXDLIN(1481)				_hx_tmp3 = ((_hx_tmp4 - this->tooltipTime) > ((Float)1.0));
            			}
            			else {
HXLINE(1481)				_hx_tmp3 = false;
            			}
HXDLIN(1481)			if (_hx_tmp3) {
HXLINE(1482)				if (::hx::IsNotNull( this->tooltipImg )) {
HXLINE(1482)					this->drawTooltipImage(bindGlobalG);
            				}
HXLINE(1483)				if ((this->tooltipText != HX_("",00,00,00,00))) {
HXLINE(1483)					this->drawTooltipText(bindGlobalG);
            				}
            			}
            		}
            		else {
HXLINE(1486)			this->tooltipShown = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawTooltip,(void))

void Zui_obj::drawTooltipText(bool bindGlobalG){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1489_drawTooltipText)
HXLINE(1490)		this->globalG->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE(1491)		::Array< ::String > lines = this->tooltipText.split(HX_("\n",0a,00,00,00));
HXLINE(1492)		Float tooltipW = ((Float)0.0);
HXLINE(1493)		{
HXLINE(1493)			int _g = 0;
HXDLIN(1493)			while((_g < lines->length)){
HXLINE(1493)				::String line = lines->__get(_g);
HXDLIN(1493)				_g = (_g + 1);
HXLINE(1494)				Float lineTooltipW = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,line);
HXLINE(1495)				if ((lineTooltipW > tooltipW)) {
HXLINE(1495)					tooltipW = lineTooltipW;
            				}
            			}
            		}
HXLINE(1497)		Float _hx_tmp = this->tooltipX;
HXDLIN(1497)		this->tooltipX = ::Math_obj::min(_hx_tmp,((( (Float)(::kha::System_obj::windowWidth(null())) ) - tooltipW) - ( (Float)(20) )));
HXLINE(1498)		if (bindGlobalG) {
HXLINE(1498)			this->globalG->begin(false,null());
            		}
HXLINE(1499)		Float fontHeight = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->height(this->fontSize);
HXLINE(1500)		int off = 0;
HXLINE(1501)		if (::hx::IsNotNull( this->tooltipImg )) {
HXLINE(1502)			int w = this->tooltipImg->get_width();
HXLINE(1503)			bool _hx_tmp1;
HXDLIN(1503)			if (::hx::IsNotNull( this->tooltipImgMaxWidth )) {
HXLINE(1503)				_hx_tmp1 = ::hx::IsGreater( w,this->tooltipImgMaxWidth );
            			}
            			else {
HXLINE(1503)				_hx_tmp1 = false;
            			}
HXDLIN(1503)			if (_hx_tmp1) {
HXLINE(1503)				w = ( (int)(this->tooltipImgMaxWidth) );
            			}
HXLINE(1504)			int off1 = this->tooltipImg->get_height();
HXDLIN(1504)			off = ::Std_obj::_hx_int((( (Float)(off1) ) * (( (Float)(w) ) / ( (Float)(this->tooltipImg->get_width()) ))));
            		}
HXLINE(1506)		this->globalG->fillRect(this->tooltipX,(this->tooltipY + off),(tooltipW + 20),(fontHeight * ( (Float)(lines->length) )));
HXLINE(1507)		this->globalG->set_font(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) ));
HXLINE(1508)		this->globalG->set_fontSize(this->fontSize);
HXLINE(1509)		this->globalG->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE(1510)		{
HXLINE(1510)			int _g1 = 0;
HXDLIN(1510)			int _g2 = lines->length;
HXDLIN(1510)			while((_g1 < _g2)){
HXLINE(1510)				_g1 = (_g1 + 1);
HXDLIN(1510)				int i = (_g1 - 1);
HXLINE(1511)				this->globalG->drawString(lines->__get(i),(this->tooltipX + 5),((this->tooltipY + off) + (i * this->fontSize)));
            			}
            		}
HXLINE(1513)		if (bindGlobalG) {
HXLINE(1513)			this->globalG->end();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawTooltipText,(void))

void Zui_obj::drawTooltipImage(bool bindGlobalG){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1516_drawTooltipImage)
HXLINE(1517)		int w = this->tooltipImg->get_width();
HXLINE(1518)		bool _hx_tmp;
HXDLIN(1518)		if (::hx::IsNotNull( this->tooltipImgMaxWidth )) {
HXLINE(1518)			_hx_tmp = ::hx::IsGreater( w,this->tooltipImgMaxWidth );
            		}
            		else {
HXLINE(1518)			_hx_tmp = false;
            		}
HXDLIN(1518)		if (_hx_tmp) {
HXLINE(1518)			w = ( (int)(this->tooltipImgMaxWidth) );
            		}
HXLINE(1519)		int h = this->tooltipImg->get_height();
HXDLIN(1519)		Float h1 = (( (Float)(h) ) * (( (Float)(w) ) / ( (Float)(this->tooltipImg->get_width()) )));
HXLINE(1520)		Float _hx_tmp1 = this->tooltipX;
HXDLIN(1520)		this->tooltipX = ::Math_obj::min(_hx_tmp1,( (Float)(((::kha::System_obj::windowWidth(null()) - w) - 20)) ));
HXLINE(1521)		Float _hx_tmp2 = this->tooltipY;
HXDLIN(1521)		this->tooltipY = ::Math_obj::min(_hx_tmp2,((( (Float)(::kha::System_obj::windowHeight(null())) ) - h1) - ( (Float)(20) )));
HXLINE(1522)		if (bindGlobalG) {
HXLINE(1522)			this->globalG->begin(false,null());
            		}
HXLINE(1523)		this->globalG->set_color(-16777216);
HXLINE(1524)		this->globalG->fillRect(this->tooltipX,this->tooltipY,( (Float)(w) ),h1);
HXLINE(1525)		this->globalG->set_color(-1);
HXLINE(1526)		if (this->tooltipInvertY) {
HXLINE(1527)			this->globalG->drawScaledImage(this->tooltipImg,( (float)(this->tooltipX) ),( (float)((this->tooltipY + h1)) ),( (float)(w) ),( (float)(-(h1)) ));
            		}
            		else {
HXLINE(1528)			this->globalG->drawScaledImage(this->tooltipImg,( (float)(this->tooltipX) ),( (float)(this->tooltipY) ),( (float)(w) ),( (float)(h1) ));
            		}
HXLINE(1529)		if (bindGlobalG) {
HXLINE(1529)			this->globalG->end();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawTooltipImage,(void))

void Zui_obj::drawString( ::kha::graphics2::Graphics g,::String text, ::Dynamic xOffset,::hx::Null< Float >  __o_yOffset,::hx::Null< int >  __o_align,::hx::Null< bool >  __o_truncation){
            		Float yOffset = __o_yOffset.Default(0);
            		int align = __o_align.Default(0);
            		bool truncation = __o_truncation.Default(true);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1532_drawString)
HXLINE(1533)		::String fullText = text;
HXLINE(1534)		if (truncation) {
HXLINE(1535)			while(true){
HXLINE(1535)				bool _hx_tmp;
HXDLIN(1535)				if ((text.length > 0)) {
HXLINE(1535)					Float _hx_tmp1 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,text);
HXDLIN(1535)					_hx_tmp = (_hx_tmp1 > (( (Float)(this->_w) ) - (( (Float)(6) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            				}
            				else {
HXLINE(1535)					_hx_tmp = false;
            				}
HXDLIN(1535)				if (!(_hx_tmp)) {
HXLINE(1535)					goto _hx_goto_59;
            				}
HXLINE(1536)				text = text.substr(0,(text.length - 1));
            			}
            			_hx_goto_59:;
HXLINE(1538)			if ((text.length < fullText.length)) {
HXLINE(1539)				text = (text + HX_("..",40,28,00,00));
HXLINE(1541)				while(true){
HXLINE(1541)					bool _hx_tmp2;
HXDLIN(1541)					if ((text.length > 2)) {
HXLINE(1541)						Float _hx_tmp3 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,text);
HXDLIN(1541)						_hx_tmp2 = (_hx_tmp3 > (( (Float)(this->_w) ) - (( (Float)(10) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            					}
            					else {
HXLINE(1541)						_hx_tmp2 = false;
            					}
HXDLIN(1541)					if (!(_hx_tmp2)) {
HXLINE(1541)						goto _hx_goto_60;
            					}
HXLINE(1542)					text = (text.substr(0,(text.length - 3)) + HX_("..",40,28,00,00));
            				}
            				_hx_goto_60:;
HXLINE(1544)				if (this->isHovered) {
HXLINE(1544)					this->tooltip(fullText);
            				}
            			}
            		}
HXLINE(1548)		if (::zui::Zui_obj::dynamicGlyphLoad) {
HXLINE(1549)			int _g = 0;
HXDLIN(1549)			int _g1 = text.length;
HXDLIN(1549)			while((_g < _g1)){
HXLINE(1549)				_g = (_g + 1);
HXDLIN(1549)				int i = (_g - 1);
HXLINE(1550)				bool _hx_tmp4;
HXDLIN(1550)				if (::hx::IsGreater( text.charCodeAt(i),126 )) {
HXLINE(1550)					::Array< int > _hx_tmp5 = ::kha::graphics2::Graphics_obj::fontGlyphs;
HXDLIN(1550)					_hx_tmp4 = (_hx_tmp5->indexOf(text.charCodeAt(i),null()) == -1);
            				}
            				else {
HXLINE(1550)					_hx_tmp4 = false;
            				}
HXDLIN(1550)				if (_hx_tmp4) {
HXLINE(1551)					::Array< int > _hx_tmp6 = ::kha::graphics2::Graphics_obj::fontGlyphs;
HXDLIN(1551)					_hx_tmp6->push(text.charCodeAt(i));
HXLINE(1552)					::kha::graphics2::Graphics_obj::fontGlyphs = ::kha::graphics2::Graphics_obj::fontGlyphs->copy();
            				}
            			}
            		}
HXLINE(1557)		if (::hx::IsNull( xOffset )) {
HXLINE(1557)			xOffset = this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),::hx::paccDynamic);
            		}
HXLINE(1558)		xOffset = (xOffset * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
HXLINE(1559)		g->set_font(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) ));
HXLINE(1560)		g->set_fontSize(this->fontSize);
HXLINE(1561)		if ((align == 1)) {
HXLINE(1561)			Float xOffset1 = (( (Float)(this->_w) ) / ( (Float)(2) ));
HXDLIN(1561)			xOffset = (xOffset1 - (( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,text) / ( (Float)(2) )));
            		}
            		else {
HXLINE(1562)			if ((align == 2)) {
HXLINE(1562)				int xOffset2 = this->_w;
HXDLIN(1562)				Float xOffset3 = (( (Float)(xOffset2) ) - ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(this->fontSize,text));
HXDLIN(1562)				xOffset = (xOffset3 - (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            			}
            		}
HXLINE(1564)		if (!(this->enabled)) {
HXLINE(1564)			this->fadeColor();
            		}
HXLINE(1565)		g->set_pipeline(this->rtTextPipeline);
HXLINE(1567)		if (::hx::IsNull( this->textColoring )) {
HXLINE(1568)			g->drawString(text,(this->_x + xOffset),((this->_y + this->fontOffsetY) + yOffset));
            		}
            		else {
HXLINE(1572)			{
HXLINE(1572)				int _g2 = 0;
HXDLIN(1572)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(this->textColoring->__Field(HX_("colorings",34,98,4f,36),::hx::paccDynamic)) );
HXDLIN(1572)				while((_g2 < _g3->length)){
HXLINE(1572)					 ::Dynamic coloring = _g3->__get(_g2);
HXDLIN(1572)					_g2 = (_g2 + 1);
HXLINE(1573)					 ::Dynamic result = ::zui::Zui_obj::extractColoring(text,coloring);
HXLINE(1574)					if (::hx::IsNotEq( result->__Field(HX_("colored",82,28,66,ef),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(1575)						g->set_color(( (int)(coloring->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) ));
HXLINE(1576)						g->drawString(( (::String)(result->__Field(HX_("colored",82,28,66,ef),::hx::paccDynamic)) ),(this->_x + xOffset),((this->_y + this->fontOffsetY) + yOffset));
            					}
HXLINE(1578)					text = ( (::String)(result->__Field(HX_("uncolored",49,2f,68,eb),::hx::paccDynamic)) );
            				}
            			}
HXLINE(1580)			g->set_color(( (int)(this->textColoring->__Field(HX_("default_color",25,18,28,0c),::hx::paccDynamic)) ));
HXLINE(1581)			g->drawString(text,(this->_x + xOffset),((this->_y + this->fontOffsetY) + yOffset));
            		}
HXLINE(1584)		g->set_pipeline(null());
            	}


HX_DEFINE_DYNAMIC_FUNC6(Zui_obj,drawString,(void))

void Zui_obj::endElement( ::Dynamic elementSize){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1631_endElement)
HXLINE(1632)		if (::hx::IsNull( elementSize )) {
HXLINE(1632)			elementSize = ((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
HXLINE(1633)		bool _hx_tmp;
HXDLIN(1633)		if (::hx::IsNotNull( this->currentWindow )) {
HXLINE(1633)			_hx_tmp = (this->currentWindow->layout == 0);
            		}
            		else {
HXLINE(1633)			_hx_tmp = true;
            		}
HXDLIN(1633)		if (_hx_tmp) {
HXLINE(1634)			bool _hx_tmp1;
HXDLIN(1634)			if ((this->curRatio != -1)) {
HXLINE(1634)				if (::hx::IsNotNull( this->ratios )) {
HXLINE(1634)					_hx_tmp1 = (this->curRatio == (this->ratios->length - 1));
            				}
            				else {
HXLINE(1634)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE(1634)				_hx_tmp1 = true;
            			}
HXDLIN(1634)			if (_hx_tmp1) {
HXLINE(1635)				 ::zui::Zui _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1635)				_hx_tmp2->_y = (_hx_tmp2->_y + elementSize);
HXLINE(1637)				bool _hx_tmp3;
HXDLIN(1637)				if (::hx::IsNotNull( this->ratios )) {
HXLINE(1637)					_hx_tmp3 = (this->curRatio == (this->ratios->length - 1));
            				}
            				else {
HXLINE(1637)					_hx_tmp3 = false;
            				}
HXDLIN(1637)				if (_hx_tmp3) {
HXLINE(1638)					this->curRatio = -1;
HXLINE(1639)					this->_hx_set_ratios(HX_CTX, null());
HXLINE(1640)					this->_x = this->xBeforeSplit;
HXLINE(1641)					this->_w = this->wBeforeSplit;
HXLINE(1642)					this->highlightFullRow = false;
            				}
            			}
            			else {
HXLINE(1646)				this->curRatio++;
HXLINE(1647)				 ::zui::Zui _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1647)				_hx_tmp4->_x = (_hx_tmp4->_x + this->_w);
HXLINE(1648)				Float ratio = this->ratios->__get(this->curRatio);
HXDLIN(1648)				Float _hx_tmp5;
HXDLIN(1648)				if ((ratio < 0)) {
HXLINE(1648)					_hx_tmp5 = -(ratio);
            				}
            				else {
HXLINE(1648)					_hx_tmp5 = (ratio * ( (Float)(this->wBeforeSplit) ));
            				}
HXDLIN(1648)				this->_w = ::Std_obj::_hx_int(_hx_tmp5);
            			}
            		}
            		else {
HXLINE(1652)			 ::zui::Zui _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1652)			_hx_tmp6->_x = (_hx_tmp6->_x + (this->_w + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,endElement,(void))

void Zui_obj::highlightNextRow(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1660_highlightNextRow)
HXDLIN(1660)		this->highlightFullRow = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,highlightNextRow,(void))

Float Zui_obj::getRatio(Float ratio,Float dyn){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1664_getRatio)
HXDLIN(1664)		if ((ratio < 0)) {
HXDLIN(1664)			return -(ratio);
            		}
            		else {
HXDLIN(1664)			return (ratio * dyn);
            		}
HXDLIN(1664)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,getRatio,return )

void Zui_obj::row(::Array< Float > ratios){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1671_row)
HXLINE(1672)		this->_hx_set_ratios(HX_CTX, ratios);
HXLINE(1673)		this->curRatio = 0;
HXLINE(1674)		this->xBeforeSplit = this->_x;
HXLINE(1675)		this->wBeforeSplit = this->_w;
HXLINE(1676)		Float ratio = ratios->__get(this->curRatio);
HXDLIN(1676)		Float _hx_tmp;
HXDLIN(1676)		if ((ratio < 0)) {
HXLINE(1676)			_hx_tmp = -(ratio);
            		}
            		else {
HXLINE(1676)			_hx_tmp = (ratio * ( (Float)(this->_w) ));
            		}
HXDLIN(1676)		this->_w = ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,row,(void))

void Zui_obj::indent(::hx::Null< bool >  __o_bothSides){
            		bool bothSides = __o_bothSides.Default(true);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1679_indent)
HXLINE(1680)		 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1680)		Float _hx_tmp1 = _hx_tmp->_x;
HXDLIN(1680)		_hx_tmp->_x = (_hx_tmp1 + ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE(1681)		 ::zui::Zui _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1681)		int _hx_tmp3 = _hx_tmp2->_w;
HXDLIN(1681)		_hx_tmp2->_w = (_hx_tmp3 - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE(1682)		if (bothSides) {
HXLINE(1682)			 ::zui::Zui _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1682)			int _hx_tmp5 = _hx_tmp4->_w;
HXDLIN(1682)			_hx_tmp4->_w = (_hx_tmp5 - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,indent,(void))

void Zui_obj::unindent(::hx::Null< bool >  __o_bothSides){
            		bool bothSides = __o_bothSides.Default(true);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1685_unindent)
HXLINE(1686)		 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1686)		Float _hx_tmp1 = _hx_tmp->_x;
HXDLIN(1686)		_hx_tmp->_x = (_hx_tmp1 - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ));
HXLINE(1687)		 ::zui::Zui _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1687)		int _hx_tmp3 = _hx_tmp2->_w;
HXDLIN(1687)		_hx_tmp2->_w = (_hx_tmp3 + ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE(1688)		if (bothSides) {
HXLINE(1688)			 ::zui::Zui _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1688)			int _hx_tmp5 = _hx_tmp4->_w;
HXDLIN(1688)			_hx_tmp4->_w = (_hx_tmp5 + ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,unindent,(void))

void Zui_obj::fadeColor(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1692_fadeColor)
HXDLIN(1692)		 ::kha::graphics2::Graphics _hx_tmp = this->g;
HXDLIN(1692)		float _hx_tmp1 = (( (float)(::hx::UShr((this->g->get_color() & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN(1692)		float _hx_tmp2 = (( (float)(::hx::UShr((this->g->get_color() & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN(1692)		_hx_tmp->set_color(::kha::_Color::Color_Impl__obj::fromFloats(_hx_tmp1,_hx_tmp2,(( (float)((this->g->get_color() & 255)) ) * ( (float)(((Float)0.00392156862745098)) )),((Float)0.25)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,fadeColor,(void))

void Zui_obj::fill(Float x,Float y,Float w,Float h,int color){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1695_fill)
HXLINE(1696)		this->g->set_color(color);
HXLINE(1697)		if (!(this->enabled)) {
HXLINE(1697)			this->fadeColor();
            		}
HXLINE(1698)		this->g->fillRect((this->_x + (x * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),((this->_y + (y * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) - ( (Float)(1) )),(w * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(h * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE(1699)		this->g->set_color(-1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,fill,(void))

void Zui_obj::rect(Float x,Float y,Float w,Float h,int color,::hx::Null< Float >  __o_strength){
            		Float strength = __o_strength.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1702_rect)
HXLINE(1703)		this->g->set_color(color);
HXLINE(1704)		if (!(this->enabled)) {
HXLINE(1704)			this->fadeColor();
            		}
HXLINE(1705)		this->g->drawRect((this->_x + (x * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(this->_y + (y * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(w * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(h * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),strength);
HXLINE(1706)		this->g->set_color(-1);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Zui_obj,rect,(void))

void Zui_obj::drawRect( ::kha::graphics2::Graphics g,bool fill,Float x,Float y,Float w,Float h,::hx::Null< Float >  __o_strength){
            		Float strength = __o_strength.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1709_drawRect)
HXLINE(1710)		if ((strength == ((Float)0.0))) {
HXLINE(1710)			strength = ( (Float)(1) );
            		}
HXLINE(1711)		if (!(this->enabled)) {
HXLINE(1711)			this->fadeColor();
            		}
HXLINE(1712)		if (fill) {
HXLINE(1712)			g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            		}
            		else {
HXLINE(1712)			g->drawRect(x,y,w,h,strength);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Zui_obj,drawRect,(void))

bool Zui_obj::isVisible(Float elemH){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1715_isVisible)
HXLINE(1716)		if (::hx::IsNull( this->currentWindow )) {
HXLINE(1716)			return true;
            		}
HXLINE(1717)		if (((this->_y + elemH) > this->windowHeaderH)) {
HXLINE(1717)			Float _hx_tmp = this->_y;
HXDLIN(1717)			return (_hx_tmp < this->currentWindow->texture->get_height());
            		}
            		else {
HXLINE(1717)			return false;
            		}
HXDLIN(1717)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,isVisible,return )

bool Zui_obj::getReleased(::hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1720_getReleased)
HXLINE(1721)		bool _hx_tmp;
HXDLIN(1721)		bool _hx_tmp1;
HXDLIN(1721)		bool _hx_tmp2;
HXDLIN(1721)		bool _hx_tmp3;
HXDLIN(1721)		if (this->enabled) {
HXLINE(1721)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXLINE(1721)			_hx_tmp3 = false;
            		}
HXDLIN(1721)		if (_hx_tmp3) {
HXLINE(1721)			_hx_tmp2 = this->inputReleased;
            		}
            		else {
HXLINE(1721)			_hx_tmp2 = false;
            		}
HXDLIN(1721)		if (_hx_tmp2) {
HXLINE(1721)			_hx_tmp1 = this->getHover(elemH);
            		}
            		else {
HXLINE(1721)			_hx_tmp1 = false;
            		}
HXDLIN(1721)		if (_hx_tmp1) {
HXLINE(1721)			_hx_tmp = this->getInitialHover(elemH);
            		}
            		else {
HXLINE(1721)			_hx_tmp = false;
            		}
HXDLIN(1721)		this->isReleased = _hx_tmp;
HXLINE(1722)		return this->isReleased;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getReleased,return )

bool Zui_obj::getPushed(::hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1725_getPushed)
HXLINE(1726)		bool _hx_tmp;
HXDLIN(1726)		bool _hx_tmp1;
HXDLIN(1726)		bool _hx_tmp2;
HXDLIN(1726)		bool _hx_tmp3;
HXDLIN(1726)		if (this->enabled) {
HXLINE(1726)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXLINE(1726)			_hx_tmp3 = false;
            		}
HXDLIN(1726)		if (_hx_tmp3) {
HXLINE(1726)			_hx_tmp2 = this->inputDown;
            		}
            		else {
HXLINE(1726)			_hx_tmp2 = false;
            		}
HXDLIN(1726)		if (_hx_tmp2) {
HXLINE(1726)			_hx_tmp1 = this->getHover(elemH);
            		}
            		else {
HXLINE(1726)			_hx_tmp1 = false;
            		}
HXDLIN(1726)		if (_hx_tmp1) {
HXLINE(1726)			_hx_tmp = this->getInitialHover(elemH);
            		}
            		else {
HXLINE(1726)			_hx_tmp = false;
            		}
HXDLIN(1726)		this->isPushed = _hx_tmp;
HXLINE(1727)		return this->isPushed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getPushed,return )

bool Zui_obj::getStarted(::hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1730_getStarted)
HXLINE(1731)		bool _hx_tmp;
HXDLIN(1731)		bool _hx_tmp1;
HXDLIN(1731)		bool _hx_tmp2;
HXDLIN(1731)		if (this->enabled) {
HXLINE(1731)			_hx_tmp2 = this->inputEnabled;
            		}
            		else {
HXLINE(1731)			_hx_tmp2 = false;
            		}
HXDLIN(1731)		if (_hx_tmp2) {
HXLINE(1731)			_hx_tmp1 = this->inputStarted;
            		}
            		else {
HXLINE(1731)			_hx_tmp1 = false;
            		}
HXDLIN(1731)		if (_hx_tmp1) {
HXLINE(1731)			_hx_tmp = this->getHover(elemH);
            		}
            		else {
HXLINE(1731)			_hx_tmp = false;
            		}
HXDLIN(1731)		this->isStarted = _hx_tmp;
HXLINE(1732)		return this->isStarted;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getStarted,return )

bool Zui_obj::getInitialHover(::hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1735_getInitialHover)
HXLINE(1736)		bool _hx_tmp;
HXDLIN(1736)		if (this->scissor) {
HXLINE(1736)			_hx_tmp = (this->inputY < (this->_windowY + this->windowHeaderH));
            		}
            		else {
HXLINE(1736)			_hx_tmp = false;
            		}
HXDLIN(1736)		if (_hx_tmp) {
HXLINE(1736)			return false;
            		}
HXLINE(1737)		if ((elemH == ((Float)-1.0))) {
HXLINE(1737)			elemH = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            		}
HXLINE(1738)		bool _hx_tmp1;
HXDLIN(1738)		bool _hx_tmp2;
HXDLIN(1738)		bool _hx_tmp3;
HXDLIN(1738)		bool _hx_tmp4;
HXDLIN(1738)		if (this->enabled) {
HXLINE(1738)			_hx_tmp4 = this->inputEnabled;
            		}
            		else {
HXLINE(1738)			_hx_tmp4 = false;
            		}
HXDLIN(1738)		if (_hx_tmp4) {
HXLINE(1738)			_hx_tmp3 = (this->inputStartedX >= (this->_windowX + this->_x));
            		}
            		else {
HXLINE(1738)			_hx_tmp3 = false;
            		}
HXDLIN(1738)		if (_hx_tmp3) {
HXLINE(1738)			_hx_tmp2 = (this->inputStartedX < ((this->_windowX + this->_x) + this->_w));
            		}
            		else {
HXLINE(1738)			_hx_tmp2 = false;
            		}
HXDLIN(1738)		if (_hx_tmp2) {
HXLINE(1738)			_hx_tmp1 = (this->inputStartedY >= (this->_windowY + this->_y));
            		}
            		else {
HXLINE(1738)			_hx_tmp1 = false;
            		}
HXDLIN(1738)		if (_hx_tmp1) {
HXLINE(1740)			return (this->inputStartedY < ((this->_windowY + this->_y) + elemH));
            		}
            		else {
HXLINE(1738)			return false;
            		}
HXDLIN(1738)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getInitialHover,return )

bool Zui_obj::getHover(::hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1743_getHover)
HXLINE(1744)		bool _hx_tmp;
HXDLIN(1744)		if (this->scissor) {
HXLINE(1744)			_hx_tmp = (this->inputY < (this->_windowY + this->windowHeaderH));
            		}
            		else {
HXLINE(1744)			_hx_tmp = false;
            		}
HXDLIN(1744)		if (_hx_tmp) {
HXLINE(1744)			return false;
            		}
HXLINE(1745)		if ((elemH == ((Float)-1.0))) {
HXLINE(1745)			elemH = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            		}
HXLINE(1746)		bool _hx_tmp1;
HXDLIN(1746)		bool _hx_tmp2;
HXDLIN(1746)		bool _hx_tmp3;
HXDLIN(1746)		bool _hx_tmp4;
HXDLIN(1746)		bool _hx_tmp5;
HXDLIN(1746)		if (this->enabled) {
HXLINE(1746)			_hx_tmp5 = this->inputEnabled;
            		}
            		else {
HXLINE(1746)			_hx_tmp5 = false;
            		}
HXDLIN(1746)		if (_hx_tmp5) {
HXLINE(1747)			Float _hx_tmp6;
HXDLIN(1747)			if (this->highlightFullRow) {
HXLINE(1747)				_hx_tmp6 = ( (Float)(0) );
            			}
            			else {
HXLINE(1747)				_hx_tmp6 = this->_x;
            			}
HXLINE(1746)			_hx_tmp4 = (this->inputX >= (this->_windowX + _hx_tmp6));
            		}
            		else {
HXLINE(1746)			_hx_tmp4 = false;
            		}
HXDLIN(1746)		if (_hx_tmp4) {
HXLINE(1747)			Float _hx_tmp7;
HXDLIN(1747)			if (this->highlightFullRow) {
HXLINE(1747)				_hx_tmp7 = this->_windowW;
            			}
            			else {
HXLINE(1747)				_hx_tmp7 = ( (Float)(this->_w) );
            			}
HXLINE(1746)			_hx_tmp3 = (this->inputX < ((this->_windowX + this->_x) + _hx_tmp7));
            		}
            		else {
HXLINE(1746)			_hx_tmp3 = false;
            		}
HXDLIN(1746)		if (_hx_tmp3) {
HXLINE(1746)			_hx_tmp2 = (this->inputY >= (this->_windowY + this->_y));
            		}
            		else {
HXLINE(1746)			_hx_tmp2 = false;
            		}
HXDLIN(1746)		if (_hx_tmp2) {
HXLINE(1746)			_hx_tmp1 = (this->inputY < ((this->_windowY + this->_y) + elemH));
            		}
            		else {
HXLINE(1746)			_hx_tmp1 = false;
            		}
HXDLIN(1746)		this->isHovered = _hx_tmp1;
HXLINE(1749)		return this->isHovered;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getHover,return )

bool Zui_obj::getInputInRect(Float x,Float y,Float w,Float h,::hx::Null< Float >  __o_scale){
            		Float scale = __o_scale.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1753_getInputInRect)
HXDLIN(1753)		bool _hx_tmp;
HXDLIN(1753)		bool _hx_tmp1;
HXDLIN(1753)		bool _hx_tmp2;
HXDLIN(1753)		bool _hx_tmp3;
HXDLIN(1753)		if (this->enabled) {
HXDLIN(1753)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXDLIN(1753)			_hx_tmp3 = false;
            		}
HXDLIN(1753)		if (_hx_tmp3) {
HXDLIN(1753)			_hx_tmp2 = (this->inputX >= (x * scale));
            		}
            		else {
HXDLIN(1753)			_hx_tmp2 = false;
            		}
HXDLIN(1753)		if (_hx_tmp2) {
HXDLIN(1753)			_hx_tmp1 = (this->inputX < ((x + w) * scale));
            		}
            		else {
HXDLIN(1753)			_hx_tmp1 = false;
            		}
HXDLIN(1753)		if (_hx_tmp1) {
HXDLIN(1753)			_hx_tmp = (this->inputY >= (y * scale));
            		}
            		else {
HXDLIN(1753)			_hx_tmp = false;
            		}
HXDLIN(1753)		if (_hx_tmp) {
HXLINE(1755)			return (this->inputY < ((y + h) * scale));
            		}
            		else {
HXDLIN(1753)			return false;
            		}
HXDLIN(1753)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,getInputInRect,return )

void Zui_obj::onMouseDown(int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1758_onMouseDown)
HXLINE(1759)		if (this->penInUse) {
HXLINE(1759)			return;
            		}
HXLINE(1760)		if ((button == 0)) {
HXLINE(1760)			this->inputStarted = true;
            		}
            		else {
HXLINE(1760)			this->inputStartedR = true;
            		}
HXLINE(1761)		if ((button == 0)) {
HXLINE(1761)			this->inputDown = true;
            		}
            		else {
HXLINE(1761)			this->inputDownR = true;
            		}
HXLINE(1762)		this->inputStartedTime = ::kha::Scheduler_obj::time();
HXLINE(1766)		this->inputStartedX = ( (Float)(x) );
HXLINE(1767)		this->inputStartedY = ( (Float)(y) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onMouseDown,(void))

void Zui_obj::onMouseUp(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1770_onMouseUp)
HXLINE(1771)		if (this->penInUse) {
HXLINE(1771)			return;
            		}
HXLINE(1773)		if (this->touchHoldActivated) {
HXLINE(1774)			this->touchHoldActivated = false;
HXLINE(1775)			return;
            		}
HXLINE(1778)		if (this->isScrolling) {
HXLINE(1779)			this->isScrolling = false;
HXLINE(1780)			this->_hx_set_scrollHandle(HX_CTX, null());
HXLINE(1781)			this->sliderTooltip = false;
HXLINE(1782)			bool _hx_tmp;
HXDLIN(1782)			if ((x == this->inputStartedX)) {
HXLINE(1782)				_hx_tmp = (y == this->inputStartedY);
            			}
            			else {
HXLINE(1782)				_hx_tmp = false;
            			}
HXDLIN(1782)			if (_hx_tmp) {
HXLINE(1783)				if ((button == 0)) {
HXLINE(1783)					this->inputReleased = true;
            				}
            				else {
HXLINE(1783)					this->inputReleasedR = true;
            				}
            			}
            		}
            		else {
HXLINE(1787)			if ((button == 0)) {
HXLINE(1787)				this->inputReleased = true;
            			}
            			else {
HXLINE(1787)				this->inputReleasedR = true;
            			}
            		}
HXLINE(1789)		if ((button == 0)) {
HXLINE(1789)			this->inputDown = false;
            		}
            		else {
HXLINE(1789)			this->inputDownR = false;
            		}
HXLINE(1793)		this->deselectText();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onMouseUp,(void))

void Zui_obj::onMouseMove(int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1798_onMouseMove)
HXDLIN(1798)		this->setInputPosition(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,onMouseMove,(void))

void Zui_obj::onMouseWheel(int delta){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1803_onMouseWheel)
HXDLIN(1803)		this->inputWheelDelta = delta;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onMouseWheel,(void))

void Zui_obj::setInputPosition(int x,int y){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1806_setInputPosition)
HXLINE(1807)		 ::zui::Zui _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1807)		_hx_tmp->inputDX = (_hx_tmp->inputDX + (( (Float)(x) ) - this->inputX));
HXLINE(1808)		 ::zui::Zui _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1808)		_hx_tmp1->inputDY = (_hx_tmp1->inputDY + (( (Float)(y) ) - this->inputY));
HXLINE(1809)		this->inputX = ( (Float)(x) );
HXLINE(1810)		this->inputY = ( (Float)(y) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,setInputPosition,(void))

void Zui_obj::onPenDown(int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1818_onPenDown)
HXDLIN(1818)		this->onMouseDown(0,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onPenDown,(void))

void Zui_obj::onPenUp(int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1821_onPenUp)
HXLINE(1826)		if (this->inputStarted) {
HXLINE(1826)			this->inputStarted = false;
HXDLIN(1826)			this->penInUse = true;
HXDLIN(1826)			return;
            		}
HXLINE(1827)		this->onMouseUp(0,x,y);
HXLINE(1828)		this->penInUse = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onPenUp,(void))

void Zui_obj::onPenMove(int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1836_onPenMove)
HXDLIN(1836)		this->onMouseMove(x,y,0,0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onPenMove,(void))

void Zui_obj::onKeyDown(int code){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1839_onKeyDown)
HXLINE(1840)		this->_hx_set_key(HX_CTX, code);
HXLINE(1841)		this->isKeyPressed = true;
HXLINE(1842)		this->isKeyDown = true;
HXLINE(1843)		::zui::Zui_obj::keyRepeatTime = (::kha::Scheduler_obj::time() + ((Float)0.4));
HXLINE(1844)		switch((int)(code)){
            			case (int)8: {
HXLINE(1851)				this->isBackspaceDown = true;
            			}
            			break;
            			case (int)9: {
HXLINE(1855)				this->isTabDown = true;
            			}
            			break;
            			case (int)13: {
HXLINE(1854)				this->isReturnDown = true;
            			}
            			break;
            			case (int)16: {
HXLINE(1845)				this->isShiftDown = true;
            			}
            			break;
            			case (int)17: {
HXLINE(1846)				this->isCtrlDown = true;
            			}
            			break;
            			case (int)18: {
HXLINE(1850)				this->isAltDown = true;
            			}
            			break;
            			case (int)27: {
HXLINE(1853)				this->isEscapeDown = true;
            			}
            			break;
            			case (int)32: {
HXLINE(1857)				this->_hx_set__hx_char(HX_CTX, HX_(" ",20,00,00,00));
            			}
            			break;
            			case (int)46: {
HXLINE(1852)				this->isDeleteDown = true;
            			}
            			break;
            			case (int)65: {
HXLINE(1856)				this->isADown = true;
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onKeyDown,(void))

void Zui_obj::onKeyUp(int code){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1865_onKeyUp)
HXLINE(1866)		this->isKeyDown = false;
HXLINE(1867)		switch((int)(code)){
            			case (int)8: {
HXLINE(1874)				this->isBackspaceDown = false;
            			}
            			break;
            			case (int)9: {
HXLINE(1878)				this->isTabDown = false;
            			}
            			break;
            			case (int)13: {
HXLINE(1877)				this->isReturnDown = false;
            			}
            			break;
            			case (int)16: {
HXLINE(1868)				this->isShiftDown = false;
            			}
            			break;
            			case (int)17: {
HXLINE(1869)				this->isCtrlDown = false;
            			}
            			break;
            			case (int)18: {
HXLINE(1873)				this->isAltDown = false;
            			}
            			break;
            			case (int)27: {
HXLINE(1876)				this->isEscapeDown = false;
            			}
            			break;
            			case (int)46: {
HXLINE(1875)				this->isDeleteDown = false;
            			}
            			break;
            			case (int)65: {
HXLINE(1879)				this->isADown = false;
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onKeyUp,(void))

void Zui_obj::onKeyPress(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1887_onKeyPress)
HXLINE(1888)		this->_hx_set__hx_char(HX_CTX, _hx_char);
HXLINE(1889)		this->isKeyPressed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onKeyPress,(void))

::String Zui_obj::onCut(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1945_onCut)
HXLINE(1946)		::zui::Zui_obj::isCut = true;
HXLINE(1947)		return this->onCopy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,onCut,return )

::String Zui_obj::onCopy(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1949_onCopy)
HXLINE(1950)		::zui::Zui_obj::isCopy = true;
HXLINE(1951)		return ::zui::Zui_obj::textToCopy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,onCopy,return )

void Zui_obj::onPaste(::String s){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1953_onPaste)
HXLINE(1954)		::zui::Zui_obj::isPaste = true;
HXLINE(1955)		::zui::Zui_obj::textToPaste = s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onPaste,(void))

Float Zui_obj::ELEMENT_W(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1959_ELEMENT_W)
HXDLIN(1959)		return (( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ELEMENT_W,return )

Float Zui_obj::ELEMENT_H(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1962_ELEMENT_H)
HXDLIN(1962)		return (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ELEMENT_H,return )

Float Zui_obj::ELEMENT_OFFSET(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1965_ELEMENT_OFFSET)
HXDLIN(1965)		return (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ELEMENT_OFFSET,return )

Float Zui_obj::ARROW_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1968_ARROW_SIZE)
HXDLIN(1968)		return (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ARROW_SIZE,return )

Float Zui_obj::BUTTON_H(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1971_BUTTON_H)
HXDLIN(1971)		return (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,BUTTON_H,return )

Float Zui_obj::CHECK_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1974_CHECK_SIZE)
HXDLIN(1974)		return (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,CHECK_SIZE,return )

Float Zui_obj::CHECK_SELECT_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1977_CHECK_SELECT_SIZE)
HXDLIN(1977)		return (( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,CHECK_SELECT_SIZE,return )

int Zui_obj::FONT_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1980_FONT_SIZE)
HXDLIN(1980)		return ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("FONT_SIZE",71,f0,3d,80),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,FONT_SIZE,return )

int Zui_obj::SCROLL_W(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1983_SCROLL_W)
HXDLIN(1983)		return ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,SCROLL_W,return )

Float Zui_obj::TEXT_OFFSET(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1986_TEXT_OFFSET)
HXDLIN(1986)		return (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,TEXT_OFFSET,return )

int Zui_obj::TAB_W(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1989_TAB_W)
HXDLIN(1989)		return ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),::hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,TAB_W,return )

int Zui_obj::HEADER_DRAG_H(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1992_HEADER_DRAG_H)
HXDLIN(1992)		return ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,HEADER_DRAG_H,return )

Float Zui_obj::SCALE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1995_SCALE)
HXDLIN(1995)		return ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,SCALE,return )

Float Zui_obj::TOOLTIP_DELAY(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1998_TOOLTIP_DELAY)
HXDLIN(1998)		return ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,TOOLTIP_DELAY,return )

void Zui_obj::resize( ::zui::Handle handle,int w,int h){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_2001_resize)
HXLINE(2002)		handle->redraws = 2;
HXLINE(2003)		if (::hx::IsNotNull( handle->texture )) {
HXLINE(2003)			handle->texture->unload();
            		}
HXLINE(2004)		if ((w < 1)) {
HXLINE(2004)			w = 1;
            		}
HXLINE(2005)		if ((h < 1)) {
HXLINE(2005)			h = 1;
            		}
HXLINE(2006)		handle->_hx_set_texture(HX_CTX, ::kha::Image_obj::createRenderTarget(w,h,0,0,1));
HXLINE(2007)		handle->texture->get_g2()->set_imageScaleQuality(1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,resize,(void))

 ::zui::Zui Zui_obj::current;

 ::Dynamic Zui_obj::onBorderHover;

 ::Dynamic Zui_obj::onTextHover;

 ::Dynamic Zui_obj::onDeselectText;

bool Zui_obj::alwaysRedrawWindow;

bool Zui_obj::keyRepeat;

bool Zui_obj::dynamicGlyphLoad;

bool Zui_obj::touchScroll;

bool Zui_obj::touchHold;

bool Zui_obj::touchTooltip;

Float Zui_obj::keyRepeatTime;

::String Zui_obj::textToPaste;

::String Zui_obj::textToCopy;

bool Zui_obj::isCut;

bool Zui_obj::isCopy;

bool Zui_obj::isPaste;

 ::zui::Zui Zui_obj::copyReceiver;

int Zui_obj::copyFrame;

bool Zui_obj::comboFirst;

 ::Dynamic Zui_obj::extractColoring(::String text, ::Dynamic col){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1587_extractColoring)
HXLINE(1588)		 ::Dynamic res =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("uncolored",49,2f,68,eb),HX_("",00,00,00,00))
            			->setFixed(1,HX_("colored",82,28,66,ef),HX_("",00,00,00,00)));
HXLINE(1589)		bool coloring = false;
HXLINE(1590)		int startFrom = 0;
HXLINE(1591)		int startLength = 0;
HXLINE(1592)		{
HXLINE(1592)			int _g = 0;
HXDLIN(1592)			int _g1 = text.length;
HXDLIN(1592)			while((_g < _g1)){
HXLINE(1592)				_g = (_g + 1);
HXDLIN(1592)				int i = (_g - 1);
HXLINE(1593)				bool skipFirst = false;
HXLINE(1595)				int length = ::zui::Zui_obj::checkStart(i,text,( (::Array< ::String >)(col->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) ));
HXLINE(1597)				bool separatedLeft;
HXDLIN(1597)				if ((i != 0)) {
HXLINE(1597)					int code = ( (int)(text.charCodeAt((i - 1))) );
HXDLIN(1597)					bool separatedLeft1;
HXDLIN(1597)					bool separatedLeft2;
HXDLIN(1597)					if ((code >= 65)) {
HXLINE(1597)						separatedLeft2 = (code <= 90);
            					}
            					else {
HXLINE(1597)						separatedLeft2 = false;
            					}
HXDLIN(1597)					if (!(separatedLeft2)) {
HXLINE(1597)						if ((code >= 97)) {
HXLINE(1597)							separatedLeft1 = (code <= 122);
            						}
            						else {
HXLINE(1597)							separatedLeft1 = false;
            						}
            					}
            					else {
HXLINE(1597)						separatedLeft1 = true;
            					}
HXDLIN(1597)					separatedLeft = !(separatedLeft1);
            				}
            				else {
HXLINE(1597)					separatedLeft = true;
            				}
HXLINE(1598)				bool separatedRight;
HXDLIN(1598)				if (((i + length) < text.length)) {
HXLINE(1598)					int code1 = ( (int)(text.charCodeAt((i + length))) );
HXDLIN(1598)					bool separatedRight1;
HXDLIN(1598)					bool separatedRight2;
HXDLIN(1598)					if ((code1 >= 65)) {
HXLINE(1598)						separatedRight2 = (code1 <= 90);
            					}
            					else {
HXLINE(1598)						separatedRight2 = false;
            					}
HXDLIN(1598)					if (!(separatedRight2)) {
HXLINE(1598)						if ((code1 >= 97)) {
HXLINE(1598)							separatedRight1 = (code1 <= 122);
            						}
            						else {
HXLINE(1598)							separatedRight1 = false;
            						}
            					}
            					else {
HXLINE(1598)						separatedRight1 = true;
            					}
HXDLIN(1598)					separatedRight = !(separatedRight1);
            				}
            				else {
HXLINE(1598)					separatedRight = true;
            				}
HXLINE(1599)				bool isSeparated;
HXDLIN(1599)				if (separatedLeft) {
HXLINE(1599)					isSeparated = separatedRight;
            				}
            				else {
HXLINE(1599)					isSeparated = false;
            				}
HXLINE(1601)				bool _hx_tmp;
HXDLIN(1601)				bool _hx_tmp1;
HXDLIN(1601)				if ((length > 0)) {
HXLINE(1601)					if (coloring) {
HXLINE(1601)						_hx_tmp1 = ::hx::IsEq( col->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic),HX_("",00,00,00,00) );
            					}
            					else {
HXLINE(1601)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(1601)					_hx_tmp1 = false;
            				}
HXDLIN(1601)				if (_hx_tmp1) {
HXLINE(1601)					if (!(!(( (bool)(col->__Field(HX_("separated",a1,57,7f,31),::hx::paccDynamic)) )))) {
HXLINE(1601)						_hx_tmp = isSeparated;
            					}
            					else {
HXLINE(1601)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(1601)					_hx_tmp = false;
            				}
HXDLIN(1601)				if (_hx_tmp) {
HXLINE(1602)					coloring = true;
HXLINE(1603)					startFrom = i;
HXLINE(1604)					startLength = length;
HXLINE(1605)					bool _hx_tmp2;
HXDLIN(1605)					if (::hx::IsNotEq( col->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(1605)						_hx_tmp2 = ::hx::IsNotEq( col->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic),HX_("\n",0a,00,00,00) );
            					}
            					else {
HXLINE(1605)						_hx_tmp2 = false;
            					}
HXDLIN(1605)					if (_hx_tmp2) {
HXLINE(1605)						skipFirst = true;
            					}
            				}
            				else {
HXLINE(1608)					if (::hx::IsEq( col->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(1609)						if ((i == (startFrom + startLength))) {
HXLINE(1609)							coloring = false;
            						}
            					}
            					else {
HXLINE(1611)						::String _hx_tmp3 = text.substr(i,( (::String)(col->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic)) ).length);
HXDLIN(1611)						if (::hx::IsEq( _hx_tmp3,col->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic) )) {
HXLINE(1612)							coloring = false;
            						}
            					}
            				}
HXLINE(1615)				bool b;
HXDLIN(1615)				if (coloring) {
HXLINE(1615)					b = !(skipFirst);
            				}
            				else {
HXLINE(1615)					b = false;
            				}
HXLINE(1616)				 ::Dynamic res1 = res;
HXDLIN(1616)				::String res2 = ( (::String)(res1->__Field(HX_("colored",82,28,66,ef),::hx::paccDynamic)) );
HXDLIN(1616)				::String _hx_tmp4;
HXDLIN(1616)				if (b) {
HXLINE(1616)					_hx_tmp4 = text.charAt(i);
            				}
            				else {
HXLINE(1616)					_hx_tmp4 = HX_(" ",20,00,00,00);
            				}
HXDLIN(1616)				res1->__SetField(HX_("colored",82,28,66,ef),(res2 + _hx_tmp4),::hx::paccDynamic);
HXLINE(1617)				 ::Dynamic res3 = res;
HXDLIN(1617)				::String res4 = ( (::String)(res3->__Field(HX_("uncolored",49,2f,68,eb),::hx::paccDynamic)) );
HXDLIN(1617)				::String _hx_tmp5;
HXDLIN(1617)				if (b) {
HXLINE(1617)					_hx_tmp5 = HX_(" ",20,00,00,00);
            				}
            				else {
HXLINE(1617)					_hx_tmp5 = text.charAt(i);
            				}
HXDLIN(1617)				res3->__SetField(HX_("uncolored",49,2f,68,eb),(res4 + _hx_tmp5),::hx::paccDynamic);
            			}
            		}
HXLINE(1619)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,extractColoring,return )

bool Zui_obj::isChar(int code){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1623_isChar)
HXDLIN(1623)		bool _hx_tmp;
HXDLIN(1623)		if ((code >= 65)) {
HXDLIN(1623)			_hx_tmp = (code <= 90);
            		}
            		else {
HXDLIN(1623)			_hx_tmp = false;
            		}
HXDLIN(1623)		if (!(_hx_tmp)) {
HXDLIN(1623)			if ((code >= 97)) {
HXDLIN(1623)				return (code <= 122);
            			}
            			else {
HXDLIN(1623)				return false;
            			}
            		}
            		else {
HXDLIN(1623)			return true;
            		}
HXDLIN(1623)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,isChar,return )

int Zui_obj::checkStart(int i,::String text,::Array< ::String > start){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1626_checkStart)
HXLINE(1627)		{
HXLINE(1627)			int _g = 0;
HXDLIN(1627)			while((_g < start->length)){
HXLINE(1627)				::String s = start->__get(_g);
HXDLIN(1627)				_g = (_g + 1);
HXDLIN(1627)				if ((text.substr(i,s.length) == s)) {
HXLINE(1627)					return s.length;
            				}
            			}
            		}
HXLINE(1628)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,checkStart,return )


::hx::ObjectPtr< Zui_obj > Zui_obj::__new( ::Dynamic ops) {
	::hx::ObjectPtr< Zui_obj > __this = new Zui_obj();
	__this->__construct(ops);
	return __this;
}

::hx::ObjectPtr< Zui_obj > Zui_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic ops) {
	Zui_obj *__this = (Zui_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Zui_obj), true, "zui.Zui"));
	*(void **)__this = Zui_obj::_hx_vtable;
	__this->__construct(ops);
	return __this;
}

Zui_obj::Zui_obj()
{
}

void Zui_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Zui);
	HX_MARK_MEMBER_NAME(isScrolling,"isScrolling");
	HX_MARK_MEMBER_NAME(isTyping,"isTyping");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(isStarted,"isStarted");
	HX_MARK_MEMBER_NAME(isPushed,"isPushed");
	HX_MARK_MEMBER_NAME(isHovered,"isHovered");
	HX_MARK_MEMBER_NAME(isReleased,"isReleased");
	HX_MARK_MEMBER_NAME(changed,"changed");
	HX_MARK_MEMBER_NAME(imageInvertY,"imageInvertY");
	HX_MARK_MEMBER_NAME(scrollEnabled,"scrollEnabled");
	HX_MARK_MEMBER_NAME(alwaysRedraw,"alwaysRedraw");
	HX_MARK_MEMBER_NAME(highlightOnSelect,"highlightOnSelect");
	HX_MARK_MEMBER_NAME(tabSwitchEnabled,"tabSwitchEnabled");
	HX_MARK_MEMBER_NAME(textColoring,"textColoring");
	HX_MARK_MEMBER_NAME(windowBorderTop,"windowBorderTop");
	HX_MARK_MEMBER_NAME(windowBorderBottom,"windowBorderBottom");
	HX_MARK_MEMBER_NAME(windowBorderLeft,"windowBorderLeft");
	HX_MARK_MEMBER_NAME(windowBorderRight,"windowBorderRight");
	HX_MARK_MEMBER_NAME(highlightFullRow,"highlightFullRow");
	HX_MARK_MEMBER_NAME(touchHoldActivated,"touchHoldActivated");
	HX_MARK_MEMBER_NAME(sliderTooltip,"sliderTooltip");
	HX_MARK_MEMBER_NAME(sliderTooltipX,"sliderTooltipX");
	HX_MARK_MEMBER_NAME(sliderTooltipY,"sliderTooltipY");
	HX_MARK_MEMBER_NAME(sliderTooltipW,"sliderTooltipW");
	HX_MARK_MEMBER_NAME(inputRegistered,"inputRegistered");
	HX_MARK_MEMBER_NAME(inputEnabled,"inputEnabled");
	HX_MARK_MEMBER_NAME(inputX,"inputX");
	HX_MARK_MEMBER_NAME(inputY,"inputY");
	HX_MARK_MEMBER_NAME(inputStartedX,"inputStartedX");
	HX_MARK_MEMBER_NAME(inputStartedY,"inputStartedY");
	HX_MARK_MEMBER_NAME(inputDX,"inputDX");
	HX_MARK_MEMBER_NAME(inputDY,"inputDY");
	HX_MARK_MEMBER_NAME(inputWheelDelta,"inputWheelDelta");
	HX_MARK_MEMBER_NAME(inputStarted,"inputStarted");
	HX_MARK_MEMBER_NAME(inputStartedR,"inputStartedR");
	HX_MARK_MEMBER_NAME(inputReleased,"inputReleased");
	HX_MARK_MEMBER_NAME(inputReleasedR,"inputReleasedR");
	HX_MARK_MEMBER_NAME(inputDown,"inputDown");
	HX_MARK_MEMBER_NAME(inputDownR,"inputDownR");
	HX_MARK_MEMBER_NAME(penInUse,"penInUse");
	HX_MARK_MEMBER_NAME(isKeyPressed,"isKeyPressed");
	HX_MARK_MEMBER_NAME(isKeyDown,"isKeyDown");
	HX_MARK_MEMBER_NAME(isShiftDown,"isShiftDown");
	HX_MARK_MEMBER_NAME(isCtrlDown,"isCtrlDown");
	HX_MARK_MEMBER_NAME(isAltDown,"isAltDown");
	HX_MARK_MEMBER_NAME(isADown,"isADown");
	HX_MARK_MEMBER_NAME(isBackspaceDown,"isBackspaceDown");
	HX_MARK_MEMBER_NAME(isDeleteDown,"isDeleteDown");
	HX_MARK_MEMBER_NAME(isEscapeDown,"isEscapeDown");
	HX_MARK_MEMBER_NAME(isReturnDown,"isReturnDown");
	HX_MARK_MEMBER_NAME(isTabDown,"isTabDown");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(inputStartedTime,"inputStartedTime");
	HX_MARK_MEMBER_NAME(cursorX,"cursorX");
	HX_MARK_MEMBER_NAME(highlightAnchor,"highlightAnchor");
	HX_MARK_MEMBER_NAME(ratios,"ratios");
	HX_MARK_MEMBER_NAME(curRatio,"curRatio");
	HX_MARK_MEMBER_NAME(xBeforeSplit,"xBeforeSplit");
	HX_MARK_MEMBER_NAME(wBeforeSplit,"wBeforeSplit");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(globalG,"globalG");
	HX_MARK_MEMBER_NAME(rtTextPipeline,"rtTextPipeline");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(fontOffsetY,"fontOffsetY");
	HX_MARK_MEMBER_NAME(arrowOffsetX,"arrowOffsetX");
	HX_MARK_MEMBER_NAME(arrowOffsetY,"arrowOffsetY");
	HX_MARK_MEMBER_NAME(titleOffsetX,"titleOffsetX");
	HX_MARK_MEMBER_NAME(buttonOffsetY,"buttonOffsetY");
	HX_MARK_MEMBER_NAME(checkOffsetX,"checkOffsetX");
	HX_MARK_MEMBER_NAME(checkOffsetY,"checkOffsetY");
	HX_MARK_MEMBER_NAME(checkSelectOffsetX,"checkSelectOffsetX");
	HX_MARK_MEMBER_NAME(checkSelectOffsetY,"checkSelectOffsetY");
	HX_MARK_MEMBER_NAME(radioOffsetX,"radioOffsetX");
	HX_MARK_MEMBER_NAME(radioOffsetY,"radioOffsetY");
	HX_MARK_MEMBER_NAME(radioSelectOffsetX,"radioSelectOffsetX");
	HX_MARK_MEMBER_NAME(radioSelectOffsetY,"radioSelectOffsetY");
	HX_MARK_MEMBER_NAME(scrollAlign,"scrollAlign");
	HX_MARK_MEMBER_NAME(imageScrollAlign,"imageScrollAlign");
	HX_MARK_MEMBER_NAME(_x,"_x");
	HX_MARK_MEMBER_NAME(_y,"_y");
	HX_MARK_MEMBER_NAME(_w,"_w");
	HX_MARK_MEMBER_NAME(_h,"_h");
	HX_MARK_MEMBER_NAME(_windowX,"_windowX");
	HX_MARK_MEMBER_NAME(_windowY,"_windowY");
	HX_MARK_MEMBER_NAME(_windowW,"_windowW");
	HX_MARK_MEMBER_NAME(_windowH,"_windowH");
	HX_MARK_MEMBER_NAME(currentWindow,"currentWindow");
	HX_MARK_MEMBER_NAME(windowEnded,"windowEnded");
	HX_MARK_MEMBER_NAME(scrollHandle,"scrollHandle");
	HX_MARK_MEMBER_NAME(dragHandle,"dragHandle");
	HX_MARK_MEMBER_NAME(windowHeaderW,"windowHeaderW");
	HX_MARK_MEMBER_NAME(windowHeaderH,"windowHeaderH");
	HX_MARK_MEMBER_NAME(restoreX,"restoreX");
	HX_MARK_MEMBER_NAME(restoreY,"restoreY");
	HX_MARK_MEMBER_NAME(textSelectedHandle,"textSelectedHandle");
	HX_MARK_MEMBER_NAME(textSelected,"textSelected");
	HX_MARK_MEMBER_NAME(submitTextHandle,"submitTextHandle");
	HX_MARK_MEMBER_NAME(textToSubmit,"textToSubmit");
	HX_MARK_MEMBER_NAME(tabPressed,"tabPressed");
	HX_MARK_MEMBER_NAME(tabPressedHandle,"tabPressedHandle");
	HX_MARK_MEMBER_NAME(comboSelectedHandle,"comboSelectedHandle");
	HX_MARK_MEMBER_NAME(comboSelectedWindow,"comboSelectedWindow");
	HX_MARK_MEMBER_NAME(comboSelectedAlign,"comboSelectedAlign");
	HX_MARK_MEMBER_NAME(comboSelectedTexts,"comboSelectedTexts");
	HX_MARK_MEMBER_NAME(comboSelectedLabel,"comboSelectedLabel");
	HX_MARK_MEMBER_NAME(comboSelectedX,"comboSelectedX");
	HX_MARK_MEMBER_NAME(comboSelectedY,"comboSelectedY");
	HX_MARK_MEMBER_NAME(comboSelectedW,"comboSelectedW");
	HX_MARK_MEMBER_NAME(comboSearchBar,"comboSearchBar");
	HX_MARK_MEMBER_NAME(submitComboHandle,"submitComboHandle");
	HX_MARK_MEMBER_NAME(comboToSubmit,"comboToSubmit");
	HX_MARK_MEMBER_NAME(comboInitialValue,"comboInitialValue");
	HX_MARK_MEMBER_NAME(tooltipText,"tooltipText");
	HX_MARK_MEMBER_NAME(tooltipImg,"tooltipImg");
	HX_MARK_MEMBER_NAME(tooltipImgMaxWidth,"tooltipImgMaxWidth");
	HX_MARK_MEMBER_NAME(tooltipInvertY,"tooltipInvertY");
	HX_MARK_MEMBER_NAME(tooltipX,"tooltipX");
	HX_MARK_MEMBER_NAME(tooltipY,"tooltipY");
	HX_MARK_MEMBER_NAME(tooltipShown,"tooltipShown");
	HX_MARK_MEMBER_NAME(tooltipWait,"tooltipWait");
	HX_MARK_MEMBER_NAME(tooltipTime,"tooltipTime");
	HX_MARK_MEMBER_NAME(tabNames,"tabNames");
	HX_MARK_MEMBER_NAME(tabColors,"tabColors");
	HX_MARK_MEMBER_NAME(tabHandle,"tabHandle");
	HX_MARK_MEMBER_NAME(tabScroll,"tabScroll");
	HX_MARK_MEMBER_NAME(tabVertical,"tabVertical");
	HX_MARK_MEMBER_NAME(sticky,"sticky");
	HX_MARK_MEMBER_NAME(scissor,"scissor");
	HX_MARK_MEMBER_NAME(elementsBaked,"elementsBaked");
	HX_MARK_MEMBER_NAME(checkSelectImage,"checkSelectImage");
	HX_MARK_END_CLASS();
}

void Zui_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isScrolling,"isScrolling");
	HX_VISIT_MEMBER_NAME(isTyping,"isTyping");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(isStarted,"isStarted");
	HX_VISIT_MEMBER_NAME(isPushed,"isPushed");
	HX_VISIT_MEMBER_NAME(isHovered,"isHovered");
	HX_VISIT_MEMBER_NAME(isReleased,"isReleased");
	HX_VISIT_MEMBER_NAME(changed,"changed");
	HX_VISIT_MEMBER_NAME(imageInvertY,"imageInvertY");
	HX_VISIT_MEMBER_NAME(scrollEnabled,"scrollEnabled");
	HX_VISIT_MEMBER_NAME(alwaysRedraw,"alwaysRedraw");
	HX_VISIT_MEMBER_NAME(highlightOnSelect,"highlightOnSelect");
	HX_VISIT_MEMBER_NAME(tabSwitchEnabled,"tabSwitchEnabled");
	HX_VISIT_MEMBER_NAME(textColoring,"textColoring");
	HX_VISIT_MEMBER_NAME(windowBorderTop,"windowBorderTop");
	HX_VISIT_MEMBER_NAME(windowBorderBottom,"windowBorderBottom");
	HX_VISIT_MEMBER_NAME(windowBorderLeft,"windowBorderLeft");
	HX_VISIT_MEMBER_NAME(windowBorderRight,"windowBorderRight");
	HX_VISIT_MEMBER_NAME(highlightFullRow,"highlightFullRow");
	HX_VISIT_MEMBER_NAME(touchHoldActivated,"touchHoldActivated");
	HX_VISIT_MEMBER_NAME(sliderTooltip,"sliderTooltip");
	HX_VISIT_MEMBER_NAME(sliderTooltipX,"sliderTooltipX");
	HX_VISIT_MEMBER_NAME(sliderTooltipY,"sliderTooltipY");
	HX_VISIT_MEMBER_NAME(sliderTooltipW,"sliderTooltipW");
	HX_VISIT_MEMBER_NAME(inputRegistered,"inputRegistered");
	HX_VISIT_MEMBER_NAME(inputEnabled,"inputEnabled");
	HX_VISIT_MEMBER_NAME(inputX,"inputX");
	HX_VISIT_MEMBER_NAME(inputY,"inputY");
	HX_VISIT_MEMBER_NAME(inputStartedX,"inputStartedX");
	HX_VISIT_MEMBER_NAME(inputStartedY,"inputStartedY");
	HX_VISIT_MEMBER_NAME(inputDX,"inputDX");
	HX_VISIT_MEMBER_NAME(inputDY,"inputDY");
	HX_VISIT_MEMBER_NAME(inputWheelDelta,"inputWheelDelta");
	HX_VISIT_MEMBER_NAME(inputStarted,"inputStarted");
	HX_VISIT_MEMBER_NAME(inputStartedR,"inputStartedR");
	HX_VISIT_MEMBER_NAME(inputReleased,"inputReleased");
	HX_VISIT_MEMBER_NAME(inputReleasedR,"inputReleasedR");
	HX_VISIT_MEMBER_NAME(inputDown,"inputDown");
	HX_VISIT_MEMBER_NAME(inputDownR,"inputDownR");
	HX_VISIT_MEMBER_NAME(penInUse,"penInUse");
	HX_VISIT_MEMBER_NAME(isKeyPressed,"isKeyPressed");
	HX_VISIT_MEMBER_NAME(isKeyDown,"isKeyDown");
	HX_VISIT_MEMBER_NAME(isShiftDown,"isShiftDown");
	HX_VISIT_MEMBER_NAME(isCtrlDown,"isCtrlDown");
	HX_VISIT_MEMBER_NAME(isAltDown,"isAltDown");
	HX_VISIT_MEMBER_NAME(isADown,"isADown");
	HX_VISIT_MEMBER_NAME(isBackspaceDown,"isBackspaceDown");
	HX_VISIT_MEMBER_NAME(isDeleteDown,"isDeleteDown");
	HX_VISIT_MEMBER_NAME(isEscapeDown,"isEscapeDown");
	HX_VISIT_MEMBER_NAME(isReturnDown,"isReturnDown");
	HX_VISIT_MEMBER_NAME(isTabDown,"isTabDown");
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(inputStartedTime,"inputStartedTime");
	HX_VISIT_MEMBER_NAME(cursorX,"cursorX");
	HX_VISIT_MEMBER_NAME(highlightAnchor,"highlightAnchor");
	HX_VISIT_MEMBER_NAME(ratios,"ratios");
	HX_VISIT_MEMBER_NAME(curRatio,"curRatio");
	HX_VISIT_MEMBER_NAME(xBeforeSplit,"xBeforeSplit");
	HX_VISIT_MEMBER_NAME(wBeforeSplit,"wBeforeSplit");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(t,"t");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(globalG,"globalG");
	HX_VISIT_MEMBER_NAME(rtTextPipeline,"rtTextPipeline");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(fontOffsetY,"fontOffsetY");
	HX_VISIT_MEMBER_NAME(arrowOffsetX,"arrowOffsetX");
	HX_VISIT_MEMBER_NAME(arrowOffsetY,"arrowOffsetY");
	HX_VISIT_MEMBER_NAME(titleOffsetX,"titleOffsetX");
	HX_VISIT_MEMBER_NAME(buttonOffsetY,"buttonOffsetY");
	HX_VISIT_MEMBER_NAME(checkOffsetX,"checkOffsetX");
	HX_VISIT_MEMBER_NAME(checkOffsetY,"checkOffsetY");
	HX_VISIT_MEMBER_NAME(checkSelectOffsetX,"checkSelectOffsetX");
	HX_VISIT_MEMBER_NAME(checkSelectOffsetY,"checkSelectOffsetY");
	HX_VISIT_MEMBER_NAME(radioOffsetX,"radioOffsetX");
	HX_VISIT_MEMBER_NAME(radioOffsetY,"radioOffsetY");
	HX_VISIT_MEMBER_NAME(radioSelectOffsetX,"radioSelectOffsetX");
	HX_VISIT_MEMBER_NAME(radioSelectOffsetY,"radioSelectOffsetY");
	HX_VISIT_MEMBER_NAME(scrollAlign,"scrollAlign");
	HX_VISIT_MEMBER_NAME(imageScrollAlign,"imageScrollAlign");
	HX_VISIT_MEMBER_NAME(_x,"_x");
	HX_VISIT_MEMBER_NAME(_y,"_y");
	HX_VISIT_MEMBER_NAME(_w,"_w");
	HX_VISIT_MEMBER_NAME(_h,"_h");
	HX_VISIT_MEMBER_NAME(_windowX,"_windowX");
	HX_VISIT_MEMBER_NAME(_windowY,"_windowY");
	HX_VISIT_MEMBER_NAME(_windowW,"_windowW");
	HX_VISIT_MEMBER_NAME(_windowH,"_windowH");
	HX_VISIT_MEMBER_NAME(currentWindow,"currentWindow");
	HX_VISIT_MEMBER_NAME(windowEnded,"windowEnded");
	HX_VISIT_MEMBER_NAME(scrollHandle,"scrollHandle");
	HX_VISIT_MEMBER_NAME(dragHandle,"dragHandle");
	HX_VISIT_MEMBER_NAME(windowHeaderW,"windowHeaderW");
	HX_VISIT_MEMBER_NAME(windowHeaderH,"windowHeaderH");
	HX_VISIT_MEMBER_NAME(restoreX,"restoreX");
	HX_VISIT_MEMBER_NAME(restoreY,"restoreY");
	HX_VISIT_MEMBER_NAME(textSelectedHandle,"textSelectedHandle");
	HX_VISIT_MEMBER_NAME(textSelected,"textSelected");
	HX_VISIT_MEMBER_NAME(submitTextHandle,"submitTextHandle");
	HX_VISIT_MEMBER_NAME(textToSubmit,"textToSubmit");
	HX_VISIT_MEMBER_NAME(tabPressed,"tabPressed");
	HX_VISIT_MEMBER_NAME(tabPressedHandle,"tabPressedHandle");
	HX_VISIT_MEMBER_NAME(comboSelectedHandle,"comboSelectedHandle");
	HX_VISIT_MEMBER_NAME(comboSelectedWindow,"comboSelectedWindow");
	HX_VISIT_MEMBER_NAME(comboSelectedAlign,"comboSelectedAlign");
	HX_VISIT_MEMBER_NAME(comboSelectedTexts,"comboSelectedTexts");
	HX_VISIT_MEMBER_NAME(comboSelectedLabel,"comboSelectedLabel");
	HX_VISIT_MEMBER_NAME(comboSelectedX,"comboSelectedX");
	HX_VISIT_MEMBER_NAME(comboSelectedY,"comboSelectedY");
	HX_VISIT_MEMBER_NAME(comboSelectedW,"comboSelectedW");
	HX_VISIT_MEMBER_NAME(comboSearchBar,"comboSearchBar");
	HX_VISIT_MEMBER_NAME(submitComboHandle,"submitComboHandle");
	HX_VISIT_MEMBER_NAME(comboToSubmit,"comboToSubmit");
	HX_VISIT_MEMBER_NAME(comboInitialValue,"comboInitialValue");
	HX_VISIT_MEMBER_NAME(tooltipText,"tooltipText");
	HX_VISIT_MEMBER_NAME(tooltipImg,"tooltipImg");
	HX_VISIT_MEMBER_NAME(tooltipImgMaxWidth,"tooltipImgMaxWidth");
	HX_VISIT_MEMBER_NAME(tooltipInvertY,"tooltipInvertY");
	HX_VISIT_MEMBER_NAME(tooltipX,"tooltipX");
	HX_VISIT_MEMBER_NAME(tooltipY,"tooltipY");
	HX_VISIT_MEMBER_NAME(tooltipShown,"tooltipShown");
	HX_VISIT_MEMBER_NAME(tooltipWait,"tooltipWait");
	HX_VISIT_MEMBER_NAME(tooltipTime,"tooltipTime");
	HX_VISIT_MEMBER_NAME(tabNames,"tabNames");
	HX_VISIT_MEMBER_NAME(tabColors,"tabColors");
	HX_VISIT_MEMBER_NAME(tabHandle,"tabHandle");
	HX_VISIT_MEMBER_NAME(tabScroll,"tabScroll");
	HX_VISIT_MEMBER_NAME(tabVertical,"tabVertical");
	HX_VISIT_MEMBER_NAME(sticky,"sticky");
	HX_VISIT_MEMBER_NAME(scissor,"scissor");
	HX_VISIT_MEMBER_NAME(elementsBaked,"elementsBaked");
	HX_VISIT_MEMBER_NAME(checkSelectImage,"checkSelectImage");
}

::hx::Val Zui_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"t") ) { return ::hx::Val( t ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { return ::hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return ::hx::Val( _y ); }
		if (HX_FIELD_EQ(inName,"_w") ) { return ::hx::Val( _w ); }
		if (HX_FIELD_EQ(inName,"_h") ) { return ::hx::Val( _h ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return ::hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"ops") ) { return ::hx::Val( ops ); }
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end_dyn() ); }
		if (HX_FIELD_EQ(inName,"tab") ) { return ::hx::Val( tab_dyn() ); }
		if (HX_FIELD_EQ(inName,"row") ) { return ::hx::Val( row_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text_dyn() ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return ::hx::Val( fill_dyn() ); }
		if (HX_FIELD_EQ(inName,"rect") ) { return ::hx::Val( rect_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return ::hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"panel") ) { return ::hx::Val( panel_dyn() ); }
		if (HX_FIELD_EQ(inName,"image") ) { return ::hx::Val( image_dyn() ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		if (HX_FIELD_EQ(inName,"radio") ) { return ::hx::Val( radio_dyn() ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCut") ) { return ::hx::Val( onCut_dyn() ); }
		if (HX_FIELD_EQ(inName,"TAB_W") ) { return ::hx::Val( TAB_W_dyn() ); }
		if (HX_FIELD_EQ(inName,"SCALE") ) { return ::hx::Val( SCALE_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inputX") ) { return ::hx::Val( inputX ); }
		if (HX_FIELD_EQ(inName,"inputY") ) { return ::hx::Val( inputY ); }
		if (HX_FIELD_EQ(inName,"ratios") ) { return ::hx::Val( ratios ); }
		if (HX_FIELD_EQ(inName,"sticky") ) { return ::hx::Val( sticky ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return ::hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button_dyn() ); }
		if (HX_FIELD_EQ(inName,"slider") ) { return ::hx::Val( slider_dyn() ); }
		if (HX_FIELD_EQ(inName,"indent") ) { return ::hx::Val( indent_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCopy") ) { return ::hx::Val( onCopy_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"changed") ) { return ::hx::Val( changed ); }
		if (HX_FIELD_EQ(inName,"inputDX") ) { return ::hx::Val( inputDX ); }
		if (HX_FIELD_EQ(inName,"inputDY") ) { return ::hx::Val( inputDY ); }
		if (HX_FIELD_EQ(inName,"isADown") ) { return ::hx::Val( isADown ); }
		if (HX_FIELD_EQ(inName,"cursorX") ) { return ::hx::Val( cursorX ); }
		if (HX_FIELD_EQ(inName,"globalG") ) { return ::hx::Val( globalG ); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return ::hx::Val( scissor ); }
		if (HX_FIELD_EQ(inName,"tooltip") ) { return ::hx::Val( tooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPenUp") ) { return ::hx::Val( onPenUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return ::hx::Val( onKeyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPaste") ) { return ::hx::Val( onPaste_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isTyping") ) { return ::hx::Val( isTyping ); }
		if (HX_FIELD_EQ(inName,"isPushed") ) { return ::hx::Val( isPushed ); }
		if (HX_FIELD_EQ(inName,"penInUse") ) { return ::hx::Val( penInUse ); }
		if (HX_FIELD_EQ(inName,"curRatio") ) { return ::hx::Val( curRatio ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return ::hx::Val( fontSize ); }
		if (HX_FIELD_EQ(inName,"_windowX") ) { return ::hx::Val( _windowX ); }
		if (HX_FIELD_EQ(inName,"_windowY") ) { return ::hx::Val( _windowY ); }
		if (HX_FIELD_EQ(inName,"_windowW") ) { return ::hx::Val( _windowW ); }
		if (HX_FIELD_EQ(inName,"_windowH") ) { return ::hx::Val( _windowH ); }
		if (HX_FIELD_EQ(inName,"restoreX") ) { return ::hx::Val( restoreX ); }
		if (HX_FIELD_EQ(inName,"restoreY") ) { return ::hx::Val( restoreY ); }
		if (HX_FIELD_EQ(inName,"tooltipX") ) { return ::hx::Val( tooltipX ); }
		if (HX_FIELD_EQ(inName,"tooltipY") ) { return ::hx::Val( tooltipY ); }
		if (HX_FIELD_EQ(inName,"tabNames") ) { return ::hx::Val( tabNames ); }
		if (HX_FIELD_EQ(inName,"setScale") ) { return ::hx::Val( setScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"endInput") ) { return ::hx::Val( endInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTabs") ) { return ::hx::Val( drawTabs_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTree") ) { return ::hx::Val( drawTree_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRatio") ) { return ::hx::Val( getRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"unindent") ) { return ::hx::Val( unindent_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return ::hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHover") ) { return ::hx::Val( getHover_dyn() ); }
		if (HX_FIELD_EQ(inName,"BUTTON_H") ) { return ::hx::Val( BUTTON_H_dyn() ); }
		if (HX_FIELD_EQ(inName,"SCROLL_W") ) { return ::hx::Val( SCROLL_W_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { return ::hx::Val( isStarted ); }
		if (HX_FIELD_EQ(inName,"isHovered") ) { return ::hx::Val( isHovered ); }
		if (HX_FIELD_EQ(inName,"inputDown") ) { return ::hx::Val( inputDown ); }
		if (HX_FIELD_EQ(inName,"isKeyDown") ) { return ::hx::Val( isKeyDown ); }
		if (HX_FIELD_EQ(inName,"isAltDown") ) { return ::hx::Val( isAltDown ); }
		if (HX_FIELD_EQ(inName,"isTabDown") ) { return ::hx::Val( isTabDown ); }
		if (HX_FIELD_EQ(inName,"tabColors") ) { return ::hx::Val( tabColors ); }
		if (HX_FIELD_EQ(inName,"tabHandle") ) { return ::hx::Val( tabHandle ); }
		if (HX_FIELD_EQ(inName,"tabScroll") ) { return ::hx::Val( tabScroll ); }
		if (HX_FIELD_EQ(inName,"endRegion") ) { return ::hx::Val( endRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSticky") ) { return ::hx::Val( endSticky_dyn() ); }
		if (HX_FIELD_EQ(inName,"endWindow") ) { return ::hx::Val( endWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"splitText") ) { return ::hx::Val( splitText_dyn() ); }
		if (HX_FIELD_EQ(inName,"textInput") ) { return ::hx::Val( textInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"separator") ) { return ::hx::Val( separator_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawArrow") ) { return ::hx::Val( drawArrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawCheck") ) { return ::hx::Val( drawCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRadio") ) { return ::hx::Val( drawRadio_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawCombo") ) { return ::hx::Val( drawCombo_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeColor") ) { return ::hx::Val( fadeColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"isVisible") ) { return ::hx::Val( isVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPushed") ) { return ::hx::Val( getPushed_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPenDown") ) { return ::hx::Val( onPenDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPenMove") ) { return ::hx::Val( onPenMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return ::hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ELEMENT_W") ) { return ::hx::Val( ELEMENT_W_dyn() ); }
		if (HX_FIELD_EQ(inName,"ELEMENT_H") ) { return ::hx::Val( ELEMENT_H_dyn() ); }
		if (HX_FIELD_EQ(inName,"FONT_SIZE") ) { return ::hx::Val( FONT_SIZE_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isReleased") ) { return ::hx::Val( isReleased ); }
		if (HX_FIELD_EQ(inName,"inputDownR") ) { return ::hx::Val( inputDownR ); }
		if (HX_FIELD_EQ(inName,"isCtrlDown") ) { return ::hx::Val( isCtrlDown ); }
		if (HX_FIELD_EQ(inName,"dragHandle") ) { return ::hx::Val( dragHandle ); }
		if (HX_FIELD_EQ(inName,"tabPressed") ) { return ::hx::Val( tabPressed ); }
		if (HX_FIELD_EQ(inName,"tooltipImg") ) { return ::hx::Val( tooltipImg ); }
		if (HX_FIELD_EQ(inName,"drawSlider") ) { return ::hx::Val( drawSlider_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawString") ) { return ::hx::Val( drawString_dyn() ); }
		if (HX_FIELD_EQ(inName,"endElement") ) { return ::hx::Val( endElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStarted") ) { return ::hx::Val( getStarted_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return ::hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"ARROW_SIZE") ) { return ::hx::Val( ARROW_SIZE_dyn() ); }
		if (HX_FIELD_EQ(inName,"CHECK_SIZE") ) { return ::hx::Val( CHECK_SIZE_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isScrolling") ) { return ::hx::Val( isScrolling ); }
		if (HX_FIELD_EQ(inName,"isShiftDown") ) { return ::hx::Val( isShiftDown ); }
		if (HX_FIELD_EQ(inName,"fontOffsetY") ) { return ::hx::Val( fontOffsetY ); }
		if (HX_FIELD_EQ(inName,"scrollAlign") ) { return ::hx::Val( scrollAlign ); }
		if (HX_FIELD_EQ(inName,"windowEnded") ) { return ::hx::Val( windowEnded ); }
		if (HX_FIELD_EQ(inName,"tooltipText") ) { return ::hx::Val( tooltipText ); }
		if (HX_FIELD_EQ(inName,"tooltipWait") ) { return ::hx::Val( tooltipWait ); }
		if (HX_FIELD_EQ(inName,"tooltipTime") ) { return ::hx::Val( tooltipTime ); }
		if (HX_FIELD_EQ(inName,"tabVertical") ) { return ::hx::Val( tabVertical ); }
		if (HX_FIELD_EQ(inName,"beginRegion") ) { return ::hx::Val( beginRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"beginSticky") ) { return ::hx::Val( beginSticky_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowDirty") ) { return ::hx::Val( windowDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTooltip") ) { return ::hx::Val( drawTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"getReleased") ) { return ::hx::Val( getReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return ::hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return ::hx::Val( onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"TEXT_OFFSET") ) { return ::hx::Val( TEXT_OFFSET_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imageInvertY") ) { return ::hx::Val( imageInvertY ); }
		if (HX_FIELD_EQ(inName,"alwaysRedraw") ) { return ::hx::Val( alwaysRedraw ); }
		if (HX_FIELD_EQ(inName,"textColoring") ) { return ::hx::Val( textColoring ); }
		if (HX_FIELD_EQ(inName,"inputEnabled") ) { return ::hx::Val( inputEnabled ); }
		if (HX_FIELD_EQ(inName,"inputStarted") ) { return ::hx::Val( inputStarted ); }
		if (HX_FIELD_EQ(inName,"isKeyPressed") ) { return ::hx::Val( isKeyPressed ); }
		if (HX_FIELD_EQ(inName,"isDeleteDown") ) { return ::hx::Val( isDeleteDown ); }
		if (HX_FIELD_EQ(inName,"isEscapeDown") ) { return ::hx::Val( isEscapeDown ); }
		if (HX_FIELD_EQ(inName,"isReturnDown") ) { return ::hx::Val( isReturnDown ); }
		if (HX_FIELD_EQ(inName,"xBeforeSplit") ) { return ::hx::Val( xBeforeSplit ); }
		if (HX_FIELD_EQ(inName,"wBeforeSplit") ) { return ::hx::Val( wBeforeSplit ); }
		if (HX_FIELD_EQ(inName,"arrowOffsetX") ) { return ::hx::Val( arrowOffsetX ); }
		if (HX_FIELD_EQ(inName,"arrowOffsetY") ) { return ::hx::Val( arrowOffsetY ); }
		if (HX_FIELD_EQ(inName,"titleOffsetX") ) { return ::hx::Val( titleOffsetX ); }
		if (HX_FIELD_EQ(inName,"checkOffsetX") ) { return ::hx::Val( checkOffsetX ); }
		if (HX_FIELD_EQ(inName,"checkOffsetY") ) { return ::hx::Val( checkOffsetY ); }
		if (HX_FIELD_EQ(inName,"radioOffsetX") ) { return ::hx::Val( radioOffsetX ); }
		if (HX_FIELD_EQ(inName,"radioOffsetY") ) { return ::hx::Val( radioOffsetY ); }
		if (HX_FIELD_EQ(inName,"scrollHandle") ) { return ::hx::Val( scrollHandle ); }
		if (HX_FIELD_EQ(inName,"textSelected") ) { return ::hx::Val( textSelected ); }
		if (HX_FIELD_EQ(inName,"textToSubmit") ) { return ::hx::Val( textToSubmit ); }
		if (HX_FIELD_EQ(inName,"tooltipShown") ) { return ::hx::Val( tooltipShown ); }
		if (HX_FIELD_EQ(inName,"bakeElements") ) { return ::hx::Val( bakeElements_dyn() ); }
		if (HX_FIELD_EQ(inName,"inputChanged") ) { return ::hx::Val( inputChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"deselectText") ) { return ::hx::Val( deselectText_dyn() ); }
		if (HX_FIELD_EQ(inName,"tooltipImage") ) { return ::hx::Val( tooltipImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return ::hx::Val( onMouseWheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scrollEnabled") ) { return ::hx::Val( scrollEnabled ); }
		if (HX_FIELD_EQ(inName,"sliderTooltip") ) { return ::hx::Val( sliderTooltip ); }
		if (HX_FIELD_EQ(inName,"inputStartedX") ) { return ::hx::Val( inputStartedX ); }
		if (HX_FIELD_EQ(inName,"inputStartedY") ) { return ::hx::Val( inputStartedY ); }
		if (HX_FIELD_EQ(inName,"inputStartedR") ) { return ::hx::Val( inputStartedR ); }
		if (HX_FIELD_EQ(inName,"inputReleased") ) { return ::hx::Val( inputReleased ); }
		if (HX_FIELD_EQ(inName,"buttonOffsetY") ) { return ::hx::Val( buttonOffsetY ); }
		if (HX_FIELD_EQ(inName,"currentWindow") ) { return ::hx::Val( currentWindow ); }
		if (HX_FIELD_EQ(inName,"windowHeaderW") ) { return ::hx::Val( windowHeaderW ); }
		if (HX_FIELD_EQ(inName,"windowHeaderH") ) { return ::hx::Val( windowHeaderH ); }
		if (HX_FIELD_EQ(inName,"comboToSubmit") ) { return ::hx::Val( comboToSubmit ); }
		if (HX_FIELD_EQ(inName,"elementsBaked") ) { return ::hx::Val( elementsBaked ); }
		if (HX_FIELD_EQ(inName,"registerInput") ) { return ::hx::Val( registerInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"startTextEdit") ) { return ::hx::Val( startTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"HEADER_DRAG_H") ) { return ::hx::Val( HEADER_DRAG_H_dyn() ); }
		if (HX_FIELD_EQ(inName,"TOOLTIP_DELAY") ) { return ::hx::Val( TOOLTIP_DELAY_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sliderTooltipX") ) { return ::hx::Val( sliderTooltipX ); }
		if (HX_FIELD_EQ(inName,"sliderTooltipY") ) { return ::hx::Val( sliderTooltipY ); }
		if (HX_FIELD_EQ(inName,"sliderTooltipW") ) { return ::hx::Val( sliderTooltipW ); }
		if (HX_FIELD_EQ(inName,"inputReleasedR") ) { return ::hx::Val( inputReleasedR ); }
		if (HX_FIELD_EQ(inName,"rtTextPipeline") ) { return ::hx::Val( rtTextPipeline ); }
		if (HX_FIELD_EQ(inName,"comboSelectedX") ) { return ::hx::Val( comboSelectedX ); }
		if (HX_FIELD_EQ(inName,"comboSelectedY") ) { return ::hx::Val( comboSelectedY ); }
		if (HX_FIELD_EQ(inName,"comboSelectedW") ) { return ::hx::Val( comboSelectedW ); }
		if (HX_FIELD_EQ(inName,"comboSearchBar") ) { return ::hx::Val( comboSearchBar ); }
		if (HX_FIELD_EQ(inName,"tooltipInvertY") ) { return ::hx::Val( tooltipInvertY ); }
		if (HX_FIELD_EQ(inName,"submitTextEdit") ) { return ::hx::Val( submitTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTextEdit") ) { return ::hx::Val( updateTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputInRect") ) { return ::hx::Val( getInputInRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"ELEMENT_OFFSET") ) { return ::hx::Val( ELEMENT_OFFSET_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"windowBorderTop") ) { return ::hx::Val( windowBorderTop ); }
		if (HX_FIELD_EQ(inName,"inputRegistered") ) { return ::hx::Val( inputRegistered ); }
		if (HX_FIELD_EQ(inName,"inputWheelDelta") ) { return ::hx::Val( inputWheelDelta ); }
		if (HX_FIELD_EQ(inName,"isBackspaceDown") ) { return ::hx::Val( isBackspaceDown ); }
		if (HX_FIELD_EQ(inName,"highlightAnchor") ) { return ::hx::Val( highlightAnchor ); }
		if (HX_FIELD_EQ(inName,"unregisterInput") ) { return ::hx::Val( unregisterInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTooltipText") ) { return ::hx::Val( drawTooltipText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInitialHover") ) { return ::hx::Val( getInitialHover_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tabSwitchEnabled") ) { return ::hx::Val( tabSwitchEnabled ); }
		if (HX_FIELD_EQ(inName,"windowBorderLeft") ) { return ::hx::Val( windowBorderLeft ); }
		if (HX_FIELD_EQ(inName,"highlightFullRow") ) { return ::hx::Val( highlightFullRow ); }
		if (HX_FIELD_EQ(inName,"inputStartedTime") ) { return ::hx::Val( inputStartedTime ); }
		if (HX_FIELD_EQ(inName,"imageScrollAlign") ) { return ::hx::Val( imageScrollAlign ); }
		if (HX_FIELD_EQ(inName,"submitTextHandle") ) { return ::hx::Val( submitTextHandle ); }
		if (HX_FIELD_EQ(inName,"tabPressedHandle") ) { return ::hx::Val( tabPressedHandle ); }
		if (HX_FIELD_EQ(inName,"checkSelectImage") ) { return ::hx::Val( checkSelectImage ); }
		if (HX_FIELD_EQ(inName,"setCursorToInput") ) { return ::hx::Val( setCursorToInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTooltipImage") ) { return ::hx::Val( drawTooltipImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"highlightNextRow") ) { return ::hx::Val( highlightNextRow_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInputPosition") ) { return ::hx::Val( setInputPosition_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"highlightOnSelect") ) { return ::hx::Val( highlightOnSelect ); }
		if (HX_FIELD_EQ(inName,"windowBorderRight") ) { return ::hx::Val( windowBorderRight ); }
		if (HX_FIELD_EQ(inName,"submitComboHandle") ) { return ::hx::Val( submitComboHandle ); }
		if (HX_FIELD_EQ(inName,"comboInitialValue") ) { return ::hx::Val( comboInitialValue ); }
		if (HX_FIELD_EQ(inName,"CHECK_SELECT_SIZE") ) { return ::hx::Val( CHECK_SELECT_SIZE_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"windowBorderBottom") ) { return ::hx::Val( windowBorderBottom ); }
		if (HX_FIELD_EQ(inName,"touchHoldActivated") ) { return ::hx::Val( touchHoldActivated ); }
		if (HX_FIELD_EQ(inName,"checkSelectOffsetX") ) { return ::hx::Val( checkSelectOffsetX ); }
		if (HX_FIELD_EQ(inName,"checkSelectOffsetY") ) { return ::hx::Val( checkSelectOffsetY ); }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetX") ) { return ::hx::Val( radioSelectOffsetX ); }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetY") ) { return ::hx::Val( radioSelectOffsetY ); }
		if (HX_FIELD_EQ(inName,"textSelectedHandle") ) { return ::hx::Val( textSelectedHandle ); }
		if (HX_FIELD_EQ(inName,"comboSelectedAlign") ) { return ::hx::Val( comboSelectedAlign ); }
		if (HX_FIELD_EQ(inName,"comboSelectedTexts") ) { return ::hx::Val( comboSelectedTexts ); }
		if (HX_FIELD_EQ(inName,"comboSelectedLabel") ) { return ::hx::Val( comboSelectedLabel ); }
		if (HX_FIELD_EQ(inName,"tooltipImgMaxWidth") ) { return ::hx::Val( tooltipImgMaxWidth ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"comboSelectedHandle") ) { return ::hx::Val( comboSelectedHandle ); }
		if (HX_FIELD_EQ(inName,"comboSelectedWindow") ) { return ::hx::Val( comboSelectedWindow ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Zui_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isCut") ) { outValue = ( isCut ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isCopy") ) { outValue = ( isCopy ); return true; }
		if (HX_FIELD_EQ(inName,"isChar") ) { outValue = isChar_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { outValue = ( current ); return true; }
		if (HX_FIELD_EQ(inName,"isPaste") ) { outValue = ( isPaste ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"keyRepeat") ) { outValue = ( keyRepeat ); return true; }
		if (HX_FIELD_EQ(inName,"touchHold") ) { outValue = ( touchHold ); return true; }
		if (HX_FIELD_EQ(inName,"copyFrame") ) { outValue = ( copyFrame ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textToCopy") ) { outValue = ( textToCopy ); return true; }
		if (HX_FIELD_EQ(inName,"comboFirst") ) { outValue = ( comboFirst ); return true; }
		if (HX_FIELD_EQ(inName,"checkStart") ) { outValue = checkStart_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onTextHover") ) { outValue = ( onTextHover ); return true; }
		if (HX_FIELD_EQ(inName,"touchScroll") ) { outValue = ( touchScroll ); return true; }
		if (HX_FIELD_EQ(inName,"textToPaste") ) { outValue = ( textToPaste ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchTooltip") ) { outValue = ( touchTooltip ); return true; }
		if (HX_FIELD_EQ(inName,"copyReceiver") ) { outValue = ( copyReceiver ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBorderHover") ) { outValue = ( onBorderHover ); return true; }
		if (HX_FIELD_EQ(inName,"keyRepeatTime") ) { outValue = ( keyRepeatTime ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onDeselectText") ) { outValue = ( onDeselectText ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"extractColoring") ) { outValue = extractColoring_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dynamicGlyphLoad") ) { outValue = ( dynamicGlyphLoad ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"alwaysRedrawWindow") ) { outValue = ( alwaysRedrawWindow ); return true; }
	}
	return false;
}

::hx::Val Zui_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast<  ::kha::graphics2::Graphics >()); return inValue; }
		if (HX_FIELD_EQ(inName,"t") ) { _hx_set_t(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_w") ) { _w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_h") ) { _h=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { _hx_set_key(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"ops") ) { _hx_set_ops(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { _hx_set__hx_char(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inputX") ) { inputX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputY") ) { inputY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratios") ) { _hx_set_ratios(HX_CTX_GET,inValue.Cast< ::Array< Float > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"sticky") ) { sticky=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changed") ) { changed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDX") ) { inputDX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDY") ) { inputDY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isADown") ) { isADown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cursorX") ) { cursorX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"globalG") ) { _hx_set_globalG(HX_CTX_GET,inValue.Cast<  ::kha::graphics2::Graphics >()); return inValue; }
		if (HX_FIELD_EQ(inName,"scissor") ) { scissor=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isTyping") ) { isTyping=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPushed") ) { isPushed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"penInUse") ) { penInUse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRatio") ) { curRatio=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontSize") ) { fontSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowX") ) { _windowX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowY") ) { _windowY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowW") ) { _windowW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowH") ) { _windowH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restoreX") ) { restoreX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restoreY") ) { restoreY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipX") ) { tooltipX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipY") ) { tooltipY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabNames") ) { _hx_set_tabNames(HX_CTX_GET,inValue.Cast< ::Array< ::String > >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { isStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHovered") ) { isHovered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDown") ) { inputDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isKeyDown") ) { isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isAltDown") ) { isAltDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isTabDown") ) { isTabDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabColors") ) { _hx_set_tabColors(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabHandle") ) { _hx_set_tabHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabScroll") ) { tabScroll=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isReleased") ) { isReleased=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDownR") ) { inputDownR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isCtrlDown") ) { isCtrlDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragHandle") ) { _hx_set_dragHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabPressed") ) { tabPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipImg") ) { _hx_set_tooltipImg(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isScrolling") ) { isScrolling=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isShiftDown") ) { isShiftDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontOffsetY") ) { fontOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollAlign") ) { scrollAlign=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowEnded") ) { windowEnded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipText") ) { _hx_set_tooltipText(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipWait") ) { tooltipWait=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipTime") ) { tooltipTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabVertical") ) { tabVertical=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imageInvertY") ) { imageInvertY=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alwaysRedraw") ) { alwaysRedraw=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textColoring") ) { _hx_set_textColoring(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"inputEnabled") ) { inputEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStarted") ) { inputStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isKeyPressed") ) { isKeyPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDeleteDown") ) { isDeleteDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isEscapeDown") ) { isEscapeDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isReturnDown") ) { isReturnDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xBeforeSplit") ) { xBeforeSplit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wBeforeSplit") ) { wBeforeSplit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowOffsetX") ) { arrowOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowOffsetY") ) { arrowOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleOffsetX") ) { titleOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkOffsetX") ) { checkOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkOffsetY") ) { checkOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioOffsetX") ) { radioOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioOffsetY") ) { radioOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollHandle") ) { _hx_set_scrollHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"textSelected") ) { _hx_set_textSelected(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"textToSubmit") ) { _hx_set_textToSubmit(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipShown") ) { tooltipShown=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scrollEnabled") ) { scrollEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sliderTooltip") ) { sliderTooltip=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedX") ) { inputStartedX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedY") ) { inputStartedY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedR") ) { inputStartedR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputReleased") ) { inputReleased=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttonOffsetY") ) { buttonOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentWindow") ) { _hx_set_currentWindow(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"windowHeaderW") ) { windowHeaderW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowHeaderH") ) { windowHeaderH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboToSubmit") ) { comboToSubmit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elementsBaked") ) { elementsBaked=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sliderTooltipX") ) { sliderTooltipX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sliderTooltipY") ) { sliderTooltipY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sliderTooltipW") ) { sliderTooltipW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputReleasedR") ) { inputReleasedR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rtTextPipeline") ) { _hx_set_rtTextPipeline(HX_CTX_GET,inValue.Cast<  ::kha::graphics4::PipelineState >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedX") ) { comboSelectedX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedY") ) { comboSelectedY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedW") ) { comboSelectedW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSearchBar") ) { comboSearchBar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipInvertY") ) { tooltipInvertY=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"windowBorderTop") ) { windowBorderTop=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputRegistered") ) { inputRegistered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputWheelDelta") ) { inputWheelDelta=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isBackspaceDown") ) { isBackspaceDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlightAnchor") ) { highlightAnchor=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tabSwitchEnabled") ) { tabSwitchEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowBorderLeft") ) { windowBorderLeft=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlightFullRow") ) { highlightFullRow=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedTime") ) { inputStartedTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageScrollAlign") ) { imageScrollAlign=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submitTextHandle") ) { _hx_set_submitTextHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabPressedHandle") ) { _hx_set_tabPressedHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"checkSelectImage") ) { _hx_set_checkSelectImage(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"highlightOnSelect") ) { highlightOnSelect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowBorderRight") ) { windowBorderRight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submitComboHandle") ) { _hx_set_submitComboHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboInitialValue") ) { comboInitialValue=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"windowBorderBottom") ) { windowBorderBottom=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchHoldActivated") ) { touchHoldActivated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkSelectOffsetX") ) { checkSelectOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkSelectOffsetY") ) { checkSelectOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetX") ) { radioSelectOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetY") ) { radioSelectOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textSelectedHandle") ) { _hx_set_textSelectedHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedAlign") ) { comboSelectedAlign=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedTexts") ) { _hx_set_comboSelectedTexts(HX_CTX_GET,inValue.Cast< ::Array< ::String > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedLabel") ) { _hx_set_comboSelectedLabel(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipImgMaxWidth") ) { _hx_set_tooltipImgMaxWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"comboSelectedHandle") ) { _hx_set_comboSelectedHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedWindow") ) { _hx_set_comboSelectedWindow(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Zui_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isCut") ) { isCut=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isCopy") ) { isCopy=ioValue.Cast< bool >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast<  ::zui::Zui >(); return true; }
		if (HX_FIELD_EQ(inName,"isPaste") ) { isPaste=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"keyRepeat") ) { keyRepeat=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"touchHold") ) { touchHold=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"copyFrame") ) { copyFrame=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textToCopy") ) { textToCopy=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"comboFirst") ) { comboFirst=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onTextHover") ) { onTextHover=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"touchScroll") ) { touchScroll=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"textToPaste") ) { textToPaste=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchTooltip") ) { touchTooltip=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"copyReceiver") ) { copyReceiver=ioValue.Cast<  ::zui::Zui >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBorderHover") ) { onBorderHover=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"keyRepeatTime") ) { keyRepeatTime=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onDeselectText") ) { onDeselectText=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dynamicGlyphLoad") ) { dynamicGlyphLoad=ioValue.Cast< bool >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"alwaysRedrawWindow") ) { alwaysRedrawWindow=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Zui_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isScrolling",ab,b1,9a,1c));
	outFields->push(HX_("isTyping",01,9a,a3,af));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("isStarted",77,a6,19,39));
	outFields->push(HX_("isPushed",43,b0,96,ca));
	outFields->push(HX_("isHovered",51,a2,b5,7e));
	outFields->push(HX_("isReleased",c7,9a,96,f1));
	outFields->push(HX_("changed",f4,b0,cc,cc));
	outFields->push(HX_("imageInvertY",68,c6,b9,2d));
	outFields->push(HX_("scrollEnabled",f4,1f,78,f0));
	outFields->push(HX_("alwaysRedraw",66,ed,9c,81));
	outFields->push(HX_("highlightOnSelect",cf,77,e1,02));
	outFields->push(HX_("tabSwitchEnabled",58,2d,3d,81));
	outFields->push(HX_("textColoring",2c,d9,7b,be));
	outFields->push(HX_("windowBorderTop",f9,fa,07,27));
	outFields->push(HX_("windowBorderBottom",07,29,d7,6b));
	outFields->push(HX_("windowBorderLeft",23,4b,a2,fa));
	outFields->push(HX_("windowBorderRight",40,81,6c,ca));
	outFields->push(HX_("highlightFullRow",f7,93,1d,e1));
	outFields->push(HX_("touchHoldActivated",d3,a4,8a,27));
	outFields->push(HX_("sliderTooltip",e2,84,1e,f4));
	outFields->push(HX_("sliderTooltipX",36,c1,95,a6));
	outFields->push(HX_("sliderTooltipY",37,c1,95,a6));
	outFields->push(HX_("sliderTooltipW",35,c1,95,a6));
	outFields->push(HX_("inputRegistered",2c,96,7c,a2));
	outFields->push(HX_("inputEnabled",97,5d,5d,16));
	outFields->push(HX_("inputX",0e,c5,ed,9b));
	outFields->push(HX_("inputY",0f,c5,ed,9b));
	outFields->push(HX_("inputStartedX",21,8a,4a,d1));
	outFields->push(HX_("inputStartedY",22,8a,4a,d1));
	outFields->push(HX_("inputDX",1e,96,1e,d4));
	outFields->push(HX_("inputDY",1f,96,1e,d4));
	outFields->push(HX_("inputWheelDelta",07,8a,4a,54));
	outFields->push(HX_("inputStarted",57,82,47,cd));
	outFields->push(HX_("inputStartedR",1b,8a,4a,d1));
	outFields->push(HX_("inputReleased",e7,22,89,05));
	outFields->push(HX_("inputReleasedR",8b,67,75,d2));
	outFields->push(HX_("inputDown",8c,b5,98,09));
	outFields->push(HX_("inputDownR",46,25,06,5c));
	outFields->push(HX_("penInUse",c9,2d,82,ba));
	outFields->push(HX_("isKeyPressed",4d,9b,8d,7a));
	outFields->push(HX_("isKeyDown",d7,e6,45,a0));
	outFields->push(HX_("isShiftDown",ba,30,e8,ab));
	outFields->push(HX_("isCtrlDown",b7,f0,27,62));
	outFields->push(HX_("isAltDown",61,e3,ed,eb));
	outFields->push(HX_("isADown",19,0d,ab,a3));
	outFields->push(HX_("isBackspaceDown",f7,fe,97,1d));
	outFields->push(HX_("isDeleteDown",b7,fe,d9,67));
	outFields->push(HX_("isEscapeDown",0d,e5,ce,6e));
	outFields->push(HX_("isReturnDown",bc,09,bc,b0));
	outFields->push(HX_("isTabDown",8d,4a,e2,3e));
	outFields->push(HX_("key",9f,89,51,00));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("inputStartedTime",04,f2,e2,e3));
	outFields->push(HX_("cursorX",c2,6c,94,cc));
	outFields->push(HX_("highlightAnchor",c9,a3,46,ea));
	outFields->push(HX_("ratios",08,35,8a,bb));
	outFields->push(HX_("curRatio",6b,2f,d2,2b));
	outFields->push(HX_("xBeforeSplit",43,54,ba,bc));
	outFields->push(HX_("wBeforeSplit",a4,e6,fa,7a));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("t",74,00,00,00));
	outFields->push(HX_("ops",32,9c,54,00));
	outFields->push(HX_("globalG",84,05,39,14));
	outFields->push(HX_("rtTextPipeline",d1,83,79,94));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("fontOffsetY",57,bb,35,ec));
	outFields->push(HX_("arrowOffsetX",9c,72,93,9f));
	outFields->push(HX_("arrowOffsetY",9d,72,93,9f));
	outFields->push(HX_("titleOffsetX",ad,7e,2b,fb));
	outFields->push(HX_("buttonOffsetY",94,d1,c3,f5));
	outFields->push(HX_("checkOffsetX",7d,c1,eb,c4));
	outFields->push(HX_("checkOffsetY",7e,c1,eb,c4));
	outFields->push(HX_("checkSelectOffsetX",e1,87,86,cd));
	outFields->push(HX_("checkSelectOffsetY",e2,87,86,cd));
	outFields->push(HX_("radioOffsetX",aa,05,36,2f));
	outFields->push(HX_("radioOffsetY",ab,05,36,2f));
	outFields->push(HX_("radioSelectOffsetX",ce,ab,21,0e));
	outFields->push(HX_("radioSelectOffsetY",cf,ab,21,0e));
	outFields->push(HX_("scrollAlign",78,9f,6e,6b));
	outFields->push(HX_("imageScrollAlign",dd,6f,2a,36));
	outFields->push(HX_("_x",39,53,00,00));
	outFields->push(HX_("_y",3a,53,00,00));
	outFields->push(HX_("_w",38,53,00,00));
	outFields->push(HX_("_h",29,53,00,00));
	outFields->push(HX_("_windowX",e9,37,2d,22));
	outFields->push(HX_("_windowY",ea,37,2d,22));
	outFields->push(HX_("_windowW",e8,37,2d,22));
	outFields->push(HX_("_windowH",d9,37,2d,22));
	outFields->push(HX_("currentWindow",09,15,e9,35));
	outFields->push(HX_("windowEnded",ea,de,4c,61));
	outFields->push(HX_("scrollHandle",95,d7,bf,0f));
	outFields->push(HX_("dragHandle",bc,92,69,60));
	outFields->push(HX_("windowHeaderW",1a,44,20,1e));
	outFields->push(HX_("windowHeaderH",0b,44,20,1e));
	outFields->push(HX_("restoreX",4a,fd,a9,ef));
	outFields->push(HX_("restoreY",4b,fd,a9,ef));
	outFields->push(HX_("textSelectedHandle",f0,2d,c3,c5));
	outFields->push(HX_("textSelected",28,a8,e8,e5));
	outFields->push(HX_("submitTextHandle",6d,6e,dd,0c));
	outFields->push(HX_("textToSubmit",c0,7d,c0,f5));
	outFields->push(HX_("tabPressed",cd,c4,be,fb));
	outFields->push(HX_("tabPressedHandle",55,d4,6b,06));
	outFields->push(HX_("comboSelectedHandle",51,41,6f,6e));
	outFields->push(HX_("comboSelectedWindow",99,51,fe,08));
	outFields->push(HX_("comboSelectedAlign",3c,c1,1c,85));
	outFields->push(HX_("comboSelectedTexts",9d,b5,24,71));
	outFields->push(HX_("comboSelectedLabel",6b,78,3a,d3));
	outFields->push(HX_("comboSelectedX",6f,23,59,6b));
	outFields->push(HX_("comboSelectedY",70,23,59,6b));
	outFields->push(HX_("comboSelectedW",6e,23,59,6b));
	outFields->push(HX_("comboSearchBar",1d,99,87,cc));
	outFields->push(HX_("submitComboHandle",5e,d5,54,f4));
	outFields->push(HX_("comboToSubmit",61,e2,49,08));
	outFields->push(HX_("comboInitialValue",bb,31,fa,f3));
	outFields->push(HX_("tooltipText",50,e3,ed,e4));
	outFields->push(HX_("tooltipImg",c0,da,10,11));
	outFields->push(HX_("tooltipImgMaxWidth",a2,5f,bb,b7));
	outFields->push(HX_("tooltipInvertY",c0,bd,ec,0c));
	outFields->push(HX_("tooltipX",f5,b5,8a,d0));
	outFields->push(HX_("tooltipY",f6,b5,8a,d0));
	outFields->push(HX_("tooltipShown",ce,40,c7,d9));
	outFields->push(HX_("tooltipWait",18,71,e6,e6));
	outFields->push(HX_("tooltipTime",b0,e2,f0,e4));
	outFields->push(HX_("tabNames",33,11,29,05));
	outFields->push(HX_("tabColors",e5,81,d3,27));
	outFields->push(HX_("tabHandle",dd,3f,4a,19));
	outFields->push(HX_("tabScroll",42,94,b1,a8));
	outFields->push(HX_("tabVertical",eb,af,31,45));
	outFields->push(HX_("sticky",29,ad,38,0b));
	outFields->push(HX_("scissor",1c,28,e7,04));
	outFields->push(HX_("elementsBaked",74,67,ba,d9));
	outFields->push(HX_("checkSelectImage",d7,c6,b4,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Zui_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Zui_obj,isScrolling),HX_("isScrolling",ab,b1,9a,1c)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isTyping),HX_("isTyping",01,9a,a3,af)},
	{::hx::fsBool,(int)offsetof(Zui_obj,enabled),HX_("enabled",81,04,31,7e)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isStarted),HX_("isStarted",77,a6,19,39)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isPushed),HX_("isPushed",43,b0,96,ca)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isHovered),HX_("isHovered",51,a2,b5,7e)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isReleased),HX_("isReleased",c7,9a,96,f1)},
	{::hx::fsBool,(int)offsetof(Zui_obj,changed),HX_("changed",f4,b0,cc,cc)},
	{::hx::fsBool,(int)offsetof(Zui_obj,imageInvertY),HX_("imageInvertY",68,c6,b9,2d)},
	{::hx::fsBool,(int)offsetof(Zui_obj,scrollEnabled),HX_("scrollEnabled",f4,1f,78,f0)},
	{::hx::fsBool,(int)offsetof(Zui_obj,alwaysRedraw),HX_("alwaysRedraw",66,ed,9c,81)},
	{::hx::fsBool,(int)offsetof(Zui_obj,highlightOnSelect),HX_("highlightOnSelect",cf,77,e1,02)},
	{::hx::fsBool,(int)offsetof(Zui_obj,tabSwitchEnabled),HX_("tabSwitchEnabled",58,2d,3d,81)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,textColoring),HX_("textColoring",2c,d9,7b,be)},
	{::hx::fsInt,(int)offsetof(Zui_obj,windowBorderTop),HX_("windowBorderTop",f9,fa,07,27)},
	{::hx::fsInt,(int)offsetof(Zui_obj,windowBorderBottom),HX_("windowBorderBottom",07,29,d7,6b)},
	{::hx::fsInt,(int)offsetof(Zui_obj,windowBorderLeft),HX_("windowBorderLeft",23,4b,a2,fa)},
	{::hx::fsInt,(int)offsetof(Zui_obj,windowBorderRight),HX_("windowBorderRight",40,81,6c,ca)},
	{::hx::fsBool,(int)offsetof(Zui_obj,highlightFullRow),HX_("highlightFullRow",f7,93,1d,e1)},
	{::hx::fsBool,(int)offsetof(Zui_obj,touchHoldActivated),HX_("touchHoldActivated",d3,a4,8a,27)},
	{::hx::fsBool,(int)offsetof(Zui_obj,sliderTooltip),HX_("sliderTooltip",e2,84,1e,f4)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,sliderTooltipX),HX_("sliderTooltipX",36,c1,95,a6)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,sliderTooltipY),HX_("sliderTooltipY",37,c1,95,a6)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,sliderTooltipW),HX_("sliderTooltipW",35,c1,95,a6)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputRegistered),HX_("inputRegistered",2c,96,7c,a2)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputEnabled),HX_("inputEnabled",97,5d,5d,16)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputX),HX_("inputX",0e,c5,ed,9b)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputY),HX_("inputY",0f,c5,ed,9b)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputStartedX),HX_("inputStartedX",21,8a,4a,d1)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputStartedY),HX_("inputStartedY",22,8a,4a,d1)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputDX),HX_("inputDX",1e,96,1e,d4)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputDY),HX_("inputDY",1f,96,1e,d4)},
	{::hx::fsInt,(int)offsetof(Zui_obj,inputWheelDelta),HX_("inputWheelDelta",07,8a,4a,54)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputStarted),HX_("inputStarted",57,82,47,cd)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputStartedR),HX_("inputStartedR",1b,8a,4a,d1)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputReleased),HX_("inputReleased",e7,22,89,05)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputReleasedR),HX_("inputReleasedR",8b,67,75,d2)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputDown),HX_("inputDown",8c,b5,98,09)},
	{::hx::fsBool,(int)offsetof(Zui_obj,inputDownR),HX_("inputDownR",46,25,06,5c)},
	{::hx::fsBool,(int)offsetof(Zui_obj,penInUse),HX_("penInUse",c9,2d,82,ba)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isKeyPressed),HX_("isKeyPressed",4d,9b,8d,7a)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isKeyDown),HX_("isKeyDown",d7,e6,45,a0)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isShiftDown),HX_("isShiftDown",ba,30,e8,ab)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isCtrlDown),HX_("isCtrlDown",b7,f0,27,62)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isAltDown),HX_("isAltDown",61,e3,ed,eb)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isADown),HX_("isADown",19,0d,ab,a3)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isBackspaceDown),HX_("isBackspaceDown",f7,fe,97,1d)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isDeleteDown),HX_("isDeleteDown",b7,fe,d9,67)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isEscapeDown),HX_("isEscapeDown",0d,e5,ce,6e)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isReturnDown),HX_("isReturnDown",bc,09,bc,b0)},
	{::hx::fsBool,(int)offsetof(Zui_obj,isTabDown),HX_("isTabDown",8d,4a,e2,3e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,key),HX_("key",9f,89,51,00)},
	{::hx::fsString,(int)offsetof(Zui_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,inputStartedTime),HX_("inputStartedTime",04,f2,e2,e3)},
	{::hx::fsInt,(int)offsetof(Zui_obj,cursorX),HX_("cursorX",c2,6c,94,cc)},
	{::hx::fsInt,(int)offsetof(Zui_obj,highlightAnchor),HX_("highlightAnchor",c9,a3,46,ea)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Zui_obj,ratios),HX_("ratios",08,35,8a,bb)},
	{::hx::fsInt,(int)offsetof(Zui_obj,curRatio),HX_("curRatio",6b,2f,d2,2b)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,xBeforeSplit),HX_("xBeforeSplit",43,54,ba,bc)},
	{::hx::fsInt,(int)offsetof(Zui_obj,wBeforeSplit),HX_("wBeforeSplit",a4,e6,fa,7a)},
	{::hx::fsObject /*  ::kha::graphics2::Graphics */ ,(int)offsetof(Zui_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,t),HX_("t",74,00,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,ops),HX_("ops",32,9c,54,00)},
	{::hx::fsObject /*  ::kha::graphics2::Graphics */ ,(int)offsetof(Zui_obj,globalG),HX_("globalG",84,05,39,14)},
	{::hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(int)offsetof(Zui_obj,rtTextPipeline),HX_("rtTextPipeline",d1,83,79,94)},
	{::hx::fsInt,(int)offsetof(Zui_obj,fontSize),HX_("fontSize",30,be,d1,ce)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,fontOffsetY),HX_("fontOffsetY",57,bb,35,ec)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,arrowOffsetX),HX_("arrowOffsetX",9c,72,93,9f)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,arrowOffsetY),HX_("arrowOffsetY",9d,72,93,9f)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,titleOffsetX),HX_("titleOffsetX",ad,7e,2b,fb)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,buttonOffsetY),HX_("buttonOffsetY",94,d1,c3,f5)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,checkOffsetX),HX_("checkOffsetX",7d,c1,eb,c4)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,checkOffsetY),HX_("checkOffsetY",7e,c1,eb,c4)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,checkSelectOffsetX),HX_("checkSelectOffsetX",e1,87,86,cd)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,checkSelectOffsetY),HX_("checkSelectOffsetY",e2,87,86,cd)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,radioOffsetX),HX_("radioOffsetX",aa,05,36,2f)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,radioOffsetY),HX_("radioOffsetY",ab,05,36,2f)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,radioSelectOffsetX),HX_("radioSelectOffsetX",ce,ab,21,0e)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,radioSelectOffsetY),HX_("radioSelectOffsetY",cf,ab,21,0e)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,scrollAlign),HX_("scrollAlign",78,9f,6e,6b)},
	{::hx::fsBool,(int)offsetof(Zui_obj,imageScrollAlign),HX_("imageScrollAlign",dd,6f,2a,36)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,_x),HX_("_x",39,53,00,00)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,_y),HX_("_y",3a,53,00,00)},
	{::hx::fsInt,(int)offsetof(Zui_obj,_w),HX_("_w",38,53,00,00)},
	{::hx::fsInt,(int)offsetof(Zui_obj,_h),HX_("_h",29,53,00,00)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,_windowX),HX_("_windowX",e9,37,2d,22)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,_windowY),HX_("_windowY",ea,37,2d,22)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,_windowW),HX_("_windowW",e8,37,2d,22)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,_windowH),HX_("_windowH",d9,37,2d,22)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,currentWindow),HX_("currentWindow",09,15,e9,35)},
	{::hx::fsBool,(int)offsetof(Zui_obj,windowEnded),HX_("windowEnded",ea,de,4c,61)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,scrollHandle),HX_("scrollHandle",95,d7,bf,0f)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,dragHandle),HX_("dragHandle",bc,92,69,60)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,windowHeaderW),HX_("windowHeaderW",1a,44,20,1e)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,windowHeaderH),HX_("windowHeaderH",0b,44,20,1e)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,restoreX),HX_("restoreX",4a,fd,a9,ef)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,restoreY),HX_("restoreY",4b,fd,a9,ef)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,textSelectedHandle),HX_("textSelectedHandle",f0,2d,c3,c5)},
	{::hx::fsString,(int)offsetof(Zui_obj,textSelected),HX_("textSelected",28,a8,e8,e5)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,submitTextHandle),HX_("submitTextHandle",6d,6e,dd,0c)},
	{::hx::fsString,(int)offsetof(Zui_obj,textToSubmit),HX_("textToSubmit",c0,7d,c0,f5)},
	{::hx::fsBool,(int)offsetof(Zui_obj,tabPressed),HX_("tabPressed",cd,c4,be,fb)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,tabPressedHandle),HX_("tabPressedHandle",55,d4,6b,06)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,comboSelectedHandle),HX_("comboSelectedHandle",51,41,6f,6e)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,comboSelectedWindow),HX_("comboSelectedWindow",99,51,fe,08)},
	{::hx::fsInt,(int)offsetof(Zui_obj,comboSelectedAlign),HX_("comboSelectedAlign",3c,c1,1c,85)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Zui_obj,comboSelectedTexts),HX_("comboSelectedTexts",9d,b5,24,71)},
	{::hx::fsString,(int)offsetof(Zui_obj,comboSelectedLabel),HX_("comboSelectedLabel",6b,78,3a,d3)},
	{::hx::fsInt,(int)offsetof(Zui_obj,comboSelectedX),HX_("comboSelectedX",6f,23,59,6b)},
	{::hx::fsInt,(int)offsetof(Zui_obj,comboSelectedY),HX_("comboSelectedY",70,23,59,6b)},
	{::hx::fsInt,(int)offsetof(Zui_obj,comboSelectedW),HX_("comboSelectedW",6e,23,59,6b)},
	{::hx::fsBool,(int)offsetof(Zui_obj,comboSearchBar),HX_("comboSearchBar",1d,99,87,cc)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,submitComboHandle),HX_("submitComboHandle",5e,d5,54,f4)},
	{::hx::fsInt,(int)offsetof(Zui_obj,comboToSubmit),HX_("comboToSubmit",61,e2,49,08)},
	{::hx::fsInt,(int)offsetof(Zui_obj,comboInitialValue),HX_("comboInitialValue",bb,31,fa,f3)},
	{::hx::fsString,(int)offsetof(Zui_obj,tooltipText),HX_("tooltipText",50,e3,ed,e4)},
	{::hx::fsObject /*  ::kha::Image */ ,(int)offsetof(Zui_obj,tooltipImg),HX_("tooltipImg",c0,da,10,11)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,tooltipImgMaxWidth),HX_("tooltipImgMaxWidth",a2,5f,bb,b7)},
	{::hx::fsBool,(int)offsetof(Zui_obj,tooltipInvertY),HX_("tooltipInvertY",c0,bd,ec,0c)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,tooltipX),HX_("tooltipX",f5,b5,8a,d0)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,tooltipY),HX_("tooltipY",f6,b5,8a,d0)},
	{::hx::fsBool,(int)offsetof(Zui_obj,tooltipShown),HX_("tooltipShown",ce,40,c7,d9)},
	{::hx::fsBool,(int)offsetof(Zui_obj,tooltipWait),HX_("tooltipWait",18,71,e6,e6)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,tooltipTime),HX_("tooltipTime",b0,e2,f0,e4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Zui_obj,tabNames),HX_("tabNames",33,11,29,05)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Zui_obj,tabColors),HX_("tabColors",e5,81,d3,27)},
	{::hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,tabHandle),HX_("tabHandle",dd,3f,4a,19)},
	{::hx::fsFloat,(int)offsetof(Zui_obj,tabScroll),HX_("tabScroll",42,94,b1,a8)},
	{::hx::fsBool,(int)offsetof(Zui_obj,tabVertical),HX_("tabVertical",eb,af,31,45)},
	{::hx::fsBool,(int)offsetof(Zui_obj,sticky),HX_("sticky",29,ad,38,0b)},
	{::hx::fsBool,(int)offsetof(Zui_obj,scissor),HX_("scissor",1c,28,e7,04)},
	{::hx::fsBool,(int)offsetof(Zui_obj,elementsBaked),HX_("elementsBaked",74,67,ba,d9)},
	{::hx::fsObject /*  ::kha::Image */ ,(int)offsetof(Zui_obj,checkSelectImage),HX_("checkSelectImage",d7,c6,b4,cb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Zui_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::zui::Zui */ ,(void *) &Zui_obj::current,HX_("current",39,9c,e3,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Zui_obj::onBorderHover,HX_("onBorderHover",51,ce,c7,1a)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Zui_obj::onTextHover,HX_("onTextHover",b0,58,95,e6)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Zui_obj::onDeselectText,HX_("onDeselectText",49,c4,0b,6c)},
	{::hx::fsBool,(void *) &Zui_obj::alwaysRedrawWindow,HX_("alwaysRedrawWindow",f6,05,3b,16)},
	{::hx::fsBool,(void *) &Zui_obj::keyRepeat,HX_("keyRepeat",5a,16,84,9e)},
	{::hx::fsBool,(void *) &Zui_obj::dynamicGlyphLoad,HX_("dynamicGlyphLoad",73,e2,c6,aa)},
	{::hx::fsBool,(void *) &Zui_obj::touchScroll,HX_("touchScroll",2c,3d,9b,ac)},
	{::hx::fsBool,(void *) &Zui_obj::touchHold,HX_("touchHold",9e,58,7f,0a)},
	{::hx::fsBool,(void *) &Zui_obj::touchTooltip,HX_("touchTooltip",04,c3,ee,94)},
	{::hx::fsFloat,(void *) &Zui_obj::keyRepeatTime,HX_("keyRepeatTime",87,43,2d,0b)},
	{::hx::fsString,(void *) &Zui_obj::textToPaste,HX_("textToPaste",ab,9a,5a,65)},
	{::hx::fsString,(void *) &Zui_obj::textToCopy,HX_("textToCopy",5d,a7,6e,ae)},
	{::hx::fsBool,(void *) &Zui_obj::isCut,HX_("isCut",b8,af,49,c1)},
	{::hx::fsBool,(void *) &Zui_obj::isCopy,HX_("isCopy",bf,80,2b,5f)},
	{::hx::fsBool,(void *) &Zui_obj::isPaste,HX_("isPaste",09,f7,db,59)},
	{::hx::fsObject /*  ::zui::Zui */ ,(void *) &Zui_obj::copyReceiver,HX_("copyReceiver",04,fa,d5,de)},
	{::hx::fsInt,(void *) &Zui_obj::copyFrame,HX_("copyFrame",38,9c,7e,8c)},
	{::hx::fsBool,(void *) &Zui_obj::comboFirst,HX_("comboFirst",02,e5,92,0e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Zui_obj_sMemberFields[] = {
	HX_("isScrolling",ab,b1,9a,1c),
	HX_("isTyping",01,9a,a3,af),
	HX_("enabled",81,04,31,7e),
	HX_("isStarted",77,a6,19,39),
	HX_("isPushed",43,b0,96,ca),
	HX_("isHovered",51,a2,b5,7e),
	HX_("isReleased",c7,9a,96,f1),
	HX_("changed",f4,b0,cc,cc),
	HX_("imageInvertY",68,c6,b9,2d),
	HX_("scrollEnabled",f4,1f,78,f0),
	HX_("alwaysRedraw",66,ed,9c,81),
	HX_("highlightOnSelect",cf,77,e1,02),
	HX_("tabSwitchEnabled",58,2d,3d,81),
	HX_("textColoring",2c,d9,7b,be),
	HX_("windowBorderTop",f9,fa,07,27),
	HX_("windowBorderBottom",07,29,d7,6b),
	HX_("windowBorderLeft",23,4b,a2,fa),
	HX_("windowBorderRight",40,81,6c,ca),
	HX_("highlightFullRow",f7,93,1d,e1),
	HX_("touchHoldActivated",d3,a4,8a,27),
	HX_("sliderTooltip",e2,84,1e,f4),
	HX_("sliderTooltipX",36,c1,95,a6),
	HX_("sliderTooltipY",37,c1,95,a6),
	HX_("sliderTooltipW",35,c1,95,a6),
	HX_("inputRegistered",2c,96,7c,a2),
	HX_("inputEnabled",97,5d,5d,16),
	HX_("inputX",0e,c5,ed,9b),
	HX_("inputY",0f,c5,ed,9b),
	HX_("inputStartedX",21,8a,4a,d1),
	HX_("inputStartedY",22,8a,4a,d1),
	HX_("inputDX",1e,96,1e,d4),
	HX_("inputDY",1f,96,1e,d4),
	HX_("inputWheelDelta",07,8a,4a,54),
	HX_("inputStarted",57,82,47,cd),
	HX_("inputStartedR",1b,8a,4a,d1),
	HX_("inputReleased",e7,22,89,05),
	HX_("inputReleasedR",8b,67,75,d2),
	HX_("inputDown",8c,b5,98,09),
	HX_("inputDownR",46,25,06,5c),
	HX_("penInUse",c9,2d,82,ba),
	HX_("isKeyPressed",4d,9b,8d,7a),
	HX_("isKeyDown",d7,e6,45,a0),
	HX_("isShiftDown",ba,30,e8,ab),
	HX_("isCtrlDown",b7,f0,27,62),
	HX_("isAltDown",61,e3,ed,eb),
	HX_("isADown",19,0d,ab,a3),
	HX_("isBackspaceDown",f7,fe,97,1d),
	HX_("isDeleteDown",b7,fe,d9,67),
	HX_("isEscapeDown",0d,e5,ce,6e),
	HX_("isReturnDown",bc,09,bc,b0),
	HX_("isTabDown",8d,4a,e2,3e),
	HX_("key",9f,89,51,00),
	HX_("char",d6,5e,bf,41),
	HX_("inputStartedTime",04,f2,e2,e3),
	HX_("cursorX",c2,6c,94,cc),
	HX_("highlightAnchor",c9,a3,46,ea),
	HX_("ratios",08,35,8a,bb),
	HX_("curRatio",6b,2f,d2,2b),
	HX_("xBeforeSplit",43,54,ba,bc),
	HX_("wBeforeSplit",a4,e6,fa,7a),
	HX_("g",67,00,00,00),
	HX_("t",74,00,00,00),
	HX_("ops",32,9c,54,00),
	HX_("globalG",84,05,39,14),
	HX_("rtTextPipeline",d1,83,79,94),
	HX_("fontSize",30,be,d1,ce),
	HX_("fontOffsetY",57,bb,35,ec),
	HX_("arrowOffsetX",9c,72,93,9f),
	HX_("arrowOffsetY",9d,72,93,9f),
	HX_("titleOffsetX",ad,7e,2b,fb),
	HX_("buttonOffsetY",94,d1,c3,f5),
	HX_("checkOffsetX",7d,c1,eb,c4),
	HX_("checkOffsetY",7e,c1,eb,c4),
	HX_("checkSelectOffsetX",e1,87,86,cd),
	HX_("checkSelectOffsetY",e2,87,86,cd),
	HX_("radioOffsetX",aa,05,36,2f),
	HX_("radioOffsetY",ab,05,36,2f),
	HX_("radioSelectOffsetX",ce,ab,21,0e),
	HX_("radioSelectOffsetY",cf,ab,21,0e),
	HX_("scrollAlign",78,9f,6e,6b),
	HX_("imageScrollAlign",dd,6f,2a,36),
	HX_("_x",39,53,00,00),
	HX_("_y",3a,53,00,00),
	HX_("_w",38,53,00,00),
	HX_("_h",29,53,00,00),
	HX_("_windowX",e9,37,2d,22),
	HX_("_windowY",ea,37,2d,22),
	HX_("_windowW",e8,37,2d,22),
	HX_("_windowH",d9,37,2d,22),
	HX_("currentWindow",09,15,e9,35),
	HX_("windowEnded",ea,de,4c,61),
	HX_("scrollHandle",95,d7,bf,0f),
	HX_("dragHandle",bc,92,69,60),
	HX_("windowHeaderW",1a,44,20,1e),
	HX_("windowHeaderH",0b,44,20,1e),
	HX_("restoreX",4a,fd,a9,ef),
	HX_("restoreY",4b,fd,a9,ef),
	HX_("textSelectedHandle",f0,2d,c3,c5),
	HX_("textSelected",28,a8,e8,e5),
	HX_("submitTextHandle",6d,6e,dd,0c),
	HX_("textToSubmit",c0,7d,c0,f5),
	HX_("tabPressed",cd,c4,be,fb),
	HX_("tabPressedHandle",55,d4,6b,06),
	HX_("comboSelectedHandle",51,41,6f,6e),
	HX_("comboSelectedWindow",99,51,fe,08),
	HX_("comboSelectedAlign",3c,c1,1c,85),
	HX_("comboSelectedTexts",9d,b5,24,71),
	HX_("comboSelectedLabel",6b,78,3a,d3),
	HX_("comboSelectedX",6f,23,59,6b),
	HX_("comboSelectedY",70,23,59,6b),
	HX_("comboSelectedW",6e,23,59,6b),
	HX_("comboSearchBar",1d,99,87,cc),
	HX_("submitComboHandle",5e,d5,54,f4),
	HX_("comboToSubmit",61,e2,49,08),
	HX_("comboInitialValue",bb,31,fa,f3),
	HX_("tooltipText",50,e3,ed,e4),
	HX_("tooltipImg",c0,da,10,11),
	HX_("tooltipImgMaxWidth",a2,5f,bb,b7),
	HX_("tooltipInvertY",c0,bd,ec,0c),
	HX_("tooltipX",f5,b5,8a,d0),
	HX_("tooltipY",f6,b5,8a,d0),
	HX_("tooltipShown",ce,40,c7,d9),
	HX_("tooltipWait",18,71,e6,e6),
	HX_("tooltipTime",b0,e2,f0,e4),
	HX_("tabNames",33,11,29,05),
	HX_("tabColors",e5,81,d3,27),
	HX_("tabHandle",dd,3f,4a,19),
	HX_("tabScroll",42,94,b1,a8),
	HX_("tabVertical",eb,af,31,45),
	HX_("sticky",29,ad,38,0b),
	HX_("scissor",1c,28,e7,04),
	HX_("elementsBaked",74,67,ba,d9),
	HX_("checkSelectImage",d7,c6,b4,cb),
	HX_("setScale",88,37,03,87),
	HX_("bakeElements",70,14,63,f5),
	HX_("remove",44,9c,88,04),
	HX_("registerInput",a7,86,86,b3),
	HX_("unregisterInput",ae,5c,00,71),
	HX_("begin",29,ea,55,b0),
	HX_("end",db,03,4d,00),
	HX_("beginRegion",fd,a3,b2,9a),
	HX_("endRegion",2f,0f,6f,40),
	HX_("beginSticky",32,90,5e,a5),
	HX_("endSticky",64,fb,1a,4b),
	HX_("endInput",2f,56,1b,bc),
	HX_("inputChanged",0a,0a,f9,64),
	HX_("windowDirty",02,e6,a2,ca),
	HX_("window",f0,93,8c,52),
	HX_("endWindow",2b,e2,6e,92),
	HX_("scroll",0d,d8,64,47),
	HX_("tab",55,5a,58,00),
	HX_("drawTabs",a2,5a,60,61),
	HX_("panel",04,7b,52,bd),
	HX_("image",5b,1f,69,bd),
	HX_("text",ad,cc,f9,4c),
	HX_("splitText",a7,58,59,51),
	HX_("startTextEdit",d9,7f,c5,4a),
	HX_("submitTextEdit",8f,09,7c,f2),
	HX_("updateTextEdit",80,10,34,7b),
	HX_("textInput",1d,54,0b,57),
	HX_("setCursorToInput",57,67,e6,d1),
	HX_("deselectText",8a,64,1c,42),
	HX_("button",f2,61,e0,d9),
	HX_("check",c8,98,b6,45),
	HX_("radio",fb,10,18,e4),
	HX_("combo",4e,28,5d,4a),
	HX_("slider",21,c6,04,70),
	HX_("separator",65,60,7f,31),
	HX_("tooltip",03,ad,8c,6a),
	HX_("tooltipImage",58,d7,08,1b),
	HX_("drawArrow",25,af,9a,ed),
	HX_("drawTree",82,43,6d,61),
	HX_("drawCheck",24,ce,c1,0d),
	HX_("drawRadio",57,46,23,ac),
	HX_("drawSlider",45,41,c8,b1),
	HX_("drawCombo",aa,5d,68,12),
	HX_("drawTooltip",5f,f1,d4,b3),
	HX_("drawTooltipText",ac,85,85,aa),
	HX_("drawTooltipImage",7c,45,1f,3a),
	HX_("drawString",f5,a3,f3,52),
	HX_("endElement",21,d4,76,ac),
	HX_("highlightNextRow",13,2f,2c,b6),
	HX_("getRatio",95,44,fb,43),
	HX_("row",1a,e2,56,00),
	HX_("indent",6c,0c,f3,93),
	HX_("unindent",85,3b,3a,96),
	HX_("fadeColor",47,ca,44,36),
	HX_("fill",83,ce,bb,43),
	HX_("rect",24,4d,a7,4b),
	HX_("drawRect",48,f7,10,60),
	HX_("isVisible",a8,f5,22,a7),
	HX_("getReleased",73,4b,db,9c),
	HX_("getPushed",ef,9d,83,ee),
	HX_("getStarted",4b,af,7c,84),
	HX_("getInitialHover",4e,3c,5f,12),
	HX_("getHover",46,f5,3b,8b),
	HX_("getInputInRect",5d,5a,df,04),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("setInputPosition",d1,d1,fe,19),
	HX_("onPenDown",7c,12,75,ee),
	HX_("onPenUp",f5,e5,34,56),
	HX_("onPenMove",2b,fd,67,f4),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("onCut",a3,19,63,32),
	HX_("onCopy",74,c4,4e,e4),
	HX_("onPaste",b4,f1,93,53),
	HX_("ELEMENT_W",b4,b4,43,c3),
	HX_("ELEMENT_H",a5,b4,43,c3),
	HX_("ELEMENT_OFFSET",16,9e,c2,08),
	HX_("ARROW_SIZE",57,2e,b6,3e),
	HX_("BUTTON_H",7b,41,b8,b5),
	HX_("CHECK_SIZE",f8,52,03,db),
	HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),
	HX_("FONT_SIZE",71,f0,3d,80),
	HX_("SCROLL_W",65,b4,da,e5),
	HX_("TEXT_OFFSET",25,60,d0,e5),
	HX_("TAB_W",8d,00,d2,88),
	HX_("HEADER_DRAG_H",af,03,fb,50),
	HX_("SCALE",6a,06,bd,f6),
	HX_("TOOLTIP_DELAY",c7,23,45,de),
	HX_("resize",f4,59,7b,08),
	::String(null()) };

static void Zui_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Zui_obj::current,"current");
	HX_MARK_MEMBER_NAME(Zui_obj::onBorderHover,"onBorderHover");
	HX_MARK_MEMBER_NAME(Zui_obj::onTextHover,"onTextHover");
	HX_MARK_MEMBER_NAME(Zui_obj::onDeselectText,"onDeselectText");
	HX_MARK_MEMBER_NAME(Zui_obj::alwaysRedrawWindow,"alwaysRedrawWindow");
	HX_MARK_MEMBER_NAME(Zui_obj::keyRepeat,"keyRepeat");
	HX_MARK_MEMBER_NAME(Zui_obj::dynamicGlyphLoad,"dynamicGlyphLoad");
	HX_MARK_MEMBER_NAME(Zui_obj::touchScroll,"touchScroll");
	HX_MARK_MEMBER_NAME(Zui_obj::touchHold,"touchHold");
	HX_MARK_MEMBER_NAME(Zui_obj::touchTooltip,"touchTooltip");
	HX_MARK_MEMBER_NAME(Zui_obj::keyRepeatTime,"keyRepeatTime");
	HX_MARK_MEMBER_NAME(Zui_obj::textToPaste,"textToPaste");
	HX_MARK_MEMBER_NAME(Zui_obj::textToCopy,"textToCopy");
	HX_MARK_MEMBER_NAME(Zui_obj::isCut,"isCut");
	HX_MARK_MEMBER_NAME(Zui_obj::isCopy,"isCopy");
	HX_MARK_MEMBER_NAME(Zui_obj::isPaste,"isPaste");
	HX_MARK_MEMBER_NAME(Zui_obj::copyReceiver,"copyReceiver");
	HX_MARK_MEMBER_NAME(Zui_obj::copyFrame,"copyFrame");
	HX_MARK_MEMBER_NAME(Zui_obj::comboFirst,"comboFirst");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Zui_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Zui_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Zui_obj::onBorderHover,"onBorderHover");
	HX_VISIT_MEMBER_NAME(Zui_obj::onTextHover,"onTextHover");
	HX_VISIT_MEMBER_NAME(Zui_obj::onDeselectText,"onDeselectText");
	HX_VISIT_MEMBER_NAME(Zui_obj::alwaysRedrawWindow,"alwaysRedrawWindow");
	HX_VISIT_MEMBER_NAME(Zui_obj::keyRepeat,"keyRepeat");
	HX_VISIT_MEMBER_NAME(Zui_obj::dynamicGlyphLoad,"dynamicGlyphLoad");
	HX_VISIT_MEMBER_NAME(Zui_obj::touchScroll,"touchScroll");
	HX_VISIT_MEMBER_NAME(Zui_obj::touchHold,"touchHold");
	HX_VISIT_MEMBER_NAME(Zui_obj::touchTooltip,"touchTooltip");
	HX_VISIT_MEMBER_NAME(Zui_obj::keyRepeatTime,"keyRepeatTime");
	HX_VISIT_MEMBER_NAME(Zui_obj::textToPaste,"textToPaste");
	HX_VISIT_MEMBER_NAME(Zui_obj::textToCopy,"textToCopy");
	HX_VISIT_MEMBER_NAME(Zui_obj::isCut,"isCut");
	HX_VISIT_MEMBER_NAME(Zui_obj::isCopy,"isCopy");
	HX_VISIT_MEMBER_NAME(Zui_obj::isPaste,"isPaste");
	HX_VISIT_MEMBER_NAME(Zui_obj::copyReceiver,"copyReceiver");
	HX_VISIT_MEMBER_NAME(Zui_obj::copyFrame,"copyFrame");
	HX_VISIT_MEMBER_NAME(Zui_obj::comboFirst,"comboFirst");
};

#endif

::hx::Class Zui_obj::__mClass;

static ::String Zui_obj_sStaticFields[] = {
	HX_("current",39,9c,e3,cb),
	HX_("onBorderHover",51,ce,c7,1a),
	HX_("onTextHover",b0,58,95,e6),
	HX_("onDeselectText",49,c4,0b,6c),
	HX_("alwaysRedrawWindow",f6,05,3b,16),
	HX_("keyRepeat",5a,16,84,9e),
	HX_("dynamicGlyphLoad",73,e2,c6,aa),
	HX_("touchScroll",2c,3d,9b,ac),
	HX_("touchHold",9e,58,7f,0a),
	HX_("touchTooltip",04,c3,ee,94),
	HX_("keyRepeatTime",87,43,2d,0b),
	HX_("textToPaste",ab,9a,5a,65),
	HX_("textToCopy",5d,a7,6e,ae),
	HX_("isCut",b8,af,49,c1),
	HX_("isCopy",bf,80,2b,5f),
	HX_("isPaste",09,f7,db,59),
	HX_("copyReceiver",04,fa,d5,de),
	HX_("copyFrame",38,9c,7e,8c),
	HX_("comboFirst",02,e5,92,0e),
	HX_("extractColoring",c0,75,25,15),
	HX_("isChar",e0,23,26,5f),
	HX_("checkStart",7a,76,fb,93),
	::String(null())
};

void Zui_obj::__register()
{
	Zui_obj _hx_dummy;
	Zui_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("zui.Zui",0e,3a,bb,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Zui_obj::__GetStatic;
	__mClass->mSetStaticField = &Zui_obj::__SetStatic;
	__mClass->mMarkFunc = Zui_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Zui_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Zui_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Zui_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Zui_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Zui_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Zui_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Zui_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_44_boot)
HXDLIN(  44)		current = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_45_boot)
HXDLIN(  45)		onBorderHover = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_46_boot)
HXDLIN(  46)		onTextHover = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_47_boot)
HXDLIN(  47)		onDeselectText = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_48_boot)
HXDLIN(  48)		alwaysRedrawWindow = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_49_boot)
HXDLIN(  49)		keyRepeat = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_50_boot)
HXDLIN(  50)		dynamicGlyphLoad = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_51_boot)
HXDLIN(  51)		touchScroll = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_52_boot)
HXDLIN(  52)		touchHold = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_53_boot)
HXDLIN(  53)		touchTooltip = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_59_boot)
HXDLIN(  59)		keyRepeatTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_90_boot)
HXDLIN(  90)		textToPaste = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_91_boot)
HXDLIN(  91)		textToCopy = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_92_boot)
HXDLIN(  92)		isCut = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_93_boot)
HXDLIN(  93)		isCopy = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_94_boot)
HXDLIN(  94)		isPaste = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_95_boot)
HXDLIN(  95)		copyReceiver = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_96_boot)
HXDLIN(  96)		copyFrame = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1318_boot)
HXDLIN(1318)		comboFirst = true;
            	}
}

} // end namespace zui
