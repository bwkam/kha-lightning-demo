// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_zui_Id
#include <hxinc/zui/Id.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_28bd8c365cfff039_9_boot,"zui.Id","boot",0xacf59e65,"zui.Id.boot","Sources/zui/Id.hx",9,0x8555d5eb)
namespace zui{

void Id_obj::__construct() { }

Dynamic Id_obj::__CreateEmpty() { return new Id_obj; }

void *Id_obj::_hx_vtable = 0;

Dynamic Id_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Id_obj > _hx_result = new Id_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Id_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11c7d365;
}

int Id_obj::i;


Id_obj::Id_obj()
{
}

bool Id_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { outValue = ( i ); return true; }
	}
	return false;
}

bool Id_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Id_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Id_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Id_obj::i,HX_("i",69,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Id_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Id_obj::i,"i");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Id_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Id_obj::i,"i");
};

#endif

::hx::Class Id_obj::__mClass;

static ::String Id_obj_sStaticFields[] = {
	HX_("i",69,00,00,00),
	::String(null())
};

void Id_obj::__register()
{
	Id_obj _hx_dummy;
	Id_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("zui.Id",1b,73,f6,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Id_obj::__GetStatic;
	__mClass->mSetStaticField = &Id_obj::__SetStatic;
	__mClass->mMarkFunc = Id_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Id_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Id_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Id_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Id_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Id_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Id_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_28bd8c365cfff039_9_boot)
HXDLIN(   9)		i = 0;
            	}
}

} // end namespace zui
