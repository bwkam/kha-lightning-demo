// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <hxinc/sys/FileSystem.h>
#endif
#ifndef INCLUDED_zui_Ext
#include <hxinc/zui/Ext.h>
#endif
#ifndef INCLUDED_zui_Handle
#include <hxinc/zui/Handle.h>
#endif
#ifndef INCLUDED_zui_Zui
#include <hxinc/zui/Zui.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_9_floatInput,"zui.Ext","floatInput",0x0f643abb,"zui.Ext.floatInput","Sources/zui/Ext.hx",9,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_17_initPath,"zui.Ext","initPath",0xdea47182,"zui.Ext.initPath","Sources/zui/Ext.hx",17,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_24_fileBrowser,"zui.Ext","fileBrowser",0x70db69ff,"zui.Ext.fileBrowser","Sources/zui/Ext.hx",24,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_103_inlineRadio,"zui.Ext","inlineRadio",0xcb8ca155,"zui.Ext.inlineRadio","Sources/zui/Ext.hx",103,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_150_colorWheel,"zui.Ext","colorWheel",0x20d3ee25,"zui.Ext.colorWheel","Sources/zui/Ext.hx",150,0x3e745f95)
static const ::String _hx_array_data_2cab4d61_8[] = {
	HX_("RGB",ed,76,3e,00),HX_("HSV",eb,ea,36,00),HX_("Hex",bb,fa,36,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_293_rightAlignNumber,"zui.Ext","rightAlignNumber",0xc94b269f,"zui.Ext.rightAlignNumber","Sources/zui/Ext.hx",293,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_304_textArea,"zui.Ext","textArea",0xd30b3b87,"zui.Ext.textArea","Sources/zui/Ext.hx",304,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_432_scrollAlign,"zui.Ext","scrollAlign",0x90aeaceb,"zui.Ext.scrollAlign","Sources/zui/Ext.hx",432,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_443_beginMenu,"zui.Ext","beginMenu",0xa988df1b,"zui.Ext.beginMenu","Sources/zui/Ext.hx",443,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_452_endMenu,"zui.Ext","endMenu",0x4b47970d,"zui.Ext.endMenu","Sources/zui/Ext.hx",452,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_457_menuButton,"zui.Ext","menuButton",0xef123ede,"zui.Ext.menuButton","Sources/zui/Ext.hx",457,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_463_MENUBAR_H,"zui.Ext","MENUBAR_H",0xc912a030,"zui.Ext.MENUBAR_H","Sources/zui/Ext.hx",463,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_466_dist,"zui.Ext","dist",0x09b3a993,"zui.Ext.dist","Sources/zui/Ext.hx",466,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_472_fract,"zui.Ext","fract",0xa03314b9,"zui.Ext.fract","Sources/zui/Ext.hx",472,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_475_mix,"zui.Ext","mix",0x316ef40f,"zui.Ext.mix","Sources/zui/Ext.hx",475,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_478_clamp,"zui.Ext","clamp",0xe208182e,"zui.Ext.clamp","Sources/zui/Ext.hx",478,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_481_step,"zui.Ext","step",0x13a62979,"zui.Ext.step","Sources/zui/Ext.hx",481,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_489_hsvToRgb,"zui.Ext","hsvToRgb",0x4fa0a1f4,"zui.Ext.hsvToRgb","Sources/zui/Ext.hx",489,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_503_rgbToHsv,"zui.Ext","rgbToHsv",0x996cc2b0,"zui.Ext.rgbToHsv","Sources/zui/Ext.hx",503,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_22_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",22,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_23_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",23,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_148_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",148,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_149_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",149,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_300_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",300,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_301_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",301,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_302_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",302,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_441_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",441,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_442_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",442,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_484_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",484,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_485_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",485,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_486_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",486,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_487_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",487,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_488_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",488,0x3e745f95)
static const Float _hx_array_data_2cab4d61_43[] = {
	0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_498_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",498,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_499_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",499,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_500_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",500,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_501_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",501,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_502_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",502,0x3e745f95)
namespace zui{

void Ext_obj::__construct() { }

Dynamic Ext_obj::__CreateEmpty() { return new Ext_obj; }

void *Ext_obj::_hx_vtable = 0;

Dynamic Ext_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Ext_obj > _hx_result = new Ext_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Ext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x262c4873;
}

Float Ext_obj::floatInput( ::zui::Zui ui, ::zui::Handle handle,::String __o_label,::hx::Null< int >  __o_align,::hx::Null< Float >  __o_precision){
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		int align = __o_align.Default(0);
            		Float precision = __o_precision.Default(((Float)1000.0));
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_9_floatInput)
HXLINE(  10)		handle->_hx_set_text(HX_CTX, ::Std_obj::string((( (Float)(::Math_obj::round((handle->value * precision))) ) / precision)));
HXLINE(  11)		::String text = ui->textInput(handle,label,align,null(),null());
HXLINE(  12)		handle->value = ::Std_obj::parseFloat(text);
HXLINE(  13)		return handle->value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Ext_obj,floatInput,return )

void Ext_obj::initPath( ::zui::Handle handle,::String systemId){
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_17_initPath)
HXDLIN(  17)		::String _hx_tmp;
HXDLIN(  17)		if ((systemId == HX_("Windows",63,06,c6,b5))) {
HXDLIN(  17)			_hx_tmp = HX_("C:\\Users",a3,d7,45,6a);
            		}
            		else {
HXDLIN(  17)			_hx_tmp = HX_("/",2f,00,00,00);
            		}
HXDLIN(  17)		handle->_hx_set_text(HX_CTX, _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,initPath,(void))

::String Ext_obj::dataPath;

::String Ext_obj::lastPath;

::String Ext_obj::fileBrowser( ::zui::Zui ui, ::zui::Handle handle,::hx::Null< bool >  __o_foldersOnly){
            		bool foldersOnly = __o_foldersOnly.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_24_fileBrowser)
HXLINE(  25)		::String sep = HX_("/",2f,00,00,00);
HXLINE(  48)		if ((handle->text == HX_("",00,00,00,00))) {
HXLINE(  48)			::zui::Ext_obj::initPath(handle,::kha::System_obj::get_systemId());
            		}
HXLINE(  49)		::Array< ::String > files;
HXDLIN(  49)		if (::sys::FileSystem_obj::isDirectory(handle->text)) {
HXLINE(  49)			files = ::sys::FileSystem_obj::readDirectory(handle->text);
            		}
            		else {
HXLINE(  49)			files = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(  77)		int i1 = handle->text.indexOf(HX_("/",2f,00,00,00),null());
HXLINE(  78)		int i2 = handle->text.indexOf(HX_("\\",5c,00,00,00),null());
HXLINE(  79)		bool nested;
HXLINE(  80)		bool nested1;
HXDLIN(  80)		if ((i1 > -1)) {
HXLINE(  80)			nested1 = ((handle->text.length - 1) > i1);
            		}
            		else {
HXLINE(  80)			nested1 = false;
            		}
HXDLIN(  80)		if (!(nested1)) {
HXLINE(  81)			if ((i2 > -1)) {
HXLINE(  79)				nested = ((handle->text.length - 1) > i2);
            			}
            			else {
HXLINE(  79)				nested = false;
            			}
            		}
            		else {
HXLINE(  79)			nested = true;
            		}
HXLINE(  82)		handle->changed = false;
HXLINE(  83)		bool _hx_tmp;
HXDLIN(  83)		if (nested) {
HXLINE(  83)			_hx_tmp = ui->button(HX_("..",40,28,00,00),0,null());
            		}
            		else {
HXLINE(  83)			_hx_tmp = false;
            		}
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  84)			handle->changed = (ui->changed = true);
HXLINE(  85)			::String handle1 = handle->text;
HXDLIN(  85)			handle->_hx_set_text(HX_CTX, handle1.substring(0,handle->text.lastIndexOf(sep,null())));
HXLINE(  87)			bool _hx_tmp1;
HXDLIN(  87)			if ((handle->text.length == 2)) {
HXLINE(  87)				_hx_tmp1 = (handle->text.charAt(1) == HX_(":",3a,00,00,00));
            			}
            			else {
HXLINE(  87)				_hx_tmp1 = false;
            			}
HXDLIN(  87)			if (_hx_tmp1) {
HXLINE(  87)				 ::zui::Handle handle2 = handle;
HXDLIN(  87)				handle2->_hx_set_text(HX_CTX, (handle2->text + sep));
            			}
            		}
HXLINE(  91)		{
HXLINE(  91)			int _g = 0;
HXDLIN(  91)			while((_g < files->length)){
HXLINE(  91)				::String f = files->__get(_g);
HXDLIN(  91)				_g = (_g + 1);
HXLINE(  92)				bool _hx_tmp2;
HXDLIN(  92)				if ((f != HX_("",00,00,00,00))) {
HXLINE(  92)					_hx_tmp2 = (f.charAt(0) == HX_(".",2e,00,00,00));
            				}
            				else {
HXLINE(  92)					_hx_tmp2 = true;
            				}
HXDLIN(  92)				if (_hx_tmp2) {
HXLINE(  92)					continue;
            				}
HXLINE(  93)				if (ui->button(f,0,null())) {
HXLINE(  94)					handle->changed = (ui->changed = true);
HXLINE(  95)					if ((handle->text.charAt((handle->text.length - 1)) != sep)) {
HXLINE(  95)						 ::zui::Handle handle3 = handle;
HXDLIN(  95)						handle3->_hx_set_text(HX_CTX, (handle3->text + sep));
            					}
HXLINE(  96)					 ::zui::Handle handle4 = handle;
HXDLIN(  96)					handle4->_hx_set_text(HX_CTX, (handle4->text + f));
            				}
            			}
            		}
HXLINE( 100)		return handle->text;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,fileBrowser,return )

int Ext_obj::inlineRadio( ::zui::Zui ui, ::zui::Handle handle,::Array< ::String > texts,::hx::Null< int >  __o_align){
            		int align = __o_align.Default(0);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_103_inlineRadio)
HXLINE( 104)		if (!(ui->isVisible((( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))))) {
HXLINE( 105)			ui->endElement(null());
HXLINE( 106)			return handle->position;
            		}
HXLINE( 108)		Float step = (( (Float)(ui->_w) ) / ( (Float)(texts->length) ));
HXLINE( 109)		int hovered = -1;
HXLINE( 110)		if (ui->getHover(null())) {
HXLINE( 111)			int ix = ::Std_obj::_hx_int(((ui->inputX - ui->_x) - ui->_windowX));
HXLINE( 112)			{
HXLINE( 112)				int _g = 0;
HXDLIN( 112)				int _g1 = texts->length;
HXDLIN( 112)				while((_g < _g1)){
HXLINE( 112)					_g = (_g + 1);
HXDLIN( 112)					int i = (_g - 1);
HXLINE( 113)					if ((ix < ((( (Float)(i) ) * step) + step))) {
HXLINE( 114)						hovered = i;
HXLINE( 115)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
            		}
HXLINE( 119)		if (ui->getReleased(null())) {
HXLINE( 120)			handle->position = hovered;
HXLINE( 121)			handle->changed = (ui->changed = true);
            		}
            		else {
HXLINE( 123)			handle->changed = false;
            		}
HXLINE( 125)		{
HXLINE( 125)			int _g2 = 0;
HXDLIN( 125)			int _g3 = texts->length;
HXDLIN( 125)			while((_g2 < _g3)){
HXLINE( 125)				_g2 = (_g2 + 1);
HXDLIN( 125)				int i1 = (_g2 - 1);
HXLINE( 126)				if ((handle->position == i1)) {
HXLINE( 127)					ui->g->set_color(( (int)(ui->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),::hx::paccDynamic)) ));
HXLINE( 128)					if (!(ui->enabled)) {
HXLINE( 128)						ui->fadeColor();
            					}
HXLINE( 129)					ui->g->fillRect((ui->_x + (step * ( (Float)(i1) ))),(ui->_y + ui->buttonOffsetY),step,(( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            				}
            				else {
HXLINE( 131)					if ((hovered == i1)) {
HXLINE( 132)						ui->g->set_color(( (int)(ui->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic)) ));
HXLINE( 133)						if (!(ui->enabled)) {
HXLINE( 133)							ui->fadeColor();
            						}
HXLINE( 134)						ui->g->drawRect((ui->_x + (step * ( (Float)(i1) ))),(ui->_y + ui->buttonOffsetY),step,(( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),null());
            					}
            				}
HXLINE( 136)				ui->g->set_color(( (int)(ui->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) ));
HXLINE( 137)				 ::zui::Zui ui1 = ui;
HXDLIN( 137)				ui1->_x = (ui1->_x + (step * ( (Float)(i1) )));
HXLINE( 138)				int _w = ui->_w;
HXLINE( 139)				ui->_w = ::Std_obj::_hx_int(step);
HXLINE( 140)				ui->drawString(ui->g,texts->__get(i1),null(),0,align,null());
HXLINE( 141)				 ::zui::Zui ui2 = ui;
HXDLIN( 141)				ui2->_x = (ui2->_x - (step * ( (Float)(i1) )));
HXLINE( 142)				ui->_w = _w;
            			}
            		}
HXLINE( 144)		ui->endElement(null());
HXLINE( 145)		return handle->position;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,inlineRadio,return )

 ::zui::Handle Ext_obj::wheelSelectedHandle;

 ::zui::Handle Ext_obj::gradientSelectedHandle;

int Ext_obj::colorWheel( ::zui::Zui ui, ::zui::Handle handle,::hx::Null< bool >  __o_alpha, ::Dynamic w, ::Dynamic h,::hx::Null< bool >  __o_colorPreview, ::Dynamic picker){
            		bool alpha = __o_alpha.Default(false);
            		bool colorPreview = __o_colorPreview.Default(true);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_150_colorWheel)
HXLINE( 151)		if (::hx::IsNull( w )) {
HXLINE( 151)			w = ui->_w;
            		}
HXLINE( 152)		::zui::Ext_obj::rgbToHsv(( (Float)((( (float)(::hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),( (Float)((( (float)(::hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),( (Float)((( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),::zui::Ext_obj::ar);
HXLINE( 153)		Float chue = ::zui::Ext_obj::ar->__get(0);
HXLINE( 154)		Float csat = ::zui::Ext_obj::ar->__get(1);
HXLINE( 155)		Float cval = ::zui::Ext_obj::ar->__get(2);
HXLINE( 156)		float calpha = (( (float)(::hx::UShr(handle->color,24)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXLINE( 158)		Float px = ui->_x;
HXLINE( 159)		Float py = ui->_y;
HXLINE( 160)		bool scroll;
HXDLIN( 160)		if (::hx::IsNotNull( ui->currentWindow )) {
HXLINE( 160)			scroll = ui->currentWindow->scrollEnabled;
            		}
            		else {
HXLINE( 160)			scroll = false;
            		}
HXLINE( 161)		if (!(scroll)) {
HXLINE( 162)			w = (w - ::Std_obj::_hx_int((( (Float)(ui->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE( 163)			px = (px + (( (Float)(::Std_obj::_hx_int((( (Float)(ui->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ) / ( (Float)(2) )));
            		}
HXLINE( 165)		Float _x = ui->_x;
HXLINE( 166)		Float _y = ui->_y;
HXLINE( 167)		int _w = ui->_w;
HXLINE( 168)		ui->_w = ::Std_obj::_hx_int((( (Float)(28) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 169)		bool _hx_tmp;
HXDLIN( 169)		if (::hx::IsNotNull( picker )) {
HXLINE( 169)			_hx_tmp = ui->button(HX_("P",50,00,00,00),null(),null());
            		}
            		else {
HXLINE( 169)			_hx_tmp = false;
            		}
HXDLIN( 169)		if (_hx_tmp) {
HXLINE( 170)			picker();
HXLINE( 171)			ui->changed = false;
HXLINE( 172)			handle->changed = false;
HXLINE( 173)			return handle->color;
            		}
HXLINE( 175)		ui->_x = _x;
HXLINE( 176)		ui->_y = _y;
HXLINE( 177)		ui->_w = _w;
HXLINE( 178)		 ::kha::Image ui1 = ( ( ::kha::Image)(ui->ops->__Field(HX_("color_wheel",7f,99,35,4b),::hx::paccDynamic)) );
HXDLIN( 178)		ui->image(ui1,::kha::_Color::Color_Impl__obj::fromFloats(( (float)(cval) ),( (float)(cval) ),( (float)(cval) ),null()),null(),null(),null(),null(),null());
HXLINE( 180)		Float ph = (ui->_y - py);
HXLINE( 181)		Float ox = (px + (( (Float)(w) ) / ( (Float)(2) )));
HXLINE( 182)		Float oy = (py + (ph / ( (Float)(2) )));
HXLINE( 183)		Float cw = (( (Float)(w) ) * ((Float)0.7));
HXLINE( 184)		Float cwh = (cw / ( (Float)(2) ));
HXLINE( 185)		Float cx = ox;
HXLINE( 186)		Float cy = (oy + (csat * cwh));
HXLINE( 187)		Float gradTx = (px + (((Float)0.897) * ( (Float)(w) )));
HXLINE( 188)		Float gradTy = (oy - cwh);
HXLINE( 189)		Float gradW = (((Float)0.0777) * ( (Float)(w) ));
HXLINE( 190)		Float gradH = cw;
HXLINE( 192)		Float theta = (chue * (::Math_obj::PI * ((Float)2.0)));
HXLINE( 193)		Float cx2 = (((::Math_obj::cos(theta) * (cx - ox)) - (::Math_obj::sin(theta) * (cy - oy))) + ox);
HXLINE( 194)		Float cy2 = (((::Math_obj::sin(theta) * (cx - ox)) + (::Math_obj::cos(theta) * (cy - oy))) + oy);
HXLINE( 195)		cx = cx2;
HXLINE( 196)		cy = cy2;
HXLINE( 198)		Float _hx_tmp1;
HXDLIN( 198)		if (scroll) {
HXLINE( 198)			_hx_tmp1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 198)			_hx_tmp1 = (( (Float)(::Std_obj::_hx_int((( (Float)(ui->t->__Field(HX_("SCROLL_W",65,b4,da,e5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )))) ) / ( (Float)(2) ));
            		}
HXDLIN( 198)		ui->_x = (px - _hx_tmp1);
HXLINE( 199)		ui->_y = py;
HXLINE( 200)		ui->image(( ( ::kha::Image)(ui->ops->__Field(HX_("black_white_gradient",46,8b,fc,fa),::hx::paccDynamic)) ),null(),null(),null(),null(),null(),null());
HXLINE( 202)		ui->g->set_color(-16777216);
HXLINE( 203)		ui->g->fillRect((cx - (( (Float)(3) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(cy - (( (Float)(3) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(( (Float)(6) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(( (Float)(6) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 204)		ui->g->set_color(-1);
HXLINE( 205)		ui->g->fillRect((cx - (( (Float)(2) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(cy - (( (Float)(2) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(( (Float)(4) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(( (Float)(4) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 207)		ui->g->set_color(-16777216);
HXLINE( 208)		ui->g->fillRect(((gradTx + (gradW / ( (Float)(2) ))) - (( (Float)(3) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),((gradTy + ((( (Float)(1) ) - cval) * gradH)) - (( (Float)(3) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(( (Float)(6) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(( (Float)(6) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 209)		ui->g->set_color(-1);
HXLINE( 210)		ui->g->fillRect(((gradTx + (gradW / ( (Float)(2) ))) - (( (Float)(2) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),((gradTy + ((( (Float)(1) ) - cval) * gradH)) - (( (Float)(2) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))),(( (Float)(4) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )),(( (Float)(4) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 212)		if (alpha) {
HXLINE( 213)			 ::zui::Handle alphaHandle = handle->nest(1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("value",71,7f,b8,31),(( (Float)(::Math_obj::round(( (Float)((calpha * ( (float)(100) ))) ))) ) / ( (Float)(100) )))));
HXLINE( 214)			calpha = ( (float)(ui->slider(alphaHandle,HX_("Alpha",3e,17,c4,b4),((Float)0.0),((Float)1.0),true,null(),null(),null(),null())) );
HXLINE( 215)			if (alphaHandle->changed) {
HXLINE( 215)				handle->changed = (ui->changed = true);
            			}
            		}
HXLINE( 218)		Float gx = (ox + ui->_windowX);
HXLINE( 219)		Float gy = (oy + ui->_windowY);
HXLINE( 220)		bool _hx_tmp2;
HXDLIN( 220)		if (ui->inputStarted) {
HXLINE( 220)			_hx_tmp2 = ui->getInputInRect((gx - cwh),(gy - cwh),cw,cw,null());
            		}
            		else {
HXLINE( 220)			_hx_tmp2 = false;
            		}
HXDLIN( 220)		if (_hx_tmp2) {
HXLINE( 220)			::zui::Ext_obj::wheelSelectedHandle = handle;
            		}
HXLINE( 221)		bool _hx_tmp3;
HXDLIN( 221)		if (ui->inputReleased) {
HXLINE( 221)			_hx_tmp3 = ::hx::IsNotNull( ::zui::Ext_obj::wheelSelectedHandle );
            		}
            		else {
HXLINE( 221)			_hx_tmp3 = false;
            		}
HXDLIN( 221)		if (_hx_tmp3) {
HXLINE( 221)			::zui::Ext_obj::wheelSelectedHandle = null();
HXDLIN( 221)			handle->changed = (ui->changed = true);
            		}
HXLINE( 222)		bool _hx_tmp4;
HXDLIN( 222)		if (ui->inputDown) {
HXLINE( 222)			_hx_tmp4 = ::hx::IsInstanceEq( ::zui::Ext_obj::wheelSelectedHandle,handle );
            		}
            		else {
HXLINE( 222)			_hx_tmp4 = false;
            		}
HXDLIN( 222)		if (_hx_tmp4) {
HXLINE( 223)			Float vx = (gx - ui->inputX);
HXDLIN( 223)			Float vy = (gy - ui->inputY);
HXDLIN( 223)			csat = (::Math_obj::min(::Math_obj::sqrt(((vx * vx) + (vy * vy))),cwh) / cwh);
HXLINE( 224)			Float angle = ::Math_obj::atan2((ui->inputX - gx),(ui->inputY - gy));
HXLINE( 225)			if ((angle < 0)) {
HXLINE( 225)				angle = (::Math_obj::PI + (::Math_obj::PI - ::Math_obj::abs(angle)));
            			}
HXLINE( 226)			angle = ((::Math_obj::PI * ( (Float)(2) )) - angle);
HXLINE( 227)			chue = (angle / (::Math_obj::PI * ( (Float)(2) )));
HXLINE( 228)			handle->changed = (ui->changed = true);
            		}
HXLINE( 231)		bool _hx_tmp5;
HXDLIN( 231)		if (ui->inputStarted) {
HXLINE( 231)			_hx_tmp5 = ui->getInputInRect((gradTx + ui->_windowX),(gradTy + ui->_windowY),gradW,gradH,null());
            		}
            		else {
HXLINE( 231)			_hx_tmp5 = false;
            		}
HXDLIN( 231)		if (_hx_tmp5) {
HXLINE( 231)			::zui::Ext_obj::gradientSelectedHandle = handle;
            		}
HXLINE( 232)		bool _hx_tmp6;
HXDLIN( 232)		if (ui->inputReleased) {
HXLINE( 232)			_hx_tmp6 = ::hx::IsNotNull( ::zui::Ext_obj::gradientSelectedHandle );
            		}
            		else {
HXLINE( 232)			_hx_tmp6 = false;
            		}
HXDLIN( 232)		if (_hx_tmp6) {
HXLINE( 232)			::zui::Ext_obj::gradientSelectedHandle = null();
HXDLIN( 232)			handle->changed = (ui->changed = true);
            		}
HXLINE( 233)		bool _hx_tmp7;
HXDLIN( 233)		if (ui->inputDown) {
HXLINE( 233)			_hx_tmp7 = ::hx::IsInstanceEq( ::zui::Ext_obj::gradientSelectedHandle,handle );
            		}
            		else {
HXLINE( 233)			_hx_tmp7 = false;
            		}
HXDLIN( 233)		if (_hx_tmp7) {
HXLINE( 234)			cval = ::Math_obj::max(((Float)0.01),::Math_obj::min(( (Float)(1) ),(( (Float)(1) ) - (((ui->inputY - gradTy) - ui->_windowY) / gradH))));
HXLINE( 235)			handle->changed = (ui->changed = true);
            		}
HXLINE( 238)		::zui::Ext_obj::hsvToRgb(chue,csat,cval,::zui::Ext_obj::ar);
HXLINE( 239)		handle->color = ::kha::_Color::Color_Impl__obj::fromFloats(( (float)(::zui::Ext_obj::ar->__get(0)) ),( (float)(::zui::Ext_obj::ar->__get(1)) ),( (float)(::zui::Ext_obj::ar->__get(2)) ),calpha);
HXLINE( 241)		if (colorPreview) {
HXLINE( 241)			ui->text(HX_("",00,00,00,00),2,handle->color);
            		}
HXLINE( 243)		int pos = ::zui::Ext_obj::inlineRadio(ui,::zui::Handle_obj::global->nest(24,null()),::Array_obj< ::String >::fromData( _hx_array_data_2cab4d61_8,3),null());
HXLINE( 244)		 ::zui::Handle h0 = handle->nest(0,null())->nest(0,null());
HXLINE( 245)		 ::zui::Handle h1 = handle->nest(0,null())->nest(1,null());
HXLINE( 246)		 ::zui::Handle h2 = handle->nest(0,null())->nest(2,null());
HXLINE( 247)		if ((pos == 0)) {
HXLINE( 248)			h0->value = ( (Float)((( (float)(::hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) );
HXLINE( 250)			{
HXLINE( 250)				float f = ( (float)(ui->slider(h0,HX_("R",52,00,00,00),0,1,true,null(),null(),null(),null())) );
HXDLIN( 250)				int _hx_tmp8 = (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr(handle->color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 24);
HXDLIN( 250)				int _hx_tmp9 = (_hx_tmp8 | (::Std_obj::_hx_int(( (Float)((f * ( (float)(255) ))) )) << 16));
HXDLIN( 250)				int _hx_tmp10 = (_hx_tmp9 | (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 8));
HXDLIN( 250)				handle->color = (_hx_tmp10 | ::Std_obj::_hx_int(( (Float)(((( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )));
            			}
HXLINE( 251)			h1->value = ( (Float)((( (float)(::hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) );
HXLINE( 253)			{
HXLINE( 253)				float f1 = ( (float)(ui->slider(h1,HX_("G",47,00,00,00),0,1,true,null(),null(),null(),null())) );
HXDLIN( 253)				int _hx_tmp11 = (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr(handle->color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 24);
HXDLIN( 253)				int _hx_tmp12 = (_hx_tmp11 | (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 16));
HXDLIN( 253)				int _hx_tmp13 = (_hx_tmp12 | (::Std_obj::_hx_int(( (Float)((f1 * ( (float)(255) ))) )) << 8));
HXDLIN( 253)				handle->color = (_hx_tmp13 | ::Std_obj::_hx_int(( (Float)(((( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )));
            			}
HXLINE( 254)			h2->value = ( (Float)((( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) );
HXLINE( 255)			{
HXLINE( 255)				float f2 = ( (float)(ui->slider(h2,HX_("B",42,00,00,00),0,1,true,null(),null(),null(),null())) );
HXDLIN( 255)				int _hx_tmp14 = (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr(handle->color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 24);
HXDLIN( 255)				int _hx_tmp15 = (_hx_tmp14 | (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 16));
HXDLIN( 255)				int _hx_tmp16 = (_hx_tmp15 | (::Std_obj::_hx_int(( (Float)(((( (float)(::hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )) * ( (float)(255) ))) )) << 8));
HXDLIN( 255)				handle->color = (_hx_tmp16 | ::Std_obj::_hx_int(( (Float)((f2 * ( (float)(255) ))) )));
            			}
            		}
            		else {
HXLINE( 257)			if ((pos == 1)) {
HXLINE( 258)				::zui::Ext_obj::rgbToHsv(( (Float)((( (float)(::hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),( (Float)((( (float)(::hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),( (Float)((( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),::zui::Ext_obj::ar);
HXLINE( 259)				h0->value = ::zui::Ext_obj::ar->__get(0);
HXLINE( 260)				h1->value = ::zui::Ext_obj::ar->__get(1);
HXLINE( 261)				h2->value = ::zui::Ext_obj::ar->__get(2);
HXLINE( 262)				Float chue1 = ui->slider(h0,HX_("H",48,00,00,00),0,1,true,null(),null(),null(),null());
HXLINE( 263)				Float csat1 = ui->slider(h1,HX_("S",53,00,00,00),0,1,true,null(),null(),null(),null());
HXLINE( 264)				Float cval1 = ui->slider(h2,HX_("V",56,00,00,00),0,1,true,null(),null(),null(),null());
HXLINE( 265)				::zui::Ext_obj::hsvToRgb(chue1,csat1,cval1,::zui::Ext_obj::ar);
HXLINE( 266)				handle->color = ::kha::_Color::Color_Impl__obj::fromFloats(( (float)(::zui::Ext_obj::ar->__get(0)) ),( (float)(::zui::Ext_obj::ar->__get(1)) ),( (float)(::zui::Ext_obj::ar->__get(2)) ),null());
            			}
            			else {
HXLINE( 268)				bool _hx_tmp17 = (pos == 2);
            			}
            		}
HXLINE( 285)		bool _hx_tmp18;
HXDLIN( 285)		bool _hx_tmp19;
HXDLIN( 285)		if (!(h0->changed)) {
HXLINE( 285)			_hx_tmp19 = h1->changed;
            		}
            		else {
HXLINE( 285)			_hx_tmp19 = true;
            		}
HXDLIN( 285)		if (!(_hx_tmp19)) {
HXLINE( 285)			_hx_tmp18 = h2->changed;
            		}
            		else {
HXLINE( 285)			_hx_tmp18 = true;
            		}
HXDLIN( 285)		if (_hx_tmp18) {
HXLINE( 285)			handle->changed = (ui->changed = true);
            		}
HXLINE( 287)		bool _hx_tmp20;
HXDLIN( 287)		Float _hx_tmp21;
HXDLIN( 287)		if (::hx::IsNull( h )) {
HXLINE( 287)			_hx_tmp21 = (ui->_y - py);
            		}
            		else {
HXLINE( 287)			_hx_tmp21 = ( (Float)(h) );
            		}
HXDLIN( 287)		if (ui->getInputInRect((ui->_windowX + px),(ui->_windowY + py),( (Float)(w) ),_hx_tmp21,null())) {
HXLINE( 287)			_hx_tmp20 = ui->inputReleased;
            		}
            		else {
HXLINE( 287)			_hx_tmp20 = false;
            		}
HXDLIN( 287)		if (_hx_tmp20) {
HXLINE( 288)			ui->changed = true;
            		}
HXLINE( 290)		return handle->color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Ext_obj,colorWheel,return )

::String Ext_obj::rightAlignNumber(int number,int length){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_293_rightAlignNumber)
HXLINE( 294)		::String s = (number + HX_("",00,00,00,00));
HXLINE( 295)		while((s.length < length)){
HXLINE( 296)			s = (HX_(" ",20,00,00,00) + s);
            		}
HXLINE( 297)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,rightAlignNumber,return )

bool Ext_obj::textAreaLineNumbers;

bool Ext_obj::textAreaScrollPastEnd;

 ::Dynamic Ext_obj::textAreaColoring;

::String Ext_obj::textArea( ::zui::Zui ui, ::zui::Handle handle,::hx::Null< int >  __o_align,::hx::Null< bool >  __o_editable,::String __o_label,::hx::Null< bool >  __o_wordWrap){
            		int align = __o_align.Default(0);
            		bool editable = __o_editable.Default(true);
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		bool wordWrap = __o_wordWrap.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_304_textArea)
HXLINE( 305)		handle->_hx_set_text(HX_CTX, ::StringTools_obj::replace(handle->text,HX_("\t",09,00,00,00),HX_("    ",00,38,3f,15)));
HXLINE( 306)		bool selected = ::hx::IsInstanceEq( ui->textSelectedHandle,handle );
HXLINE( 307)		::Array< ::String > lines = handle->text.split(HX_("\n",0a,00,00,00));
HXLINE( 308)		bool showLabel;
HXDLIN( 308)		if ((lines->length == 1)) {
HXLINE( 308)			showLabel = (lines->__get(0) == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 308)			showLabel = false;
            		}
HXLINE( 309)		bool keyPressed;
HXDLIN( 309)		if (selected) {
HXLINE( 309)			keyPressed = ui->isKeyPressed;
            		}
            		else {
HXLINE( 309)			keyPressed = false;
            		}
HXLINE( 310)		ui->highlightOnSelect = false;
HXLINE( 311)		ui->tabSwitchEnabled = false;
HXLINE( 313)		bool _hx_tmp;
HXDLIN( 313)		if (wordWrap) {
HXLINE( 313)			_hx_tmp = (handle->text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 313)			_hx_tmp = false;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 314)			bool cursorSet = false;
HXLINE( 315)			int cursorPos = ui->cursorX;
HXLINE( 316)			{
HXLINE( 316)				int _g = 0;
HXDLIN( 316)				int _g1 = handle->position;
HXDLIN( 316)				while((_g < _g1)){
HXLINE( 316)					_g = (_g + 1);
HXDLIN( 316)					int i = (_g - 1);
HXDLIN( 316)					cursorPos = (cursorPos + (lines->__get(i).length + 1));
            				}
            			}
HXLINE( 317)			::Array< ::String > words = lines->join(HX_(" ",20,00,00,00)).split(HX_(" ",20,00,00,00));
HXLINE( 318)			lines = ::Array_obj< ::String >::__new(0);
HXLINE( 319)			::String line = HX_("",00,00,00,00);
HXLINE( 320)			{
HXLINE( 320)				int _g2 = 0;
HXDLIN( 320)				while((_g2 < words->length)){
HXLINE( 320)					::String w = words->__get(_g2);
HXDLIN( 320)					_g2 = (_g2 + 1);
HXLINE( 321)					Float linew = ( ( ::kha::Kravur)(ui->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(ui->fontSize,((line + HX_(" ",20,00,00,00)) + w));
HXLINE( 322)					Float wordw = ( ( ::kha::Kravur)(ui->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(ui->fontSize,(HX_(" ",20,00,00,00) + w));
HXLINE( 323)					bool _hx_tmp1;
HXDLIN( 323)					if ((linew > (ui->_w - 10))) {
HXLINE( 323)						_hx_tmp1 = (linew > wordw);
            					}
            					else {
HXLINE( 323)						_hx_tmp1 = false;
            					}
HXDLIN( 323)					if (_hx_tmp1) {
HXLINE( 324)						lines->push(line);
HXLINE( 325)						line = HX_("",00,00,00,00);
            					}
HXLINE( 327)					if ((line == HX_("",00,00,00,00))) {
HXLINE( 327)						line = w;
            					}
            					else {
HXLINE( 327)						line = ((line + HX_(" ",20,00,00,00)) + w);
            					}
HXLINE( 329)					int linesLen = lines->length;
HXLINE( 330)					{
HXLINE( 330)						int _g3 = 0;
HXDLIN( 330)						while((_g3 < lines->length)){
HXLINE( 330)							::String l = lines->__get(_g3);
HXDLIN( 330)							_g3 = (_g3 + 1);
HXDLIN( 330)							linesLen = (linesLen + l.length);
            						}
            					}
HXLINE( 331)					bool _hx_tmp2;
HXDLIN( 331)					bool _hx_tmp3;
HXDLIN( 331)					if (selected) {
HXLINE( 331)						_hx_tmp3 = !(cursorSet);
            					}
            					else {
HXLINE( 331)						_hx_tmp3 = false;
            					}
HXDLIN( 331)					if (_hx_tmp3) {
HXLINE( 331)						_hx_tmp2 = (cursorPos <= (linesLen + line.length));
            					}
            					else {
HXLINE( 331)						_hx_tmp2 = false;
            					}
HXDLIN( 331)					if (_hx_tmp2) {
HXLINE( 332)						cursorSet = true;
HXLINE( 333)						handle->position = lines->length;
HXLINE( 334)						ui->cursorX = (ui->highlightAnchor = (cursorPos - linesLen));
            					}
            				}
            			}
HXLINE( 337)			lines->push(line);
HXLINE( 338)			if (selected) {
HXLINE( 339)				ui->_hx_set_textSelected(HX_CTX, (handle->_hx_set_text(HX_CTX, lines->__get(handle->position))));
            			}
            		}
HXLINE( 342)		int cursorStartX = ui->cursorX;
HXLINE( 344)		if (::zui::Ext_obj::textAreaLineNumbers) {
HXLINE( 345)			Float _y = ui->_y;
HXLINE( 346)			int _TEXT_COL = ( (int)(ui->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) );
HXLINE( 347)			ui->t->__SetField(HX_("TEXT_COL",4e,50,e5,c5),ui->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 348)			int maxLength = ::Math_obj::ceil((::Math_obj::log((lines->length + ((Float)0.5))) / ::Math_obj::log(( (Float)(10) ))));
HXLINE( 349)			{
HXLINE( 349)				int _g4 = 0;
HXDLIN( 349)				int _g5 = lines->length;
HXDLIN( 349)				while((_g4 < _g5)){
HXLINE( 349)					_g4 = (_g4 + 1);
HXDLIN( 349)					int i1 = (_g4 - 1);
HXLINE( 350)					ui->text(::zui::Ext_obj::rightAlignNumber((i1 + 1),maxLength),null(),null());
HXLINE( 351)					 ::zui::Zui ui1 = ui;
HXDLIN( 351)					ui1->_y = (ui1->_y - (( (Float)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            				}
            			}
HXLINE( 353)			ui->t->__SetField(HX_("TEXT_COL",4e,50,e5,c5),_TEXT_COL,::hx::paccDynamic);
HXLINE( 354)			ui->_y = _y;
HXLINE( 355)			 ::zui::Zui ui2 = ui;
HXDLIN( 355)			ui2->_x = (ui2->_x + (((lines->length + HX_("",00,00,00,00)).length * 16) + 4));
            		}
HXLINE( 358)		ui->g->set_color(( (int)(ui->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE( 359)		{
HXLINE( 359)			 ::kha::graphics2::Graphics g = ui->g;
HXDLIN( 359)			Float x = (ui->_x + ui->buttonOffsetY);
HXDLIN( 359)			Float y = (ui->_y + ui->buttonOffsetY);
HXDLIN( 359)			Float w1 = (( (Float)(ui->_w) ) - (ui->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 359)			Float h = ((( (Float)(lines->length) ) * (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) - (ui->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 359)			Float strength = ((Float)0.0);
HXDLIN( 359)			if ((strength == ((Float)0.0))) {
HXLINE( 359)				strength = ( (Float)(1) );
            			}
HXDLIN( 359)			if (!(ui->enabled)) {
HXLINE( 359)				ui->fadeColor();
            			}
HXDLIN( 359)			g->fillRect(x,(y - ( (Float)(1) )),w1,(h + 1));
            		}
HXLINE( 361)		 ::Dynamic _textColoring = ui->textColoring;
HXLINE( 362)		ui->_hx_set_textColoring(HX_CTX, ::zui::Ext_obj::textAreaColoring);
HXLINE( 364)		{
HXLINE( 364)			int _g6 = 0;
HXDLIN( 364)			int _g7 = lines->length;
HXDLIN( 364)			while((_g6 < _g7)){
HXLINE( 364)				_g6 = (_g6 + 1);
HXDLIN( 364)				int i2 = (_g6 - 1);
HXLINE( 365)				bool _hx_tmp4;
HXDLIN( 365)				bool _hx_tmp5;
HXDLIN( 365)				if (!(selected)) {
HXLINE( 365)					_hx_tmp5 = ui->getHover(null());
            				}
            				else {
HXLINE( 365)					_hx_tmp5 = false;
            				}
HXDLIN( 365)				if (!(_hx_tmp5)) {
HXLINE( 365)					if (selected) {
HXLINE( 365)						_hx_tmp4 = (i2 == handle->position);
            					}
            					else {
HXLINE( 365)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 365)					_hx_tmp4 = true;
            				}
HXDLIN( 365)				if (_hx_tmp4) {
HXLINE( 366)					handle->position = i2;
HXLINE( 367)					handle->_hx_set_text(HX_CTX, lines->__get(i2));
HXLINE( 368)					ui->_hx_set_submitTextHandle(HX_CTX, null());
HXLINE( 369)					::String _hx_tmp6;
HXDLIN( 369)					if (showLabel) {
HXLINE( 369)						_hx_tmp6 = label;
            					}
            					else {
HXLINE( 369)						_hx_tmp6 = HX_("",00,00,00,00);
            					}
HXDLIN( 369)					ui->textInput(handle,_hx_tmp6,align,editable,null());
HXLINE( 370)					bool _hx_tmp7;
HXDLIN( 370)					bool _hx_tmp8;
HXDLIN( 370)					if (keyPressed) {
HXLINE( 370)						_hx_tmp8 = ::hx::IsNotEq( ui->key,13 );
            					}
            					else {
HXLINE( 370)						_hx_tmp8 = false;
            					}
HXDLIN( 370)					if (_hx_tmp8) {
HXLINE( 370)						_hx_tmp7 = ::hx::IsNotEq( ui->key,27 );
            					}
            					else {
HXLINE( 370)						_hx_tmp7 = false;
            					}
HXDLIN( 370)					if (_hx_tmp7) {
HXLINE( 371)						lines->setCtx( HX_CTX, i2,ui->textSelected);
            					}
            				}
            				else {
HXLINE( 375)					if (showLabel) {
HXLINE( 376)						int TEXT_COL = ( (int)(ui->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),::hx::paccDynamic)) );
HXLINE( 377)						ui->t->__SetField(HX_("TEXT_COL",4e,50,e5,c5),ui->t->__Field(HX_("LABEL_COL",f5,20,15,76),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 378)						ui->text(label,2,null());
HXLINE( 379)						ui->t->__SetField(HX_("TEXT_COL",4e,50,e5,c5),TEXT_COL,::hx::paccDynamic);
            					}
            					else {
HXLINE( 382)						ui->text(lines->__get(i2),align,null());
            					}
            				}
HXLINE( 385)				 ::zui::Zui ui3 = ui;
HXDLIN( 385)				ui3->_y = (ui3->_y - (( (Float)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            			}
            		}
HXLINE( 387)		 ::zui::Zui ui4 = ui;
HXDLIN( 387)		ui4->_y = (ui4->_y + (( (Float)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
HXLINE( 388)		ui->_hx_set_textColoring(HX_CTX, _textColoring);
HXLINE( 390)		if (::zui::Ext_obj::textAreaScrollPastEnd) {
HXLINE( 391)			 ::zui::Zui ui5 = ui;
HXDLIN( 391)			ui5->_y = (ui5->_y + (((( (Float)(ui->_h) ) - ui->windowHeaderH) - (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) - (( (Float)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
            		}
HXLINE( 394)		if (keyPressed) {
HXLINE( 396)			bool _hx_tmp9;
HXDLIN( 396)			if (::hx::IsEq( ui->key,40 )) {
HXLINE( 396)				_hx_tmp9 = (handle->position < (lines->length - 1));
            			}
            			else {
HXLINE( 396)				_hx_tmp9 = false;
            			}
HXDLIN( 396)			if (_hx_tmp9) {
HXLINE( 397)				handle->position++;
HXLINE( 398)				::zui::Ext_obj::scrollAlign(ui,handle);
            			}
HXLINE( 400)			bool _hx_tmp10;
HXDLIN( 400)			if (::hx::IsEq( ui->key,38 )) {
HXLINE( 400)				_hx_tmp10 = (handle->position > 0);
            			}
            			else {
HXLINE( 400)				_hx_tmp10 = false;
            			}
HXDLIN( 400)			if (_hx_tmp10) {
HXLINE( 401)				handle->position--;
HXLINE( 402)				::zui::Ext_obj::scrollAlign(ui,handle);
            			}
HXLINE( 405)			bool _hx_tmp11;
HXDLIN( 405)			bool _hx_tmp12;
HXDLIN( 405)			if (editable) {
HXLINE( 405)				_hx_tmp12 = ::hx::IsEq( ui->key,13 );
            			}
            			else {
HXLINE( 405)				_hx_tmp12 = false;
            			}
HXDLIN( 405)			if (_hx_tmp12) {
HXLINE( 405)				_hx_tmp11 = !(wordWrap);
            			}
            			else {
HXLINE( 405)				_hx_tmp11 = false;
            			}
HXDLIN( 405)			if (_hx_tmp11) {
HXLINE( 406)				handle->position++;
HXLINE( 407)				int handle1 = handle->position;
HXDLIN( 407)				lines->insert(handle1,lines->__get((handle->position - 1)).substr(ui->cursorX,null()));
HXLINE( 408)				lines->setCtx( HX_CTX, (handle->position - 1),lines->__get((handle->position - 1)).substr(0,ui->cursorX));
HXLINE( 409)				ui->startTextEdit(handle,null());
HXLINE( 410)				ui->cursorX = (ui->highlightAnchor = 0);
HXLINE( 411)				::zui::Ext_obj::scrollAlign(ui,handle);
            			}
HXLINE( 414)			bool _hx_tmp13;
HXDLIN( 414)			bool _hx_tmp14;
HXDLIN( 414)			bool _hx_tmp15;
HXDLIN( 414)			if (editable) {
HXLINE( 414)				_hx_tmp15 = ::hx::IsEq( ui->key,8 );
            			}
            			else {
HXLINE( 414)				_hx_tmp15 = false;
            			}
HXDLIN( 414)			if (_hx_tmp15) {
HXLINE( 414)				_hx_tmp14 = (cursorStartX == 0);
            			}
            			else {
HXLINE( 414)				_hx_tmp14 = false;
            			}
HXDLIN( 414)			if (_hx_tmp14) {
HXLINE( 414)				_hx_tmp13 = (handle->position > 0);
            			}
            			else {
HXLINE( 414)				_hx_tmp13 = false;
            			}
HXDLIN( 414)			if (_hx_tmp13) {
HXLINE( 415)				handle->position--;
HXLINE( 416)				ui->cursorX = (ui->highlightAnchor = lines->__get(handle->position).length);
HXLINE( 417)				::Array< ::String > lines1 = lines;
HXDLIN( 417)				int index = handle->position;
HXDLIN( 417)				lines1->setCtx( HX_CTX, index,(lines1->__get(index) + lines->__get((handle->position + 1))));
HXLINE( 418)				lines->removeRange((handle->position + 1),1);
HXLINE( 419)				::zui::Ext_obj::scrollAlign(ui,handle);
            			}
HXLINE( 421)			ui->_hx_set_textSelected(HX_CTX, lines->__get(handle->position));
            		}
HXLINE( 424)		ui->highlightOnSelect = true;
HXLINE( 425)		ui->tabSwitchEnabled = true;
HXLINE( 426)		handle->_hx_set_text(HX_CTX, lines->join(HX_("\n",0a,00,00,00)));
HXLINE( 427)		return handle->text;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Ext_obj,textArea,return )

void Ext_obj::scrollAlign( ::zui::Zui ui, ::zui::Handle handle){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_432_scrollAlign)
HXDLIN( 432)		if ((((( (Float)((handle->position + 1)) ) * (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) + ui->currentWindow->scrollOffset) > (( (Float)(ui->_h) ) - ui->windowHeaderH))) {
HXLINE( 433)			 ::zui::Handle fh = ui->currentWindow;
HXDLIN( 433)			fh->scrollOffset = (fh->scrollOffset - (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            		}
            		else {
HXLINE( 436)			if ((((( (Float)((handle->position + 1)) ) * (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))) + ui->currentWindow->scrollOffset) < ui->windowHeaderH)) {
HXLINE( 437)				 ::zui::Handle fh1 = ui->currentWindow;
HXDLIN( 437)				fh1->scrollOffset = (fh1->scrollOffset + (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,scrollAlign,(void))

int Ext_obj::_ELEMENT_OFFSET;

int Ext_obj::_BUTTON_COL;

void Ext_obj::beginMenu( ::zui::Zui ui){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_443_beginMenu)
HXLINE( 444)		::zui::Ext_obj::_ELEMENT_OFFSET = ( (int)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),::hx::paccDynamic)) );
HXLINE( 445)		::zui::Ext_obj::_BUTTON_COL = ( (int)(ui->t->__Field(HX_("BUTTON_COL",13,50,64,c5),::hx::paccDynamic)) );
HXLINE( 446)		ui->t->__SetField(HX_("ELEMENT_OFFSET",16,9e,c2,08),0,::hx::paccDynamic);
HXLINE( 447)		ui->t->__SetField(HX_("BUTTON_COL",13,50,64,c5),ui->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 448)		ui->g->set_color(( (int)(ui->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),::hx::paccDynamic)) ));
HXLINE( 449)		ui->g->fillRect(( (Float)(0) ),( (Float)(0) ),ui->_windowW,((((( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ((Float)1.1)) + 2) + ui->buttonOffsetY));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ext_obj,beginMenu,(void))

void Ext_obj::endMenu( ::zui::Zui ui){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_452_endMenu)
HXLINE( 453)		ui->t->__SetField(HX_("ELEMENT_OFFSET",16,9e,c2,08),::zui::Ext_obj::_ELEMENT_OFFSET,::hx::paccDynamic);
HXLINE( 454)		ui->t->__SetField(HX_("BUTTON_COL",13,50,64,c5),::zui::Ext_obj::_BUTTON_COL,::hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ext_obj,endMenu,(void))

bool Ext_obj::menuButton( ::zui::Zui ui,::String text){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_457_menuButton)
HXLINE( 458)		Float _hx_tmp = ( ( ::kha::Kravur)(ui->ops->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) )->width(ui->fontSize,text);
HXDLIN( 458)		ui->_w = ::Std_obj::_hx_int((_hx_tmp + (( (Float)(25) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) ))));
HXLINE( 459)		return ui->button(text,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,menuButton,return )

Float Ext_obj::MENUBAR_H( ::zui::Zui ui){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_463_MENUBAR_H)
HXDLIN( 463)		return ((((( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),::hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),::hx::paccDynamic)) )) * ((Float)1.1)) + 2) + ui->buttonOffsetY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ext_obj,MENUBAR_H,return )

Float Ext_obj::dist(Float x1,Float y1,Float x2,Float y2){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_466_dist)
HXLINE( 467)		Float vx = (x1 - x2);
HXLINE( 468)		Float vy = (y1 - y2);
HXLINE( 469)		return ::Math_obj::sqrt(((vx * vx) + (vy * vy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,dist,return )

Float Ext_obj::fract(Float f){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_472_fract)
HXDLIN( 472)		return (f - ( (Float)(::Std_obj::_hx_int(f)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ext_obj,fract,return )

Float Ext_obj::mix(Float x,Float y,Float a){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_475_mix)
HXDLIN( 475)		return ((x * (((Float)1.0) - a)) + (y * a));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,mix,return )

Float Ext_obj::clamp(Float x,Float minVal,Float maxVal){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_478_clamp)
HXDLIN( 478)		return ::Math_obj::min(::Math_obj::max(x,minVal),maxVal);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,clamp,return )

Float Ext_obj::step(Float edge,Float x){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_481_step)
HXDLIN( 481)		if ((x < edge)) {
HXDLIN( 481)			return ((Float)0.0);
            		}
            		else {
HXDLIN( 481)			return ((Float)1.0);
            		}
HXDLIN( 481)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,step,return )

Float Ext_obj::kx;

Float Ext_obj::ky;

Float Ext_obj::kz;

Float Ext_obj::kw;

::Array< Float > Ext_obj::ar;

void Ext_obj::hsvToRgb(Float cR,Float cG,Float cB,::Array< Float > out){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_489_hsvToRgb)
HXLINE( 490)		Float f = (cR + ((Float)1.0));
HXDLIN( 490)		Float px = ::Math_obj::abs((((f - ( (Float)(::Std_obj::_hx_int(f)) )) * ((Float)6.0)) - ((Float)3.0)));
HXLINE( 491)		Float f1 = (cR + ((Float)0.66666666666666663));
HXDLIN( 491)		Float py = ::Math_obj::abs((((f1 - ( (Float)(::Std_obj::_hx_int(f1)) )) * ((Float)6.0)) - ((Float)3.0)));
HXLINE( 492)		Float f2 = (cR + ((Float)0.333333333333333315));
HXDLIN( 492)		Float pz = ::Math_obj::abs((((f2 - ( (Float)(::Std_obj::_hx_int(f2)) )) * ((Float)6.0)) - ((Float)3.0)));
HXLINE( 493)		out[0] = (cB * ((((Float)1.0) - cG) + (::Math_obj::min(::Math_obj::max((px - ((Float)1.0)),((Float)0.0)),((Float)1.0)) * cG)));
HXLINE( 494)		out[1] = (cB * ((((Float)1.0) - cG) + (::Math_obj::min(::Math_obj::max((py - ((Float)1.0)),((Float)0.0)),((Float)1.0)) * cG)));
HXLINE( 495)		out[2] = (cB * ((((Float)1.0) - cG) + (::Math_obj::min(::Math_obj::max((pz - ((Float)1.0)),((Float)0.0)),((Float)1.0)) * cG)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,hsvToRgb,(void))

Float Ext_obj::Kx;

Float Ext_obj::Ky;

Float Ext_obj::Kz;

Float Ext_obj::Kw;

Float Ext_obj::e;

void Ext_obj::rgbToHsv(Float cR,Float cG,Float cB,::Array< Float > out){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_503_rgbToHsv)
HXLINE( 504)		Float a;
HXDLIN( 504)		if ((cG < cB)) {
HXLINE( 504)			a = ((Float)0.0);
            		}
            		else {
HXLINE( 504)			a = ((Float)1.0);
            		}
HXDLIN( 504)		Float px = ((cB * (((Float)1.0) - a)) + (cG * a));
HXLINE( 505)		Float a1;
HXDLIN( 505)		if ((cG < cB)) {
HXLINE( 505)			a1 = ((Float)0.0);
            		}
            		else {
HXLINE( 505)			a1 = ((Float)1.0);
            		}
HXDLIN( 505)		Float py = ((cG * (((Float)1.0) - a1)) + (cB * a1));
HXLINE( 506)		Float a2;
HXDLIN( 506)		if ((cG < cB)) {
HXLINE( 506)			a2 = ((Float)0.0);
            		}
            		else {
HXLINE( 506)			a2 = ((Float)1.0);
            		}
HXDLIN( 506)		Float pz = ((((Float)-1.0) * (((Float)1.0) - a2)) + (((Float)0.0) * a2));
HXLINE( 507)		Float a3;
HXDLIN( 507)		if ((cG < cB)) {
HXLINE( 507)			a3 = ((Float)0.0);
            		}
            		else {
HXLINE( 507)			a3 = ((Float)1.0);
            		}
HXDLIN( 507)		Float pw = ((((Float)0.66666666666666663) * (((Float)1.0) - a3)) + (((Float)-0.333333333333333315) * a3));
HXLINE( 508)		Float a4;
HXDLIN( 508)		if ((cR < px)) {
HXLINE( 508)			a4 = ((Float)0.0);
            		}
            		else {
HXLINE( 508)			a4 = ((Float)1.0);
            		}
HXDLIN( 508)		Float qx = ((px * (((Float)1.0) - a4)) + (cR * a4));
HXLINE( 509)		Float a5;
HXDLIN( 509)		if ((cR < px)) {
HXLINE( 509)			a5 = ((Float)0.0);
            		}
            		else {
HXLINE( 509)			a5 = ((Float)1.0);
            		}
HXDLIN( 509)		Float qy = ((py * (((Float)1.0) - a5)) + (py * a5));
HXLINE( 510)		Float a6;
HXDLIN( 510)		if ((cR < px)) {
HXLINE( 510)			a6 = ((Float)0.0);
            		}
            		else {
HXLINE( 510)			a6 = ((Float)1.0);
            		}
HXDLIN( 510)		Float qz = ((pw * (((Float)1.0) - a6)) + (pz * a6));
HXLINE( 511)		Float a7;
HXDLIN( 511)		if ((cR < px)) {
HXLINE( 511)			a7 = ((Float)0.0);
            		}
            		else {
HXLINE( 511)			a7 = ((Float)1.0);
            		}
HXDLIN( 511)		Float qw = ((cR * (((Float)1.0) - a7)) + (px * a7));
HXLINE( 512)		Float d = (qx - ::Math_obj::min(qw,qy));
HXLINE( 513)		out[0] = ::Math_obj::abs((qz + ((qw - qy) / ((((Float)6.0) * d) + ((Float)1.0e-10)))));
HXLINE( 514)		out[1] = (d / (qx + ((Float)1.0e-10)));
HXLINE( 515)		out[2] = qx;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,rgbToHsv,(void))


Ext_obj::Ext_obj()
{
}

bool Ext_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ar") ) { outValue = ( ar ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mix") ) { outValue = mix_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dist") ) { outValue = dist_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"step") ) { outValue = step_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fract") ) { outValue = fract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endMenu") ) { outValue = endMenu_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initPath") ) { outValue = initPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dataPath") ) { outValue = ( dataPath ); return true; }
		if (HX_FIELD_EQ(inName,"lastPath") ) { outValue = ( lastPath ); return true; }
		if (HX_FIELD_EQ(inName,"textArea") ) { outValue = textArea_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hsvToRgb") ) { outValue = hsvToRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rgbToHsv") ) { outValue = rgbToHsv_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beginMenu") ) { outValue = beginMenu_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"MENUBAR_H") ) { outValue = MENUBAR_H_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"floatInput") ) { outValue = floatInput_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colorWheel") ) { outValue = colorWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"menuButton") ) { outValue = menuButton_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fileBrowser") ) { outValue = fileBrowser_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inlineRadio") ) { outValue = inlineRadio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scrollAlign") ) { outValue = scrollAlign_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_BUTTON_COL") ) { outValue = ( _BUTTON_COL ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_ELEMENT_OFFSET") ) { outValue = ( _ELEMENT_OFFSET ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rightAlignNumber") ) { outValue = rightAlignNumber_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"textAreaColoring") ) { outValue = ( textAreaColoring ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"wheelSelectedHandle") ) { outValue = ( wheelSelectedHandle ); return true; }
		if (HX_FIELD_EQ(inName,"textAreaLineNumbers") ) { outValue = ( textAreaLineNumbers ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"textAreaScrollPastEnd") ) { outValue = ( textAreaScrollPastEnd ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gradientSelectedHandle") ) { outValue = ( gradientSelectedHandle ); return true; }
	}
	return false;
}

bool Ext_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ar") ) { ar=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dataPath") ) { dataPath=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"lastPath") ) { lastPath=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_BUTTON_COL") ) { _BUTTON_COL=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_ELEMENT_OFFSET") ) { _ELEMENT_OFFSET=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textAreaColoring") ) { textAreaColoring=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"wheelSelectedHandle") ) { wheelSelectedHandle=ioValue.Cast<  ::zui::Handle >(); return true; }
		if (HX_FIELD_EQ(inName,"textAreaLineNumbers") ) { textAreaLineNumbers=ioValue.Cast< bool >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"textAreaScrollPastEnd") ) { textAreaScrollPastEnd=ioValue.Cast< bool >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gradientSelectedHandle") ) { gradientSelectedHandle=ioValue.Cast<  ::zui::Handle >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Ext_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Ext_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Ext_obj::dataPath,HX_("dataPath",ef,c4,c5,89)},
	{::hx::fsString,(void *) &Ext_obj::lastPath,HX_("lastPath",1b,ff,9a,dd)},
	{::hx::fsObject /*  ::zui::Handle */ ,(void *) &Ext_obj::wheelSelectedHandle,HX_("wheelSelectedHandle",5e,5a,b8,d1)},
	{::hx::fsObject /*  ::zui::Handle */ ,(void *) &Ext_obj::gradientSelectedHandle,HX_("gradientSelectedHandle",73,2a,a8,92)},
	{::hx::fsBool,(void *) &Ext_obj::textAreaLineNumbers,HX_("textAreaLineNumbers",3c,f3,45,ef)},
	{::hx::fsBool,(void *) &Ext_obj::textAreaScrollPastEnd,HX_("textAreaScrollPastEnd",62,f2,45,51)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Ext_obj::textAreaColoring,HX_("textAreaColoring",59,60,c3,28)},
	{::hx::fsInt,(void *) &Ext_obj::_ELEMENT_OFFSET,HX_("_ELEMENT_OFFSET",b5,e6,22,52)},
	{::hx::fsInt,(void *) &Ext_obj::_BUTTON_COL,HX_("_BUTTON_COL",32,1d,ee,97)},
	{::hx::fsFloat,(void *) &Ext_obj::kx,HX_("kx",ad,5d,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::ky,HX_("ky",ae,5d,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::kz,HX_("kz",af,5d,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::kw,HX_("kw",ac,5d,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &Ext_obj::ar,HX_("ar",f1,54,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::Kx,HX_("Kx",cd,41,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::Ky,HX_("Ky",ce,41,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::Kz,HX_("Kz",cf,41,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::Kw,HX_("Kw",cc,41,00,00)},
	{::hx::fsFloat,(void *) &Ext_obj::e,HX_("e",65,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Ext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ext_obj::dataPath,"dataPath");
	HX_MARK_MEMBER_NAME(Ext_obj::lastPath,"lastPath");
	HX_MARK_MEMBER_NAME(Ext_obj::wheelSelectedHandle,"wheelSelectedHandle");
	HX_MARK_MEMBER_NAME(Ext_obj::gradientSelectedHandle,"gradientSelectedHandle");
	HX_MARK_MEMBER_NAME(Ext_obj::textAreaLineNumbers,"textAreaLineNumbers");
	HX_MARK_MEMBER_NAME(Ext_obj::textAreaScrollPastEnd,"textAreaScrollPastEnd");
	HX_MARK_MEMBER_NAME(Ext_obj::textAreaColoring,"textAreaColoring");
	HX_MARK_MEMBER_NAME(Ext_obj::_ELEMENT_OFFSET,"_ELEMENT_OFFSET");
	HX_MARK_MEMBER_NAME(Ext_obj::_BUTTON_COL,"_BUTTON_COL");
	HX_MARK_MEMBER_NAME(Ext_obj::kx,"kx");
	HX_MARK_MEMBER_NAME(Ext_obj::ky,"ky");
	HX_MARK_MEMBER_NAME(Ext_obj::kz,"kz");
	HX_MARK_MEMBER_NAME(Ext_obj::kw,"kw");
	HX_MARK_MEMBER_NAME(Ext_obj::ar,"ar");
	HX_MARK_MEMBER_NAME(Ext_obj::Kx,"Kx");
	HX_MARK_MEMBER_NAME(Ext_obj::Ky,"Ky");
	HX_MARK_MEMBER_NAME(Ext_obj::Kz,"Kz");
	HX_MARK_MEMBER_NAME(Ext_obj::Kw,"Kw");
	HX_MARK_MEMBER_NAME(Ext_obj::e,"e");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ext_obj::dataPath,"dataPath");
	HX_VISIT_MEMBER_NAME(Ext_obj::lastPath,"lastPath");
	HX_VISIT_MEMBER_NAME(Ext_obj::wheelSelectedHandle,"wheelSelectedHandle");
	HX_VISIT_MEMBER_NAME(Ext_obj::gradientSelectedHandle,"gradientSelectedHandle");
	HX_VISIT_MEMBER_NAME(Ext_obj::textAreaLineNumbers,"textAreaLineNumbers");
	HX_VISIT_MEMBER_NAME(Ext_obj::textAreaScrollPastEnd,"textAreaScrollPastEnd");
	HX_VISIT_MEMBER_NAME(Ext_obj::textAreaColoring,"textAreaColoring");
	HX_VISIT_MEMBER_NAME(Ext_obj::_ELEMENT_OFFSET,"_ELEMENT_OFFSET");
	HX_VISIT_MEMBER_NAME(Ext_obj::_BUTTON_COL,"_BUTTON_COL");
	HX_VISIT_MEMBER_NAME(Ext_obj::kx,"kx");
	HX_VISIT_MEMBER_NAME(Ext_obj::ky,"ky");
	HX_VISIT_MEMBER_NAME(Ext_obj::kz,"kz");
	HX_VISIT_MEMBER_NAME(Ext_obj::kw,"kw");
	HX_VISIT_MEMBER_NAME(Ext_obj::ar,"ar");
	HX_VISIT_MEMBER_NAME(Ext_obj::Kx,"Kx");
	HX_VISIT_MEMBER_NAME(Ext_obj::Ky,"Ky");
	HX_VISIT_MEMBER_NAME(Ext_obj::Kz,"Kz");
	HX_VISIT_MEMBER_NAME(Ext_obj::Kw,"Kw");
	HX_VISIT_MEMBER_NAME(Ext_obj::e,"e");
};

#endif

::hx::Class Ext_obj::__mClass;

static ::String Ext_obj_sStaticFields[] = {
	HX_("floatInput",ce,98,b6,dc),
	HX_("initPath",d5,14,09,4f),
	HX_("dataPath",ef,c4,c5,89),
	HX_("lastPath",1b,ff,9a,dd),
	HX_("fileBrowser",8c,5c,9b,4b),
	HX_("inlineRadio",e2,93,4c,a6),
	HX_("wheelSelectedHandle",5e,5a,b8,d1),
	HX_("gradientSelectedHandle",73,2a,a8,92),
	HX_("colorWheel",38,4c,26,ee),
	HX_("rightAlignNumber",f2,d4,cf,57),
	HX_("textAreaLineNumbers",3c,f3,45,ef),
	HX_("textAreaScrollPastEnd",62,f2,45,51),
	HX_("textAreaColoring",59,60,c3,28),
	HX_("textArea",da,de,6f,43),
	HX_("scrollAlign",78,9f,6e,6b),
	HX_("_ELEMENT_OFFSET",b5,e6,22,52),
	HX_("_BUTTON_COL",32,1d,ee,97),
	HX_("beginMenu",68,24,33,91),
	HX_("endMenu",1a,ff,7d,2a),
	HX_("menuButton",f1,9c,64,bc),
	HX_("MENUBAR_H",7d,e5,bc,b0),
	HX_("dist",66,67,69,42),
	HX_("fract",86,6f,83,06),
	HX_("mix",9c,11,53,00),
	HX_("clamp",fb,72,58,48),
	HX_("step",4c,e7,5b,4c),
	HX_("kx",ad,5d,00,00),
	HX_("ky",ae,5d,00,00),
	HX_("kz",af,5d,00,00),
	HX_("kw",ac,5d,00,00),
	HX_("ar",f1,54,00,00),
	HX_("hsvToRgb",47,45,05,c0),
	HX_("Kx",cd,41,00,00),
	HX_("Ky",ce,41,00,00),
	HX_("Kz",cf,41,00,00),
	HX_("Kw",cc,41,00,00),
	HX_("e",65,00,00,00),
	HX_("rgbToHsv",03,66,d1,09),
	::String(null())
};

void Ext_obj::__register()
{
	Ext_obj _hx_dummy;
	Ext_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("zui.Ext",61,4d,ab,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ext_obj::__GetStatic;
	__mClass->mSetStaticField = &Ext_obj::__SetStatic;
	__mClass->mMarkFunc = Ext_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Ext_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Ext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ext_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Ext_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_22_boot)
HXDLIN(  22)		dataPath = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_23_boot)
HXDLIN(  23)		lastPath = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_148_boot)
HXDLIN( 148)		wheelSelectedHandle = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_149_boot)
HXDLIN( 149)		gradientSelectedHandle = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_300_boot)
HXDLIN( 300)		textAreaLineNumbers = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_301_boot)
HXDLIN( 301)		textAreaScrollPastEnd = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_302_boot)
HXDLIN( 302)		textAreaColoring = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_441_boot)
HXDLIN( 441)		_ELEMENT_OFFSET = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_442_boot)
HXDLIN( 442)		_BUTTON_COL = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_484_boot)
HXDLIN( 484)		kx = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_485_boot)
HXDLIN( 485)		ky = ((Float)0.66666666666666663);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_486_boot)
HXDLIN( 486)		kz = ((Float)0.333333333333333315);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_487_boot)
HXDLIN( 487)		kw = ((Float)3.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_488_boot)
HXDLIN( 488)		ar = ::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_43,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_498_boot)
HXDLIN( 498)		Kx = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_499_boot)
HXDLIN( 499)		Ky = ((Float)-0.333333333333333315);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_500_boot)
HXDLIN( 500)		Kz = ((Float)0.66666666666666663);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_501_boot)
HXDLIN( 501)		Kw = ((Float)-1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_502_boot)
HXDLIN( 502)		e = ((Float)1.0e-10);
            	}
}

} // end namespace zui
