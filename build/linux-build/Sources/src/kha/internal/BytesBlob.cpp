// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_13_new,"kha.internal.BytesBlob","new",0x44ca8653,"kha.internal.BytesBlob.new","kha/internal/BytesBlob.hx",13,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_25_sub,"kha.internal.BytesBlob","sub",0x44ce5f73,"kha.internal.BytesBlob.sub","kha/internal/BytesBlob.hx",25,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_32_get_length,"kha.internal.BytesBlob","get_length",0x5b6b431c,"kha.internal.BytesBlob.get_length","kha/internal/BytesBlob.hx",32,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_36_writeU8,"kha.internal.BytesBlob","writeU8",0xd40a1855,"kha.internal.BytesBlob.writeU8","kha/internal/BytesBlob.hx",36,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_39_readU8,"kha.internal.BytesBlob","readU8",0xaa18db06,"kha.internal.BytesBlob.readU8","kha/internal/BytesBlob.hx",39,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_45_readS8,"kha.internal.BytesBlob","readS8",0xaa18d948,"kha.internal.BytesBlob.readS8","kha/internal/BytesBlob.hx",45,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_53_readU16BE,"kha.internal.BytesBlob","readU16BE",0x762201da,"kha.internal.BytesBlob.readU16BE","kha/internal/BytesBlob.hx",53,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_60_readU16LE,"kha.internal.BytesBlob","readU16LE",0x76220a90,"kha.internal.BytesBlob.readU16LE","kha/internal/BytesBlob.hx",60,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_67_readU32LE,"kha.internal.BytesBlob","readU32LE",0x77716eca,"kha.internal.BytesBlob.readU32LE","kha/internal/BytesBlob.hx",67,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_77_readU32BE,"kha.internal.BytesBlob","readU32BE",0x77716614,"kha.internal.BytesBlob.readU32BE","kha/internal/BytesBlob.hx",77,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_87_readS16BE,"kha.internal.BytesBlob","readS16BE",0x4f54d8d8,"kha.internal.BytesBlob.readS16BE","kha/internal/BytesBlob.hx",87,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_99_readS16LE,"kha.internal.BytesBlob","readS16LE",0x4f54e18e,"kha.internal.BytesBlob.readS16LE","kha/internal/BytesBlob.hx",99,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_111_readS32LE,"kha.internal.BytesBlob","readS32LE",0x50a445c8,"kha.internal.BytesBlob.readS32LE","kha/internal/BytesBlob.hx",111,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_125_readS32BE,"kha.internal.BytesBlob","readS32BE",0x50a43d12,"kha.internal.BytesBlob.readS32BE","kha/internal/BytesBlob.hx",125,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_139_readF32LE,"kha.internal.BytesBlob","readF32LE",0xd46ebb3b,"kha.internal.BytesBlob.readF32LE","kha/internal/BytesBlob.hx",139,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_143_readF32BE,"kha.internal.BytesBlob","readF32BE",0xd46eb285,"kha.internal.BytesBlob.readF32BE","kha/internal/BytesBlob.hx",143,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_167_toString,"kha.internal.BytesBlob","toString",0xc940a9d9,"kha.internal.BytesBlob.toString","kha/internal/BytesBlob.hx",167,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_192_readUtf8String,"kha.internal.BytesBlob","readUtf8String",0x91b8fcc5,"kha.internal.BytesBlob.readUtf8String","kha/internal/BytesBlob.hx",192,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_196_toBytes,"kha.internal.BytesBlob","toBytes",0xb2f08063,"kha.internal.BytesBlob.toBytes","kha/internal/BytesBlob.hx",196,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_200_unload,"kha.internal.BytesBlob","unload",0x1313e4ec,"kha.internal.BytesBlob.unload","kha/internal/BytesBlob.hx",200,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_17_fromBytes,"kha.internal.BytesBlob","fromBytes",0x98ed20d4,"kha.internal.BytesBlob.fromBytes","kha/internal/BytesBlob.hx",17,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_21_alloc,"kha.internal.BytesBlob","alloc",0x7999fd28,"kha.internal.BytesBlob.alloc","kha/internal/BytesBlob.hx",21,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_146_readF32,"kha.internal.BytesBlob","readF32",0x2b9b6442,"kha.internal.BytesBlob.readF32","kha/internal/BytesBlob.hx",146,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_170_bit,"kha.internal.BytesBlob","bit",0x44c16ec0,"kha.internal.BytesBlob.bit","kha/internal/BytesBlob.hx",170,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_184_toText,"kha.internal.BytesBlob","toText",0x303a7bb5,"kha.internal.BytesBlob.toText","kha/internal/BytesBlob.hx",184,0x0af0ac5d)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4afe38f0b9accd_7_boot,"kha.internal.BytesBlob","boot",0xe48402df,"kha.internal.BytesBlob.boot","kha/internal/BytesBlob.hx",7,0x0af0ac5d)
namespace kha{
namespace internal{

void BytesBlob_obj::__construct( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_13_new)
HXDLIN(  13)		this->_hx_set_bytes(HX_CTX, bytes);
            	}

Dynamic BytesBlob_obj::__CreateEmpty() { return new BytesBlob_obj; }

void *BytesBlob_obj::_hx_vtable = 0;

Dynamic BytesBlob_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BytesBlob_obj > _hx_result = new BytesBlob_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BytesBlob_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x707951c7;
}

static ::kha::Resource_obj _hx_kha_internal_BytesBlob__hx_kha_Resource= {
	( void (::hx::Object::*)())&::kha::internal::BytesBlob_obj::unload,
};

void *BytesBlob_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf962acd2: return &_hx_kha_internal_BytesBlob__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::kha::internal::BytesBlob BytesBlob_obj::sub(int start,int length){
            	HX_GC_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_25_sub)
HXDLIN(  25)		return  ::kha::internal::BytesBlob_obj::__alloc( HX_CTX ,this->bytes->sub(start,length));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BytesBlob_obj,sub,return )

int BytesBlob_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_32_get_length)
HXDLIN(  32)		return this->bytes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BytesBlob_obj,get_length,return )

void BytesBlob_obj::writeU8(int position,int value){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_36_writeU8)
HXDLIN(  36)		this->bytes->b[position] = ( (unsigned char)(value) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(BytesBlob_obj,writeU8,(void))

int BytesBlob_obj::readU8(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_39_readU8)
HXLINE(  40)		int byte = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  41)		position = (position + 1);
HXLINE(  42)		return byte;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readU8,return )

int BytesBlob_obj::readS8(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_45_readS8)
HXLINE(  46)		int byte = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  47)		position = (position + 1);
HXLINE(  48)		int sign;
HXDLIN(  48)		if (((byte & 128) == 0)) {
HXLINE(  48)			sign = 1;
            		}
            		else {
HXLINE(  48)			sign = -1;
            		}
HXLINE(  49)		byte = (byte & 127);
HXLINE(  50)		return (sign * byte);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readS8,return )

int BytesBlob_obj::readU16BE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_53_readU16BE)
HXLINE(  54)		int first = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  55)		int second = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE(  56)		position = (position + 2);
HXLINE(  57)		return ((first * 256) + second);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readU16BE,return )

int BytesBlob_obj::readU16LE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_60_readU16LE)
HXLINE(  61)		int first = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  62)		int second = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE(  63)		position = (position + 2);
HXLINE(  64)		return ((second * 256) + first);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readU16LE,return )

int BytesBlob_obj::readU32LE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_67_readU32LE)
HXLINE(  68)		int fourth = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  69)		int third = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE(  70)		int second = ( (int)(this->bytes->b->__get((position + 2))) );
HXLINE(  71)		int first = ( (int)(this->bytes->b->__get((position + 3))) );
HXLINE(  72)		position = (position + 4);
HXLINE(  74)		return (((fourth + (third * 256)) + ((second * 256) * 256)) + (((first * 256) * 256) * 256));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readU32LE,return )

int BytesBlob_obj::readU32BE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_77_readU32BE)
HXLINE(  78)		int fourth = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  79)		int third = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE(  80)		int second = ( (int)(this->bytes->b->__get((position + 2))) );
HXLINE(  81)		int first = ( (int)(this->bytes->b->__get((position + 3))) );
HXLINE(  82)		position = (position + 4);
HXLINE(  84)		return (((first + (second * 256)) + ((third * 256) * 256)) + (((fourth * 256) * 256) * 256));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readU32BE,return )

int BytesBlob_obj::readS16BE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_87_readS16BE)
HXLINE(  88)		int first = ( (int)(this->bytes->b->__get(position)) );
HXLINE(  89)		int second = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE(  90)		position = (position + 2);
HXLINE(  91)		int sign;
HXDLIN(  91)		if (((first & 128) == 0)) {
HXLINE(  91)			sign = 1;
            		}
            		else {
HXLINE(  91)			sign = -1;
            		}
HXLINE(  92)		first = (first & 127);
HXLINE(  93)		if ((sign == -1)) {
HXLINE(  94)			return ((-32767 + (first * 256)) + second);
            		}
            		else {
HXLINE(  96)			return ((first * 256) + second);
            		}
HXLINE(  93)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readS16BE,return )

int BytesBlob_obj::readS16LE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_99_readS16LE)
HXLINE( 100)		int first = ( (int)(this->bytes->b->__get(position)) );
HXLINE( 101)		int second = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE( 102)		int sign;
HXDLIN( 102)		if (((second & 128) == 0)) {
HXLINE( 102)			sign = 1;
            		}
            		else {
HXLINE( 102)			sign = -1;
            		}
HXLINE( 103)		second = (second & 127);
HXLINE( 104)		position = (position + 2);
HXLINE( 105)		if ((sign == -1)) {
HXLINE( 106)			return ((-32767 + (second * 256)) + first);
            		}
            		else {
HXLINE( 108)			return ((second * 256) + first);
            		}
HXLINE( 105)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readS16LE,return )

int BytesBlob_obj::readS32LE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_111_readS32LE)
HXLINE( 112)		int fourth = ( (int)(this->bytes->b->__get(position)) );
HXLINE( 113)		int third = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE( 114)		int second = ( (int)(this->bytes->b->__get((position + 2))) );
HXLINE( 115)		int first = ( (int)(this->bytes->b->__get((position + 3))) );
HXLINE( 116)		int sign;
HXDLIN( 116)		if (((first & 128) == 0)) {
HXLINE( 116)			sign = 1;
            		}
            		else {
HXLINE( 116)			sign = -1;
            		}
HXLINE( 117)		first = (first & 127);
HXLINE( 118)		position = (position + 4);
HXLINE( 119)		if ((sign == -1)) {
HXLINE( 120)			return (((((int)-2147483647 + fourth) + (third * 256)) + ((second * 256) * 256)) + (((first * 256) * 256) * 256));
            		}
            		else {
HXLINE( 122)			return (((fourth + (third * 256)) + ((second * 256) * 256)) + (((first * 256) * 256) * 256));
            		}
HXLINE( 119)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readS32LE,return )

int BytesBlob_obj::readS32BE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_125_readS32BE)
HXLINE( 126)		int fourth = ( (int)(this->bytes->b->__get(position)) );
HXLINE( 127)		int third = ( (int)(this->bytes->b->__get((position + 1))) );
HXLINE( 128)		int second = ( (int)(this->bytes->b->__get((position + 2))) );
HXLINE( 129)		int first = ( (int)(this->bytes->b->__get((position + 3))) );
HXLINE( 130)		int sign;
HXDLIN( 130)		if (((fourth & 128) == 0)) {
HXLINE( 130)			sign = 1;
            		}
            		else {
HXLINE( 130)			sign = -1;
            		}
HXLINE( 131)		fourth = (fourth & 127);
HXLINE( 132)		position = (position + 4);
HXLINE( 133)		if ((sign == -1)) {
HXLINE( 134)			return (((((int)-2147483647 + first) + (second * 256)) + ((third * 256) * 256)) + (((fourth * 256) * 256) * 256));
            		}
HXLINE( 135)		return (((first + (second * 256)) + ((third * 256) * 256)) + (((fourth * 256) * 256) * 256));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readS32BE,return )

Float BytesBlob_obj::readF32LE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_139_readF32LE)
HXDLIN( 139)		return ::kha::internal::BytesBlob_obj::readF32(this->readS32LE(position));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readF32LE,return )

Float BytesBlob_obj::readF32BE(int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_143_readF32BE)
HXDLIN( 143)		return ::kha::internal::BytesBlob_obj::readF32(this->readS32BE(position));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readF32BE,return )

::String BytesBlob_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_167_toString)
HXDLIN( 167)		return this->bytes->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BytesBlob_obj,toString,return )

::String BytesBlob_obj::readUtf8String(){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_192_readUtf8String)
HXDLIN( 192)		return this->bytes->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BytesBlob_obj,readUtf8String,return )

 ::haxe::io::Bytes BytesBlob_obj::toBytes(){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_196_toBytes)
HXDLIN( 196)		return this->bytes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BytesBlob_obj,toBytes,return )

void BytesBlob_obj::unload(){
            	HX_GC_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_200_unload)
HXDLIN( 200)		this->_hx_set_bytes(HX_CTX, null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BytesBlob_obj,unload,(void))

int BytesBlob_obj::bufferSize;

 ::kha::internal::BytesBlob BytesBlob_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_17_fromBytes)
HXDLIN(  17)		return  ::kha::internal::BytesBlob_obj::__alloc( HX_CTX ,bytes);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,fromBytes,return )

 ::kha::internal::BytesBlob BytesBlob_obj::alloc(int size){
            	HX_GC_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_21_alloc)
HXDLIN(  21)		return  ::kha::internal::BytesBlob_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,alloc,return )

Float BytesBlob_obj::readF32(int i){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_146_readF32)
HXLINE( 147)		Float sign;
HXDLIN( 147)		if (((i & (int)-2147483648) == 0)) {
HXLINE( 147)			sign = ( (Float)(1) );
            		}
            		else {
HXLINE( 147)			sign = ( (Float)(-1) );
            		}
HXLINE( 148)		int exp = ((i >> 23) & 255);
HXLINE( 149)		int man = (i & 8388607);
HXLINE( 150)		switch((int)(exp)){
            			case (int)0: {
HXLINE( 153)				return ((Float)0.0);
            			}
            			break;
            			case (int)255: {
HXLINE( 155)				if ((man != 0)) {
HXLINE( 156)					return ::Math_obj::NaN;
            				}
            				else {
HXLINE( 157)					if ((sign > 0)) {
HXLINE( 158)						return ::Math_obj::POSITIVE_INFINITY;
            					}
            					else {
HXLINE( 160)						return ::Math_obj::NEGATIVE_INFINITY;
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 162)				return ((sign * (( (Float)((man + 8388608)) ) / ((Float)8388608.0))) * ::Math_obj::pow(( (Float)(2) ),( (Float)((exp - 127)) )));
            			}
            		}
HXLINE( 150)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytesBlob_obj,readF32,return )

bool BytesBlob_obj::bit(int value,int position){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_170_bit)
HXLINE( 171)		bool b = ((::hx::UShr(value,position) & 1) == 1);
HXLINE( 172)		if (b) {
HXLINE( 173)			int a = 3;
HXLINE( 174)			a = (a + 1);
HXLINE( 175)			return true;
            		}
            		else {
HXLINE( 178)			int c = 4;
HXLINE( 179)			c = (c - 1);
HXLINE( 180)			return false;
            		}
HXLINE( 172)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BytesBlob_obj,bit,return )

::String BytesBlob_obj::toText(::Array< int > chars,int length){
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_184_toText)
HXLINE( 185)		::String value = HX_("",00,00,00,00);
HXLINE( 186)		{
HXLINE( 186)			int _g = 0;
HXDLIN( 186)			int _g1 = length;
HXDLIN( 186)			while((_g < _g1)){
HXLINE( 186)				_g = (_g + 1);
HXDLIN( 186)				int i = (_g - 1);
HXLINE( 187)				value = (value + ::String::fromCharCode(( (int)(_hx_array_unsafe_get(chars,i)) )));
            			}
            		}
HXLINE( 188)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BytesBlob_obj,toText,return )


::hx::ObjectPtr< BytesBlob_obj > BytesBlob_obj::__new( ::haxe::io::Bytes bytes) {
	::hx::ObjectPtr< BytesBlob_obj > __this = new BytesBlob_obj();
	__this->__construct(bytes);
	return __this;
}

::hx::ObjectPtr< BytesBlob_obj > BytesBlob_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Bytes bytes) {
	BytesBlob_obj *__this = (BytesBlob_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BytesBlob_obj), true, "kha.internal.BytesBlob"));
	*(void **)__this = BytesBlob_obj::_hx_vtable;
	__this->__construct(bytes);
	return __this;
}

BytesBlob_obj::BytesBlob_obj()
{
}

void BytesBlob_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BytesBlob);
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void BytesBlob_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val BytesBlob_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { return ::hx::Val( sub_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return ::hx::Val( bytes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"readU8") ) { return ::hx::Val( readU8_dyn() ); }
		if (HX_FIELD_EQ(inName,"readS8") ) { return ::hx::Val( readS8_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return ::hx::Val( unload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"writeU8") ) { return ::hx::Val( writeU8_dyn() ); }
		if (HX_FIELD_EQ(inName,"toBytes") ) { return ::hx::Val( toBytes_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readU16BE") ) { return ::hx::Val( readU16BE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readU16LE") ) { return ::hx::Val( readU16LE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readU32LE") ) { return ::hx::Val( readU32LE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readU32BE") ) { return ::hx::Val( readU32BE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readS16BE") ) { return ::hx::Val( readS16BE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readS16LE") ) { return ::hx::Val( readS16LE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readS32LE") ) { return ::hx::Val( readS32LE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readS32BE") ) { return ::hx::Val( readS32BE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readF32LE") ) { return ::hx::Val( readF32LE_dyn() ); }
		if (HX_FIELD_EQ(inName,"readF32BE") ) { return ::hx::Val( readF32BE_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"readUtf8String") ) { return ::hx::Val( readUtf8String_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BytesBlob_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bit") ) { outValue = bit_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { outValue = alloc_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toText") ) { outValue = toText_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readF32") ) { outValue = readF32_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
	}
	return false;
}

::hx::Val BytesBlob_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { _hx_set_bytes(HX_CTX_GET,inValue.Cast<  ::haxe::io::Bytes >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BytesBlob_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytes",6b,08,98,bd));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BytesBlob_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(BytesBlob_obj,bytes),HX_("bytes",6b,08,98,bd)},
	{::hx::fsInt,(int)offsetof(BytesBlob_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BytesBlob_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &BytesBlob_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BytesBlob_obj_sMemberFields[] = {
	HX_("bytes",6b,08,98,bd),
	HX_("sub",80,a9,57,00),
	HX_("length",e6,94,07,9f),
	HX_("get_length",af,04,8f,8f),
	HX_("writeU8",e2,ec,35,ab),
	HX_("readU8",19,97,91,fc),
	HX_("readS8",5b,95,91,fc),
	HX_("readU16BE",a7,d3,55,4f),
	HX_("readU16LE",5d,dc,55,4f),
	HX_("readU32LE",97,40,a5,50),
	HX_("readU32BE",e1,37,a5,50),
	HX_("readS16BE",a5,aa,88,28),
	HX_("readS16LE",5b,b3,88,28),
	HX_("readS32LE",95,17,d8,29),
	HX_("readS32BE",df,0e,d8,29),
	HX_("readF32LE",08,8d,a2,ad),
	HX_("readF32BE",52,84,a2,ad),
	HX_("toString",ac,d0,6e,38),
	HX_("readUtf8String",d8,83,38,0d),
	HX_("toBytes",f0,54,1c,8a),
	HX_("unload",ff,a0,8c,65),
	::String(null()) };

static void BytesBlob_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BytesBlob_obj::bufferSize,"bufferSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BytesBlob_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BytesBlob_obj::bufferSize,"bufferSize");
};

#endif

::hx::Class BytesBlob_obj::__mClass;

static ::String BytesBlob_obj_sStaticFields[] = {
	HX_("bufferSize",e1,09,64,9d),
	HX_("fromBytes",a1,f2,20,72),
	HX_("alloc",75,a4,93,21),
	HX_("readF32",cf,38,c7,02),
	HX_("bit",cd,b8,4a,00),
	HX_("toText",c8,37,b3,82),
	::String(null())
};

void BytesBlob_obj::__register()
{
	BytesBlob_obj _hx_dummy;
	BytesBlob_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.internal.BytesBlob",e1,60,36,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BytesBlob_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BytesBlob_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BytesBlob_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BytesBlob_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BytesBlob_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BytesBlob_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BytesBlob_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BytesBlob_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BytesBlob_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bc4afe38f0b9accd_7_boot)
HXDLIN(   7)		bufferSize = 2000;
            	}
}

} // end namespace kha
} // end namespace internal
