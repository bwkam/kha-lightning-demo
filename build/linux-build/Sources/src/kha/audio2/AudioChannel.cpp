// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_3fe8139d5204232b
#define INCLUDED_3fe8139d5204232b
#include "cpp_bytearray.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_kha_arrays_ByteArrayPrivate
#include <hxinc/kha/arrays/ByteArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <hxinc/kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio
#include <hxinc/kha/audio2/Audio.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio1
#include <hxinc/kha/audio2/Audio1.h>
#endif
#ifndef INCLUDED_kha_audio2_AudioChannel
#include <hxinc/kha/audio2/AudioChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_7_new,"kha.audio2.AudioChannel","new",0x149245e7,"kha.audio2.AudioChannel.new","kha/audio2/AudioChannel.hx",7,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_14_get_myVolume,"kha.audio2.AudioChannel","get_myVolume",0x2f312c08,"kha.audio2.AudioChannel.get_myVolume","kha/audio2/AudioChannel.hx",14,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_17_set_myVolume,"kha.audio2.AudioChannel","set_myVolume",0x442a4f7c,"kha.audio2.AudioChannel.set_myVolume","kha/audio2/AudioChannel.hx",17,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_25_get_myPosition,"kha.audio2.AudioChannel","get_myPosition",0xd0000a57,"kha.audio2.AudioChannel.get_myPosition","kha/audio2/AudioChannel.hx",25,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_28_set_myPosition,"kha.audio2.AudioChannel","set_myPosition",0xf01ff2cb,"kha.audio2.AudioChannel.set_myPosition","kha/audio2/AudioChannel.hx",28,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_36_get_paused,"kha.audio2.AudioChannel","get_paused",0x275009d0,"kha.audio2.AudioChannel.get_paused","kha/audio2/AudioChannel.hx",36,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_39_set_paused,"kha.audio2.AudioChannel","set_paused",0x2acda844,"kha.audio2.AudioChannel.set_paused","kha/audio2/AudioChannel.hx",39,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_47_get_stopped,"kha.audio2.AudioChannel","get_stopped",0xdde606ab,"kha.audio2.AudioChannel.get_stopped","kha/audio2/AudioChannel.hx",47,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_50_set_stopped,"kha.audio2.AudioChannel","set_stopped",0xe8530db7,"kha.audio2.AudioChannel.set_stopped","kha/audio2/AudioChannel.hx",50,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_58_get_looping,"kha.audio2.AudioChannel","get_looping",0xbb01b19c,"kha.audio2.AudioChannel.get_looping","kha/audio2/AudioChannel.hx",58,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_61_set_looping,"kha.audio2.AudioChannel","set_looping",0xc56eb8a8,"kha.audio2.AudioChannel.set_looping","kha/audio2/AudioChannel.hx",61,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_81_nextSamples,"kha.audio2.AudioChannel","nextSamples",0x6e9d10dd,"kha.audio2.AudioChannel.nextSamples","kha/audio2/AudioChannel.hx",81,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_109_play,"kha.audio2.AudioChannel","play",0xecc28e8d,"kha.audio2.AudioChannel.play","kha/audio2/AudioChannel.hx",109,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_116_pause,"kha.audio2.AudioChannel","pause",0x3643fc3d,"kha.audio2.AudioChannel.pause","kha/audio2/AudioChannel.hx",116,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_119_stop,"kha.audio2.AudioChannel","stop",0xeec4509b,"kha.audio2.AudioChannel.stop","kha/audio2/AudioChannel.hx",119,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_127_get_length,"kha.audio2.AudioChannel","get_length",0xd6d35e08,"kha.audio2.AudioChannel.get_length","kha/audio2/AudioChannel.hx",127,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_133_get_position,"kha.audio2.AudioChannel","get_position",0x6424764b,"kha.audio2.AudioChannel.get_position","kha/audio2/AudioChannel.hx",133,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_136_set_position,"kha.audio2.AudioChannel","set_position",0x791d99bf,"kha.audio2.AudioChannel.set_position","kha/audio2/AudioChannel.hx",136,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_145_get_volume,"kha.audio2.AudioChannel","get_volume",0x971ef2fc,"kha.audio2.AudioChannel.get_volume","kha/audio2/AudioChannel.hx",145,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_149_set_volume,"kha.audio2.AudioChannel","set_volume",0x9a9c9170,"kha.audio2.AudioChannel.set_volume","kha/audio2/AudioChannel.hx",149,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_155_get_finished,"kha.audio2.AudioChannel","get_finished",0x2e386914,"kha.audio2.AudioChannel.get_finished","kha/audio2/AudioChannel.hx",155,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_159_max,"kha.audio2.AudioChannel","max",0x1491802b,"kha.audio2.AudioChannel.max","kha/audio2/AudioChannel.hx",159,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_163_min,"kha.audio2.AudioChannel","min",0x14918719,"kha.audio2.AudioChannel.min","kha/audio2/AudioChannel.hx",163,0x9a222549)
namespace kha{
namespace audio2{

void AudioChannel_obj::__construct(bool looping){
            	HX_GC_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_7_new)
HXLINE(   8)		this->_hx_set_data(HX_CTX, null());
HXLINE(  74)		KINC_ATOMIC_EXCHANGE_32(&kinc_looping, looping ? 1 : 0);
HXLINE(  75)		KINC_ATOMIC_EXCHANGE_32(&kinc_stopped, false ? 1 : 0);
HXLINE(  76)		KINC_ATOMIC_EXCHANGE_32(&kinc_paused, false ? 1 : 0);
HXLINE(  77)		KINC_ATOMIC_EXCHANGE_32(&kinc_position, 0);
HXLINE(  78)		KINC_ATOMIC_EXCHANGE_FLOAT(&kinc_volume, (float)1);
            	}

Dynamic AudioChannel_obj::__CreateEmpty() { return new AudioChannel_obj; }

void *AudioChannel_obj::_hx_vtable = 0;

Dynamic AudioChannel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AudioChannel_obj > _hx_result = new AudioChannel_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AudioChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61e76a49;
}

static ::kha::audio1::AudioChannel_obj _hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel= {
	( void (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::play,
	( void (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::pause,
	( void (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::stop,
	( Float (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_length,
	( Float (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_position,
	( Float (::hx::Object::*)(Float))&::kha::audio2::AudioChannel_obj::set_position,
	( Float (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_volume,
	( Float (::hx::Object::*)(Float))&::kha::audio2::AudioChannel_obj::set_volume,
	( bool (::hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_finished,
};

void *AudioChannel_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x78040b2c: return &_hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float AudioChannel_obj::get_myVolume(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_14_get_myVolume)
HXDLIN(  14)		return kinc_volume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_myVolume,return )

Float AudioChannel_obj::set_myVolume(Float value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_17_set_myVolume)
HXLINE(  18)		KINC_ATOMIC_EXCHANGE_FLOAT(&kinc_volume, (float)value);
HXLINE(  19)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_myVolume,return )

int AudioChannel_obj::get_myPosition(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_25_get_myPosition)
HXDLIN(  25)		return kinc_position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_myPosition,return )

int AudioChannel_obj::set_myPosition(int value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_28_set_myPosition)
HXLINE(  29)		KINC_ATOMIC_EXCHANGE_32(&kinc_position, value);
HXLINE(  30)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_myPosition,return )

bool AudioChannel_obj::get_paused(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_36_get_paused)
HXDLIN(  36)		return kinc_paused != 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_paused,return )

bool AudioChannel_obj::set_paused(bool value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_39_set_paused)
HXLINE(  40)		KINC_ATOMIC_EXCHANGE_32(&kinc_paused, value ? 1 : 0);
HXLINE(  41)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_paused,return )

bool AudioChannel_obj::get_stopped(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_47_get_stopped)
HXDLIN(  47)		return kinc_stopped != 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_stopped,return )

bool AudioChannel_obj::set_stopped(bool value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_50_set_stopped)
HXLINE(  51)		KINC_ATOMIC_EXCHANGE_32(&kinc_stopped, value ? 1 : 0);
HXLINE(  52)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_stopped,return )

bool AudioChannel_obj::get_looping(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_58_get_looping)
HXDLIN(  58)		return kinc_looping != 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_looping,return )

bool AudioChannel_obj::set_looping(bool value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_61_set_looping)
HXLINE(  62)		KINC_ATOMIC_EXCHANGE_32(&kinc_looping, value ? 1 : 0);
HXLINE(  63)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_looping,return )

void AudioChannel_obj::nextSamples( ::kha::arrays::ByteArrayPrivate requestedSamples,int requestedLength,int sampleRate){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_81_nextSamples)
HXLINE(  82)		bool _hx_tmp;
HXDLIN(  82)		if (!(kinc_paused != 0)) {
HXLINE(  82)			_hx_tmp = kinc_stopped != 0;
            		}
            		else {
HXLINE(  82)			_hx_tmp = true;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  83)			{
HXLINE(  83)				int _g = 0;
HXDLIN(  83)				int _g1 = requestedLength;
HXDLIN(  83)				while((_g < _g1)){
HXLINE(  83)					_g = (_g + 1);
HXDLIN(  83)					int i = (_g - 1);
HXLINE(  84)					*((float *)&requestedSamples->self.data[requestedSamples->byteArrayOffset + (i * 4)]) = 0;
            				}
            			}
HXLINE(  86)			return;
            		}
HXLINE(  89)		int requestedSamplesIndex = 0;
HXLINE(  90)		while((requestedSamplesIndex < requestedLength)){
HXLINE(  91)			{
HXLINE(  91)				int _g2 = 0;
HXDLIN(  91)				int a = (this->data->byteArrayLength >> 2);
HXDLIN(  91)				int a1 = (a - kinc_position);
HXDLIN(  91)				int b = (requestedLength - requestedSamplesIndex);
HXDLIN(  91)				int _g3;
HXDLIN(  91)				if ((a1 < b)) {
HXLINE(  91)					_g3 = a1;
            				}
            				else {
HXLINE(  91)					_g3 = b;
            				}
HXDLIN(  91)				while((_g2 < _g3)){
HXLINE(  91)					_g2 = (_g2 + 1);
HXDLIN(  91)					int i1 = (_g2 - 1);
HXLINE(  92)					{
HXLINE(  92)						requestedSamplesIndex = (requestedSamplesIndex + 1);
HXDLIN(  92)						int k = (requestedSamplesIndex - 1);
HXDLIN(  92)						 ::kha::arrays::ByteArrayPrivate this1 = this->data;
HXDLIN(  92)						int lhs = kinc_position;
HXDLIN(  92)						{
HXLINE(  92)							int value = (lhs + 1);
HXDLIN(  92)							KINC_ATOMIC_EXCHANGE_32(&kinc_position, value);
            						}
HXDLIN(  92)						int k1 = lhs;
HXDLIN(  92)						float v = *(float *)&this1->self.data[this1->byteArrayOffset + (k1 * 4)];
HXDLIN(  92)						*((float *)&requestedSamples->self.data[requestedSamples->byteArrayOffset + (k * 4)]) = v;
            					}
            				}
            			}
HXLINE(  95)			int _hx_tmp1 = kinc_position;
HXDLIN(  95)			if ((_hx_tmp1 >= (this->data->byteArrayLength >> 2))) {
HXLINE(  96)				KINC_ATOMIC_EXCHANGE_32(&kinc_position, 0);
HXLINE(  97)				if (!(kinc_looping != 0)) {
HXLINE(  98)					KINC_ATOMIC_EXCHANGE_32(&kinc_stopped, true ? 1 : 0);
HXLINE(  99)					goto _hx_goto_12;
            				}
            			}
            		}
            		_hx_goto_12:;
HXLINE( 104)		while((requestedSamplesIndex < requestedLength)){
HXLINE( 105)			requestedSamplesIndex = (requestedSamplesIndex + 1);
HXDLIN( 105)			int k2 = (requestedSamplesIndex - 1);
HXDLIN( 105)			*((float *)&requestedSamples->self.data[requestedSamples->byteArrayOffset + (k2 * 4)]) = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AudioChannel_obj,nextSamples,(void))

void AudioChannel_obj::play(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_109_play)
HXLINE( 110)		KINC_ATOMIC_EXCHANGE_32(&kinc_paused, false ? 1 : 0);
HXLINE( 111)		KINC_ATOMIC_EXCHANGE_32(&kinc_stopped, false ? 1 : 0);
HXLINE( 112)		::kha::audio2::Audio1_obj::_playAgain(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,play,(void))

void AudioChannel_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_116_pause)
HXDLIN( 116)		KINC_ATOMIC_EXCHANGE_32(&kinc_paused, true ? 1 : 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,pause,(void))

void AudioChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_119_stop)
HXLINE( 120)		KINC_ATOMIC_EXCHANGE_32(&kinc_position, 0);
HXLINE( 121)		KINC_ATOMIC_EXCHANGE_32(&kinc_stopped, true ? 1 : 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,stop,(void))

Float AudioChannel_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_127_get_length)
HXDLIN( 127)		return ((( (Float)((this->data->byteArrayLength >> 2)) ) / ( (Float)(::kha::audio2::Audio_obj::samplesPerSecond) )) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_length,return )

Float AudioChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_133_get_position)
HXDLIN( 133)		int _hx_tmp = kinc_position;
HXDLIN( 133)		return ((( (Float)(_hx_tmp) ) / ( (Float)(::kha::audio2::Audio_obj::samplesPerSecond) )) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_position,return )

Float AudioChannel_obj::set_position(Float value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_136_set_position)
HXLINE( 137)		{
HXLINE( 137)			int value1 = ::Math_obj::round(((value * ( (Float)(::kha::audio2::Audio_obj::samplesPerSecond) )) * ( (Float)(2) )));
HXDLIN( 137)			KINC_ATOMIC_EXCHANGE_32(&kinc_position, value1);
            		}
HXLINE( 138)		{
HXLINE( 138)			int a = kinc_position;
HXDLIN( 138)			int b = (this->data->byteArrayLength >> 2);
HXDLIN( 138)			int a1;
HXDLIN( 138)			if ((a < b)) {
HXLINE( 138)				a1 = a;
            			}
            			else {
HXLINE( 138)				a1 = b;
            			}
HXDLIN( 138)			int value2;
HXDLIN( 138)			if ((a1 > 0)) {
HXLINE( 138)				value2 = a1;
            			}
            			else {
HXLINE( 138)				value2 = 0;
            			}
HXDLIN( 138)			KINC_ATOMIC_EXCHANGE_32(&kinc_position, value2);
            		}
HXLINE( 139)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_position,return )

Float AudioChannel_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_145_get_volume)
HXDLIN( 145)		return kinc_volume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_volume,return )

Float AudioChannel_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_149_set_volume)
HXDLIN( 149)		KINC_ATOMIC_EXCHANGE_FLOAT(&kinc_volume, (float)value);
HXDLIN( 149)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_volume,return )

bool AudioChannel_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_155_get_finished)
HXDLIN( 155)		return kinc_stopped != 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_finished,return )

int AudioChannel_obj::max(int a,int b){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_159_max)
HXDLIN( 159)		if ((a > b)) {
HXDLIN( 159)			return a;
            		}
            		else {
HXDLIN( 159)			return b;
            		}
HXDLIN( 159)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AudioChannel_obj,max,return )

int AudioChannel_obj::min(int a,int b){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_163_min)
HXDLIN( 163)		if ((a < b)) {
HXDLIN( 163)			return a;
            		}
            		else {
HXDLIN( 163)			return b;
            		}
HXDLIN( 163)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AudioChannel_obj,min,return )


::hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__new(bool looping) {
	::hx::ObjectPtr< AudioChannel_obj > __this = new AudioChannel_obj();
	__this->__construct(looping);
	return __this;
}

::hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__alloc(::hx::Ctx *_hx_ctx,bool looping) {
	AudioChannel_obj *__this = (AudioChannel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AudioChannel_obj), true, "kha.audio2.AudioChannel"));
	*(void **)__this = AudioChannel_obj::_hx_vtable;
	__this->__construct(looping);
	return __this;
}

AudioChannel_obj::AudioChannel_obj()
{
}

void AudioChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioChannel);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_END_CLASS();
}

void AudioChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(finished,"finished");
}

::hx::Val AudioChannel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paused() ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_volume() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stopped") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_stopped() ); }
		if (HX_FIELD_EQ(inName,"looping") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_looping() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_myVolume() ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_finished() : finished ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_myPosition() ); }
		if (HX_FIELD_EQ(inName,"get_paused") ) { return ::hx::Val( get_paused_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paused") ) { return ::hx::Val( set_paused_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return ::hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return ::hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_stopped") ) { return ::hx::Val( get_stopped_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stopped") ) { return ::hx::Val( set_stopped_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_looping") ) { return ::hx::Val( get_looping_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_looping") ) { return ::hx::Val( set_looping_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextSamples") ) { return ::hx::Val( nextSamples_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_myVolume") ) { return ::hx::Val( get_myVolume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_myVolume") ) { return ::hx::Val( set_myVolume_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return ::hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return ::hx::Val( set_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return ::hx::Val( get_finished_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_myPosition") ) { return ::hx::Val( get_myPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_myPosition") ) { return ::hx::Val( set_myPosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AudioChannel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
	}
	return false;
}

::hx::Val AudioChannel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { _hx_set_data(HX_CTX_GET,inValue.Cast<  ::kha::arrays::ByteArrayPrivate >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paused(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_volume(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stopped") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_stopped(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"looping") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_looping(inValue.Cast< bool >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_myVolume(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_position(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_myPosition(inValue.Cast< int >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("myVolume",66,56,07,96));
	outFields->push(HX_("myPosition",35,08,7c,38));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("stopped",0d,d2,61,43));
	outFields->push(HX_("looping",fe,7c,7d,20));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("finished",72,93,0e,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AudioChannel_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::arrays::ByteArrayPrivate */ ,(int)offsetof(AudioChannel_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsFloat,(int)offsetof(AudioChannel_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsBool,(int)offsetof(AudioChannel_obj,finished),HX_("finished",72,93,0e,95)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AudioChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioChannel_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("get_myVolume",6f,0a,21,4b),
	HX_("set_myVolume",e3,2d,1a,60),
	HX_("get_myPosition",7e,90,71,ae),
	HX_("set_myPosition",f2,78,91,ce),
	HX_("get_paused",77,b0,0b,e0),
	HX_("set_paused",eb,4e,89,e3),
	HX_("get_stopped",24,32,5c,c9),
	HX_("set_stopped",30,39,c9,d3),
	HX_("get_looping",15,dd,77,a6),
	HX_("set_looping",21,e4,e4,b0),
	HX_("nextSamples",56,3c,13,5a),
	HX_("play",f4,2d,5a,4a),
	HX_("pause",f6,d6,57,bd),
	HX_("stop",02,f0,5b,4c),
	HX_("length",e6,94,07,9f),
	HX_("get_length",af,04,8f,8f),
	HX_("get_position",b2,54,14,80),
	HX_("set_position",26,78,0d,95),
	HX_("get_volume",a3,99,da,4f),
	HX_("set_volume",17,38,58,53),
	HX_("finished",72,93,0e,95),
	HX_("get_finished",7b,47,28,4a),
	::String(null()) };

::hx::Class AudioChannel_obj::__mClass;

static ::String AudioChannel_obj_sStaticFields[] = {
	HX_("max",a4,0a,53,00),
	HX_("min",92,11,53,00),
	::String(null())
};

void AudioChannel_obj::__register()
{
	AudioChannel_obj _hx_dummy;
	AudioChannel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.AudioChannel",75,c6,99,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioChannel_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AudioChannel_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AudioChannel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AudioChannel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioChannel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
