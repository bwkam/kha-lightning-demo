// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_kha_Display
#include <hxinc/kha/Display.h>
#endif
#ifndef INCLUDED_kha_FramebufferOptions
#include <hxinc/kha/FramebufferOptions.h>
#endif
#ifndef INCLUDED_kha_SystemImpl
#include <hxinc/kha/SystemImpl.h>
#endif
#ifndef INCLUDED_kha_Window
#include <hxinc/kha/Window.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <hxinc/kha/WindowOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ae07b069c940886a_58_new,"kha.Window","new",0x7b8e950c,"kha.Window.new","kha/Window.hx",58,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_115_resize,"kha.Window","resize",0xcd03c8c8,"kha.Window.resize","kha/Window.hx",115,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_118_move,"kha.Window","move",0xa09234e5,"kha.Window.move","kha/Window.hx",118,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_121_changeWindowFeatures,"kha.Window","changeWindowFeatures",0xa71a3071,"kha.Window.changeWindowFeatures","kha/Window.hx",121,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_127_changeFramebuffer,"kha.Window","changeFramebuffer",0xb538cb09,"kha.Window.changeFramebuffer","kha/Window.hx",127,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_133_get_x,"kha.Window","get_x",0x6456ecfb,"kha.Window.get_x","kha/Window.hx",133,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_138_set_x,"kha.Window","set_x",0x4d25e307,"kha.Window.set_x","kha/Window.hx",138,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_145_get_y,"kha.Window","get_y",0x6456ecfc,"kha.Window.get_y","kha/Window.hx",145,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_150_set_y,"kha.Window","set_y",0x4d25e308,"kha.Window.set_y","kha/Window.hx",150,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_157_get_width,"kha.Window","get_width",0x101da009,"kha.Window.get_width","kha/Window.hx",157,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_162_set_width,"kha.Window","set_width",0xf36e8c15,"kha.Window.set_width","kha/Window.hx",162,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_169_get_height,"kha.Window","get_height",0xc01de084,"kha.Window.get_height","kha/Window.hx",169,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_174_set_height,"kha.Window","set_height",0xc39b7ef8,"kha.Window.set_height","kha/Window.hx",174,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_180_get_mode,"kha.Window","get_mode",0x12bc5ac0,"kha.Window.get_mode","kha/Window.hx",180,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_185_getKincMode,"kha.Window","getKincMode",0x1f4f99b8,"kha.Window.getKincMode","kha/Window.hx",185,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_190_set_mode,"kha.Window","set_mode",0xc119b434,"kha.Window.set_mode","kha/Window.hx",190,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_196_get_visible,"kha.Window","get_visible",0xfcf02935,"kha.Window.get_visible","kha/Window.hx",196,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_200_set_visible,"kha.Window","set_visible",0x075d3041,"kha.Window.set_visible","kha/Window.hx",200,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_208_get_title,"kha.Window","get_title",0x55f5ff9b,"kha.Window.get_title","kha/Window.hx",208,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_212_set_title,"kha.Window","set_title",0x3946eba7,"kha.Window.set_title","kha/Window.hx",212,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_219_notifyOnResize,"kha.Window","notifyOnResize",0x9619bb30,"kha.Window.notifyOnResize","kha/Window.hx",219,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_233_notifyOnPpiChange,"kha.Window","notifyOnPpiChange",0xd881a4fd,"kha.Window.notifyOnPpiChange","kha/Window.hx",233,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_249_get_vSynced,"kha.Window","get_vSynced",0xa8cc8153,"kha.Window.get_vSynced","kha/Window.hx",249,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_70_unused,"kha.Window","unused",0x300b07ea,"kha.Window.unused","kha/Window.hx",70,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_75__init,"kha.Window","_init",0xcbc29e9b,"kha.Window._init","kha/Window.hx",75,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_81_create,"kha.Window","create",0x4097d5d0,"kha.Window.create","kha/Window.hx",81,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_94_koreCreate,"kha.Window","koreCreate",0x34299187,"kha.Window.koreCreate","kha/Window.hx",94,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_96_destroy,"kha.Window","destroy",0x575eb7a6,"kha.Window.destroy","kha/Window.hx",96,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_102_koreDestroy,"kha.Window","koreDestroy",0x83513c0f,"kha.Window.koreDestroy","kha/Window.hx",102,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_105_get,"kha.Window","get",0x7b894542,"kha.Window.get","kha/Window.hx",105,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_111_get_all,"kha.Window","get_all",0x59974c64,"kha.Window.get_all","kha/Window.hx",111,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_226_callResizeCallbacks,"kha.Window","callResizeCallbacks",0x4ed8c828,"kha.Window.callResizeCallbacks","kha/Window.hx",226,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_240_callPpiCallbacks,"kha.Window","callPpiCallbacks",0x265978f7,"kha.Window.callPpiCallbacks","kha/Window.hx",240,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_48_boot,"kha.Window","boot",0x994cd606,"kha.Window.boot","kha/Window.hx",48,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_49_boot,"kha.Window","boot",0x994cd606,"kha.Window.boot","kha/Window.hx",49,0x371647c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ae07b069c940886a_50_boot,"kha.Window","boot",0x994cd606,"kha.Window.boot","kha/Window.hx",50,0x371647c3)

namespace {
	char windowTitles[10][256];
	int titleIndex = 0;
	
	void resizeCallback(int width, int height, void* data) {
		::kha::Window_obj::callResizeCallbacks(*((int*)&data), width, height);
	}
	
	void ppiCallback(int ppi, void* data) {
		::kha::Window_obj::callPpiCallbacks(*((int*)&data), ppi);
	}
}

kinc_window_options_t convertWindowOptions(::kha::WindowOptions win) {
	kinc_window_options_t window;
	strcpy(windowTitles[titleIndex], win->title.c_str());
	window.title = windowTitles[titleIndex];
	++titleIndex;
	window.x = win->x;
	window.y = win->y;
	window.width = win->width;
	window.height = win->height;
	window.display_index = win->display;
	window.visible = win->visible;
	window.window_features = win->windowFeatures;
	window.mode = (kinc_window_mode_t)win->mode;
	return window;
}

kinc_framebuffer_options_t convertFramebufferOptions(::kha::FramebufferOptions frame) {
	kinc_framebuffer_options_t framebuffer;
	framebuffer.frequency = frame->frequency;
	framebuffer.vertical_sync = frame->verticalSync;
	framebuffer.color_bits = frame->colorBufferBits;
	framebuffer.depth_bits = frame->depthBufferBits;
	framebuffer.stencil_bits = frame->stencilBufferBits;
	framebuffer.samples_per_pixel = frame->samplesPerPixel;
	return framebuffer;
}

namespace kha{

void Window_obj::__construct(int num, ::kha::WindowOptions win){
            	HX_GC_STACKFRAME(&_hx_pos_ae07b069c940886a_58_new)
HXLINE(  59)		this->num = num;
HXLINE(  60)		bool _hx_tmp;
HXDLIN(  60)		if (::hx::IsNotNull( win )) {
HXLINE(  60)			_hx_tmp = win->visible;
            		}
            		else {
HXLINE(  60)			_hx_tmp = false;
            		}
HXDLIN(  60)		this->visibility = _hx_tmp;
HXLINE(  61)		::String _hx_tmp1;
HXDLIN(  61)		if (::hx::IsNull( win )) {
HXLINE(  61)			_hx_tmp1 = HX_("Kha",04,44,39,00);
            		}
            		else {
HXLINE(  61)			if (::hx::IsNull( win->title )) {
HXLINE(  61)				_hx_tmp1 = HX_("Kha",04,44,39,00);
            			}
            			else {
HXLINE(  61)				_hx_tmp1 = win->title;
            			}
            		}
HXDLIN(  61)		this->_hx_set_windowTitle(HX_CTX, _hx_tmp1);
HXLINE(  62)		::kha::Window_obj::resizeCallbacks->setCtx( HX_CTX, num,::Array_obj< ::Dynamic>::__new(0));
HXLINE(  63)		::kha::Window_obj::ppiCallbacks->setCtx( HX_CTX, num,::Array_obj< ::Dynamic>::__new(0));
            	}

Dynamic Window_obj::__CreateEmpty() { return new Window_obj; }

void *Window_obj::_hx_vtable = 0;

Dynamic Window_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Window_obj > _hx_result = new Window_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Window_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04d99c68;
}

void Window_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_115_resize)
            	kinc_window_resize(num, width, height);

            	}


HX_DEFINE_DYNAMIC_FUNC2(Window_obj,resize,(void))

void Window_obj::move(int x,int y){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_118_move)
            	kinc_window_move(num, x, y);

            	}


HX_DEFINE_DYNAMIC_FUNC2(Window_obj,move,(void))

void Window_obj::changeWindowFeatures(int features){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_121_changeWindowFeatures)
            	kinc_window_change_features(num, features);

            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,changeWindowFeatures,(void))

void Window_obj::changeFramebuffer( ::kha::FramebufferOptions frame){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_127_changeFramebuffer)
            	
		kinc_framebuffer_options_t framebuffer = convertFramebufferOptions(frame);
		kinc_window_change_framebuffer(num, &framebuffer);
	

            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,changeFramebuffer,(void))

int Window_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_133_get_x)
            	return kinc_window_x(num);

HXDLIN( 133)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_x,return )

int Window_obj::set_x(int value){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_138_set_x)
            	int y = kinc_window_y(num); kinc_window_move(num, value, y);

HXDLIN( 138)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_x,return )

int Window_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_145_get_y)
            	return kinc_window_y(num);

HXDLIN( 145)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_y,return )

int Window_obj::set_y(int value){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_150_set_y)
            	int x = kinc_window_x(num); kinc_window_move(num, x, value);

HXDLIN( 150)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_y,return )

int Window_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_157_get_width)
            	return kinc_window_width(num);

HXDLIN( 157)		return 800;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_width,return )

int Window_obj::set_width(int value){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_162_set_width)
            	int height = kinc_window_height(num); kinc_window_resize(num, value, height);

HXDLIN( 162)		return 800;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_width,return )

int Window_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_169_get_height)
            	return kinc_window_height(num);

HXDLIN( 169)		return 600;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_height,return )

int Window_obj::set_height(int value){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_174_set_height)
            	int width = kinc_window_width(num); kinc_window_move(num, width, value);

HXDLIN( 174)		return 600;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_height,return )

int Window_obj::get_mode(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_180_get_mode)
HXDLIN( 180)		return this->getKincMode();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_mode,return )

int Window_obj::getKincMode(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_185_getKincMode)
            	return kinc_window_get_mode(num);

HXDLIN( 185)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,getKincMode,return )

int Window_obj::set_mode(int mode){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_190_set_mode)
            	kinc_window_change_mode(num, (kinc_window_mode_t)mode); return mode;

HXDLIN( 190)		return mode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_mode,return )

bool Window_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_196_get_visible)
HXDLIN( 196)		return this->visibility;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_visible,return )

bool Window_obj::set_visible(bool value){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_200_set_visible)
            	if (value) kinc_window_show(num); else kinc_window_hide(num);

HXLINE( 201)		this->visibility = value;
HXLINE( 202)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_visible,return )

::String Window_obj::get_title(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_208_get_title)
HXDLIN( 208)		return this->windowTitle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_title,return )

::String Window_obj::set_title(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_ae07b069c940886a_212_set_title)
            	kinc_window_set_title(num, value.c_str());

HXLINE( 213)		this->_hx_set_windowTitle(HX_CTX, value);
HXLINE( 214)		return this->windowTitle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_title,return )

void Window_obj::notifyOnResize( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_219_notifyOnResize)
            	kinc_window_set_resize_callback(num, resizeCallback, (void*)this->num);

HXDLIN( 219)		::kha::Window_obj::resizeCallbacks->__get(this->num).StaticCast< ::Array< ::Dynamic> >()->push(callback);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,notifyOnResize,(void))

void Window_obj::notifyOnPpiChange( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_233_notifyOnPpiChange)
            	kinc_window_set_ppi_changed_callback(num, ppiCallback, (void*)this->num);

HXDLIN( 233)		::kha::Window_obj::ppiCallbacks->__get(this->num).StaticCast< ::Array< ::Dynamic> >()->push(callback);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,notifyOnPpiChange,(void))

bool Window_obj::get_vSynced(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_249_get_vSynced)
            	return kinc_window_vsynced(num);

HXDLIN( 249)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_vSynced,return )

::Array< ::Dynamic> Window_obj::windows;

::Array< ::Dynamic> Window_obj::resizeCallbacks;

::Array< ::Dynamic> Window_obj::ppiCallbacks;

void Window_obj::unused(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_70_unused)
HXDLIN(  70)		::kha::Display_obj::get_primary()->get_x();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Window_obj,unused,(void))

void Window_obj::_init( ::kha::WindowOptions win, ::kha::FramebufferOptions frame){
            	HX_GC_STACKFRAME(&_hx_pos_ae07b069c940886a_75__init)
HXLINE(  76)		 ::kha::Window window =  ::kha::Window_obj::__alloc( HX_CTX ,::kha::Window_obj::windows->length,win);
HXLINE(  77)		::kha::Window_obj::windows->push(window);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Window_obj,_init,(void))

 ::kha::Window Window_obj::create( ::kha::WindowOptions win, ::kha::FramebufferOptions frame){
            	HX_GC_STACKFRAME(&_hx_pos_ae07b069c940886a_81_create)
HXLINE(  82)		 ::kha::WindowOptions _hx_tmp;
HXDLIN(  82)		if (::hx::IsNull( win )) {
HXLINE(  82)			_hx_tmp =  ::kha::WindowOptions_obj::__alloc( HX_CTX ,null(),-1,-1,800,600,-1,true,null(),0);
            		}
            		else {
HXLINE(  82)			_hx_tmp = win;
            		}
HXDLIN(  82)		 ::kha::FramebufferOptions _hx_tmp1;
HXDLIN(  82)		if (::hx::IsNull( frame )) {
HXLINE(  82)			_hx_tmp1 =  ::kha::FramebufferOptions_obj::__alloc( HX_CTX ,60,true,32,16,8,1);
            		}
            		else {
HXLINE(  82)			_hx_tmp1 = frame;
            		}
HXDLIN(  82)		::kha::Window_obj::koreCreate(_hx_tmp,_hx_tmp1);
HXLINE(  83)		 ::kha::Window window =  ::kha::Window_obj::__alloc( HX_CTX ,::kha::Window_obj::windows->length,win);
HXLINE(  84)		int index = (::kha::Window_obj::windows->push(window) - 1);
HXLINE(  85)		::kha::SystemImpl_obj::onWindowCreated(index);
HXLINE(  86)		return window;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Window_obj,create,return )

void Window_obj::koreCreate( ::kha::WindowOptions win, ::kha::FramebufferOptions frame){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_94_koreCreate)
            	
		kinc_window_options_t window = convertWindowOptions(win);
		kinc_framebuffer_options_t framebuffer = convertFramebufferOptions(frame);
		kinc_window_create(&window, &framebuffer);
	

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Window_obj,koreCreate,(void))

void Window_obj::destroy( ::kha::Window window){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_96_destroy)
HXLINE(  97)		::kha::Window_obj::koreDestroy(window->num);
HXLINE(  98)		::kha::Window_obj::windows->remove(window);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Window_obj,destroy,(void))

void Window_obj::koreDestroy(int num){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_102_koreDestroy)
            	kinc_window_destroy(num);

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Window_obj,koreDestroy,(void))

 ::kha::Window Window_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_105_get)
HXDLIN( 105)		return ::kha::Window_obj::windows->__get(index).StaticCast<  ::kha::Window >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Window_obj,get,return )

::Array< ::Dynamic> Window_obj::get_all(){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_111_get_all)
HXDLIN( 111)		return ::kha::Window_obj::windows;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_all,return )

void Window_obj::callResizeCallbacks(int num,int width,int height){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_226_callResizeCallbacks)
HXDLIN( 226)		int _g = 0;
HXDLIN( 226)		::Array< ::Dynamic> _g1 = ::kha::Window_obj::resizeCallbacks->__get(num).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 226)		while((_g < _g1->length)){
HXDLIN( 226)			 ::Dynamic callback = _g1->__get(_g);
HXDLIN( 226)			_g = (_g + 1);
HXLINE( 227)			callback(width,height);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Window_obj,callResizeCallbacks,(void))

void Window_obj::callPpiCallbacks(int num,int ppi){
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_240_callPpiCallbacks)
HXDLIN( 240)		int _g = 0;
HXDLIN( 240)		::Array< ::Dynamic> _g1 = ::kha::Window_obj::ppiCallbacks->__get(num).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 240)		while((_g < _g1->length)){
HXDLIN( 240)			 ::Dynamic callback = _g1->__get(_g);
HXDLIN( 240)			_g = (_g + 1);
HXLINE( 241)			callback(ppi);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Window_obj,callPpiCallbacks,(void))


::hx::ObjectPtr< Window_obj > Window_obj::__new(int num, ::kha::WindowOptions win) {
	::hx::ObjectPtr< Window_obj > __this = new Window_obj();
	__this->__construct(num,win);
	return __this;
}

::hx::ObjectPtr< Window_obj > Window_obj::__alloc(::hx::Ctx *_hx_ctx,int num, ::kha::WindowOptions win) {
	Window_obj *__this = (Window_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, "kha.Window"));
	*(void **)__this = Window_obj::_hx_vtable;
	__this->__construct(num,win);
	return __this;
}

Window_obj::Window_obj()
{
}

void Window_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Window);
	HX_MARK_MEMBER_NAME(num,"num");
	HX_MARK_MEMBER_NAME(visibility,"visibility");
	HX_MARK_MEMBER_NAME(windowTitle,"windowTitle");
	HX_MARK_END_CLASS();
}

void Window_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(num,"num");
	HX_VISIT_MEMBER_NAME(visibility,"visibility");
	HX_VISIT_MEMBER_NAME(windowTitle,"windowTitle");
}

::hx::Val Window_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_y() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { return ::hx::Val( num ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return ::hx::Val( move_dyn() ); }
		if (HX_FIELD_EQ(inName,"mode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mode() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"title") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_title() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_height() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visible() ); }
		if (HX_FIELD_EQ(inName,"vSynced") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_vSynced() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_mode") ) { return ::hx::Val( get_mode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mode") ) { return ::hx::Val( set_mode_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_title") ) { return ::hx::Val( get_title_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_title") ) { return ::hx::Val( set_title_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"visibility") ) { return ::hx::Val( visibility ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windowTitle") ) { return ::hx::Val( windowTitle ); }
		if (HX_FIELD_EQ(inName,"getKincMode") ) { return ::hx::Val( getKincMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return ::hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return ::hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vSynced") ) { return ::hx::Val( get_vSynced_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notifyOnResize") ) { return ::hx::Val( notifyOnResize_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changeFramebuffer") ) { return ::hx::Val( changeFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"notifyOnPpiChange") ) { return ::hx::Val( notifyOnPpiChange_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"changeWindowFeatures") ) { return ::hx::Val( changeWindowFeatures_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Window_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"all") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_all() ); return true; } }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_init") ) { outValue = _init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unused") ) { outValue = unused_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"windows") ) { outValue = ( windows ); return true; }
		if (HX_FIELD_EQ(inName,"destroy") ) { outValue = destroy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_all") ) { outValue = get_all_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"koreCreate") ) { outValue = koreCreate_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"koreDestroy") ) { outValue = koreDestroy_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ppiCallbacks") ) { outValue = ( ppiCallbacks ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resizeCallbacks") ) { outValue = ( resizeCallbacks ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"callPpiCallbacks") ) { outValue = callPpiCallbacks_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"callResizeCallbacks") ) { outValue = callResizeCallbacks_dyn(); return true; }
	}
	return false;
}

::hx::Val Window_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_x(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_y(inValue.Cast< int >()) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { num=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_mode(inValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_width(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"title") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_title(inValue.Cast< ::String >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_height(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visible(inValue.Cast< bool >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"visibility") ) { visibility=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windowTitle") ) { _hx_set_windowTitle(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Window_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"windows") ) { windows=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ppiCallbacks") ) { ppiCallbacks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resizeCallbacks") ) { resizeCallbacks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Window_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("num",46,de,53,00));
	outFields->push(HX_("visibility",d2,ad,0d,d3));
	outFields->push(HX_("windowTitle",88,ab,0d,01));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("mode",63,d3,60,48));
	outFields->push(HX_("visible",72,78,24,a3));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("vSynced",90,d0,00,4f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Window_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Window_obj,num),HX_("num",46,de,53,00)},
	{::hx::fsBool,(int)offsetof(Window_obj,visibility),HX_("visibility",d2,ad,0d,d3)},
	{::hx::fsString,(int)offsetof(Window_obj,windowTitle),HX_("windowTitle",88,ab,0d,01)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Window_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Window_obj::windows,HX_("windows",83,de,74,e8)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Window_obj::resizeCallbacks,HX_("resizeCallbacks",7a,9a,5e,03)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Window_obj::ppiCallbacks,HX_("ppiCallbacks",65,df,2c,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Window_obj_sMemberFields[] = {
	HX_("num",46,de,53,00),
	HX_("visibility",d2,ad,0d,d3),
	HX_("windowTitle",88,ab,0d,01),
	HX_("resize",f4,59,7b,08),
	HX_("move",11,e3,60,48),
	HX_("changeWindowFeatures",9d,f6,8c,85),
	HX_("changeFramebuffer",5d,b1,1f,09),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_mode",ec,8e,1b,c8),
	HX_("getKincMode",0c,49,7e,4b),
	HX_("set_mode",60,e8,78,76),
	HX_("get_visible",89,d8,1e,29),
	HX_("set_visible",95,df,8b,33),
	HX_("get_title",ef,71,e4,53),
	HX_("set_title",fb,5d,35,37),
	HX_("notifyOnResize",5c,58,88,9e),
	HX_("notifyOnPpiChange",51,8b,68,2c),
	HX_("get_vSynced",a7,30,fb,d4),
	::String(null()) };

static void Window_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Window_obj::windows,"windows");
	HX_MARK_MEMBER_NAME(Window_obj::resizeCallbacks,"resizeCallbacks");
	HX_MARK_MEMBER_NAME(Window_obj::ppiCallbacks,"ppiCallbacks");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Window_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Window_obj::windows,"windows");
	HX_VISIT_MEMBER_NAME(Window_obj::resizeCallbacks,"resizeCallbacks");
	HX_VISIT_MEMBER_NAME(Window_obj::ppiCallbacks,"ppiCallbacks");
};

#endif

::hx::Class Window_obj::__mClass;

static ::String Window_obj_sStaticFields[] = {
	HX_("windows",83,de,74,e8),
	HX_("resizeCallbacks",7a,9a,5e,03),
	HX_("ppiCallbacks",65,df,2c,4c),
	HX_("unused",16,99,82,6b),
	HX_("_init",ef,56,cc,f8),
	HX_("create",fc,66,0f,7c),
	HX_("koreCreate",b3,28,df,66),
	HX_("destroy",fa,2c,86,24),
	HX_("koreDestroy",63,eb,7f,af),
	HX_("get",96,80,4e,00),
	HX_("get_all",b8,c1,be,26),
	HX_("callResizeCallbacks",7c,eb,04,97),
	HX_("callPpiCallbacks",23,b9,8a,1d),
	::String(null())
};

void Window_obj::__register()
{
	Window_obj _hx_dummy;
	Window_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.Window",1a,5f,4c,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Window_obj::__GetStatic;
	__mClass->mSetStaticField = &Window_obj::__SetStatic;
	__mClass->mMarkFunc = Window_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Window_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Window_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Window_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Window_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Window_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Window_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Window_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_48_boot)
HXDLIN(  48)		windows = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_49_boot)
HXDLIN(  49)		resizeCallbacks = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ae07b069c940886a_50_boot)
HXDLIN(  50)		ppiCallbacks = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace kha
