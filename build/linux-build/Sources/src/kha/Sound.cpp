// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <hxinc/kha/Sound.h>
#endif
#ifndef INCLUDED_kha_arrays_ByteArrayPrivate
#include <hxinc/kha/arrays/ByteArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays__Float32Array_Float32Array_Impl_
#include <hxinc/kha/arrays/_Float32Array/Float32Array_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_11_new,"kha.Sound","new",0x1f644c57,"kha.Sound.new","kha/Sound.hx",11,0x5f2333fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_21_uncompress,"kha.Sound","uncompress",0x58f42fe4,"kha.Sound.uncompress","kha/Sound.hx",21,0x5f2333fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_92_unload,"kha.Sound","unload",0x00feb968,"kha.Sound.unload","kha/Sound.hx",92,0x5f2333fa)

#define STB_VORBIS_HEADER_ONLY
#include <kinc/libs/stb_vorbis.c>
namespace kha{

void Sound_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_11_new)
HXLINE(  16)		this->sampleRate = 0;
HXLINE(  15)		this->channels = 0;
HXLINE(  14)		this->length = ((Float)0);
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03ff01d3;
}

static ::kha::Resource_obj _hx_kha_Sound__hx_kha_Resource= {
	( void (::hx::Object::*)())&::kha::Sound_obj::unload,
};

void *Sound_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf962acd2: return &_hx_kha_Sound__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Sound_obj::uncompress( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_21_uncompress)
HXLINE(  22)		if (::hx::IsNotNull( this->uncompressedData )) {
HXLINE(  23)			done();
HXLINE(  24)			return;
            		}
HXLINE(  27)		int samples = 0;
HXLINE(  28)		int channels = 0;
HXLINE(  29)		int samplesPerSecond = 0;
HXLINE(  31)		int16_t *data = nullptr;
HXLINE(  32)		samples = stb_vorbis_decode_memory((uint8_t*)compressedData->b->GetBase(), compressedData->length, &channels, &samplesPerSecond, &data);
HXLINE(  34)		if ((channels == 1)) {
HXLINE(  35)			this->length = (( (Float)(samples) ) / ( (Float)(samplesPerSecond) ));
HXLINE(  36)			this->_hx_set_uncompressedData(HX_CTX, ::kha::arrays::_Float32Array::Float32Array_Impl__obj::_new((samples * 2)));
HXLINE(  37)			{
HXLINE(  37)				int _g = 0;
HXDLIN(  37)				int _g1 = samples;
HXDLIN(  37)				while((_g < _g1)){
HXLINE(  37)					_g = (_g + 1);
HXDLIN(  37)					int i = (_g - 1);
HXLINE(  38)					*((float*)&this->uncompressedData->self.data[(i * 2) * 4]) = data[i] / 32767.0f;
HXLINE(  39)					*((float*)&this->uncompressedData->self.data[(i * 2 + 1) * 4]) = data[i] / 32767.0f;
            				}
            			}
            		}
            		else {
HXLINE(  43)			this->length = (( (Float)(samples) ) / ( (Float)(samplesPerSecond) ));
HXLINE(  44)			this->_hx_set_uncompressedData(HX_CTX, ::kha::arrays::_Float32Array::Float32Array_Impl__obj::_new(samples));
HXLINE(  45)			{
HXLINE(  45)				int _g2 = 0;
HXDLIN(  45)				int _g3 = samples;
HXDLIN(  45)				while((_g2 < _g3)){
HXLINE(  45)					_g2 = (_g2 + 1);
HXDLIN(  45)					int i1 = (_g2 - 1);
HXLINE(  46)					*((float*)&this->uncompressedData->self.data[i1 * 4]) = data[i1] / 32767.0f;
            				}
            			}
            		}
HXLINE(  49)		this->channels = channels;
HXLINE(  50)		this->sampleRate = samplesPerSecond;
HXLINE(  52)		delete[] data;
HXLINE(  54)		this->_hx_set_compressedData(HX_CTX, null());
HXLINE(  55)		done();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,uncompress,(void))

void Sound_obj::unload(){
            	HX_GC_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_92_unload)
HXLINE(  93)		this->_hx_set_compressedData(HX_CTX, null());
HXLINE(  94)		this->_hx_set_uncompressedData(HX_CTX, null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,unload,(void))


::hx::ObjectPtr< Sound_obj > Sound_obj::__new() {
	::hx::ObjectPtr< Sound_obj > __this = new Sound_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Sound_obj > Sound_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Sound_obj *__this = (Sound_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Sound_obj), true, "kha.Sound"));
	*(void **)__this = Sound_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(compressedData,"compressedData");
	HX_MARK_MEMBER_NAME(uncompressedData,"uncompressedData");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(channels,"channels");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(compressedData,"compressedData");
	HX_VISIT_MEMBER_NAME(uncompressedData,"uncompressedData");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(channels,"channels");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
}

::hx::Val Sound_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return ::hx::Val( unload_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { return ::hx::Val( channels ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return ::hx::Val( sampleRate ); }
		if (HX_FIELD_EQ(inName,"uncompress") ) { return ::hx::Val( uncompress_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { return ::hx::Val( compressedData ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { return ::hx::Val( uncompressedData ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Sound_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { channels=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { _hx_set_compressedData(HX_CTX_GET,inValue.Cast<  ::haxe::io::Bytes >()); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { _hx_set_uncompressedData(HX_CTX_GET,inValue.Cast<  ::kha::arrays::ByteArrayPrivate >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("compressedData",4b,a3,dd,44));
	outFields->push(HX_("uncompressedData",64,13,ff,51));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("channels",50,aa,ee,6a));
	outFields->push(HX_("sampleRate",2a,3c,4c,67));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Sound_obj,compressedData),HX_("compressedData",4b,a3,dd,44)},
	{::hx::fsObject /*  ::kha::arrays::ByteArrayPrivate */ ,(int)offsetof(Sound_obj,uncompressedData),HX_("uncompressedData",64,13,ff,51)},
	{::hx::fsFloat,(int)offsetof(Sound_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsInt,(int)offsetof(Sound_obj,channels),HX_("channels",50,aa,ee,6a)},
	{::hx::fsInt,(int)offsetof(Sound_obj,sampleRate),HX_("sampleRate",2a,3c,4c,67)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_("compressedData",4b,a3,dd,44),
	HX_("uncompressedData",64,13,ff,51),
	HX_("length",e6,94,07,9f),
	HX_("channels",50,aa,ee,6a),
	HX_("sampleRate",2a,3c,4c,67),
	HX_("uncompress",fb,2e,83,09),
	HX_("unload",ff,a0,8c,65),
	::String(null()) };

::hx::Class Sound_obj::__mClass;

void Sound_obj::__register()
{
	Sound_obj _hx_dummy;
	Sound_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.Sound",e5,d4,6b,a1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Sound_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
