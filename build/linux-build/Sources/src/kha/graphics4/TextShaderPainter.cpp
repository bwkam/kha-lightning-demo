// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_3fe8139d5204232b
#define INCLUDED_3fe8139d5204232b
#include "cpp_bytearray.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_AlignedQuad
#include <hxinc/kha/AlignedQuad.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <hxinc/kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_ByteArrayPrivate
#include <hxinc/kha/arrays/ByteArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_InternalPipeline
#include <hxinc/kha/graphics4/InternalPipeline.h>
#endif
#ifndef INCLUDED_kha_graphics4_PerFramebufferPipelineCache
#include <hxinc/kha/graphics4/PerFramebufferPipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <hxinc/kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <hxinc/kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_593_new,"kha.graphics4.TextShaderPainter","new",0x421e3fdc,"kha.graphics4.TextShaderPainter.new","kha/graphics4/Graphics2.hx",593,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_625_get_pipeline,"kha.graphics4.TextShaderPainter","get_pipeline",0xa39f302f,"kha.graphics4.TextShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",625,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_628_set_pipeline,"kha.graphics4.TextShaderPainter","set_pipeline",0xb89853a3,"kha.graphics4.TextShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",628,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_634_setProjection,"kha.graphics4.TextShaderPainter","setProjection",0x648ae94d,"kha.graphics4.TextShaderPainter.setProjection","kha/graphics4/Graphics2.hx",634,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_648_initBuffers,"kha.graphics4.TextShaderPainter","initBuffers",0x5f3b5dbf,"kha.graphics4.TextShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",648,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_667_setRectVertices,"kha.graphics4.TextShaderPainter","setRectVertices",0x7c1e197b,"kha.graphics4.TextShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",667,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_686_setRectTexCoords,"kha.graphics4.TextShaderPainter","setRectTexCoords",0x56b955a3,"kha.graphics4.TextShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",686,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_701_setRectColors,"kha.graphics4.TextShaderPainter","setRectColors",0x6bbe5ab2,"kha.graphics4.TextShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",701,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_725_drawBuffer,"kha.graphics4.TextShaderPainter","drawBuffer",0x91b8f028,"kha.graphics4.TextShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",725,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_748_setBilinearFilter,"kha.graphics4.TextShaderPainter","setBilinearFilter",0x674edb82,"kha.graphics4.TextShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",748,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_754_setFont,"kha.graphics4.TextShaderPainter","setFont",0xd8227c0d,"kha.graphics4.TextShaderPainter.setFont","kha/graphics4/Graphics2.hx",754,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_773_drawString,"kha.graphics4.TextShaderPainter","drawString",0xd2545bf9,"kha.graphics4.TextShaderPainter.drawString","kha/graphics4/Graphics2.hx",773,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_803_drawCharacters,"kha.graphics4.TextShaderPainter","drawCharacters",0xf08f3fd2,"kha.graphics4.TextShaderPainter.drawCharacters","kha/graphics4/Graphics2.hx",803,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_831_end,"kha.graphics4.TextShaderPainter","end",0x42177357,"kha.graphics4.TextShaderPainter.end","kha/graphics4/Graphics2.hx",831,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_637_initShaders,"kha.graphics4.TextShaderPainter","initShaders",0x0d313bfa,"kha.graphics4.TextShaderPainter.initShaders","kha/graphics4/Graphics2.hx",637,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_757_findIndex,"kha.graphics4.TextShaderPainter","findIndex",0x55390095,"kha.graphics4.TextShaderPainter.findIndex","kha/graphics4/Graphics2.hx",757,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_596_boot,"kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",596,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_597_boot,"kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",597,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_598_boot,"kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",598,0x0c1de808)
namespace kha{
namespace graphics4{

void TextShaderPainter_obj::__construct(::Dynamic g4){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_593_new)
HXLINE( 771)		this->_hx_set_bakedQuadCache(HX_CTX,  ::kha::AlignedQuad_obj::__alloc( HX_CTX ));
HXLINE( 614)		this->bilinear = false;
HXLINE( 609)		this->_hx_set_myPipeline(HX_CTX, null());
HXLINE( 617)		this->_hx_set_g(HX_CTX, g4);
HXLINE( 618)		::kha::graphics4::TextShaderPainter_obj::bufferIndex = 0;
HXLINE( 619)		::kha::graphics4::TextShaderPainter_obj::initShaders();
HXLINE( 620)		this->_hx_set_myPipeline(HX_CTX, ::kha::graphics4::TextShaderPainter_obj::standardTextPipeline);
HXLINE( 621)		this->initBuffers();
            	}

Dynamic TextShaderPainter_obj::__CreateEmpty() { return new TextShaderPainter_obj; }

void *TextShaderPainter_obj::_hx_vtable = 0;

Dynamic TextShaderPainter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextShaderPainter_obj > _hx_result = new TextShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51f88ed4;
}

::Dynamic TextShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_625_get_pipeline)
HXDLIN( 625)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,get_pipeline,return )

::Dynamic TextShaderPainter_obj::set_pipeline(::Dynamic pipe){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_628_set_pipeline)
HXLINE( 629)		::Dynamic _hx_tmp;
HXDLIN( 629)		if (::hx::IsNotNull( pipe )) {
HXLINE( 629)			_hx_tmp = pipe;
            		}
            		else {
HXLINE( 629)			_hx_tmp = ::kha::graphics4::TextShaderPainter_obj::standardTextPipeline;
            		}
HXDLIN( 629)		this->_hx_set_myPipeline(HX_CTX, _hx_tmp);
HXLINE( 630)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,set_pipeline,return )

void TextShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_634_setProjection)
HXDLIN( 634)		this->_hx_set_projectionMatrix(HX_CTX, projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setProjection,(void))

void TextShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_648_initBuffers)
HXDLIN( 648)		if (::hx::IsNull( ::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 649)			::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,4000,::kha::graphics4::TextShaderPainter_obj::structure,1,null(),null());
HXLINE( 650)			::kha::graphics4::TextShaderPainter_obj::rectVertices = ::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 652)			::kha::graphics4::TextShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,6000,0,null());
HXLINE( 653)			 ::kha::arrays::ByteArrayPrivate indices = ::kha::graphics4::TextShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 654)			{
HXLINE( 654)				int _g = 0;
HXDLIN( 654)				while((_g < 1000)){
HXLINE( 654)					_g = (_g + 1);
HXDLIN( 654)					int i = (_g - 1);
HXLINE( 655)					{
HXLINE( 655)						int k = ((i * 3) * 2);
HXDLIN( 655)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k * 4)]) = (i * 4);
HXDLIN( 655)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k * 4)];
            					}
HXLINE( 656)					{
HXLINE( 656)						int k1 = (((i * 3) * 2) + 1);
HXDLIN( 656)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k1 * 4)]) = ((i * 4) + 1);
HXDLIN( 656)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k1 * 4)];
            					}
HXLINE( 657)					{
HXLINE( 657)						int k2 = (((i * 3) * 2) + 2);
HXDLIN( 657)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k2 * 4)]) = ((i * 4) + 2);
HXDLIN( 657)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k2 * 4)];
            					}
HXLINE( 658)					{
HXLINE( 658)						int k3 = (((i * 3) * 2) + 3);
HXDLIN( 658)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k3 * 4)]) = (i * 4);
HXDLIN( 658)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k3 * 4)];
            					}
HXLINE( 659)					{
HXLINE( 659)						int k4 = (((i * 3) * 2) + 4);
HXDLIN( 659)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k4 * 4)]) = ((i * 4) + 2);
HXDLIN( 659)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k4 * 4)];
            					}
HXLINE( 660)					{
HXLINE( 660)						int k5 = (((i * 3) * 2) + 5);
HXDLIN( 660)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k5 * 4)]) = ((i * 4) + 3);
HXDLIN( 660)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k5 * 4)];
            					}
            				}
            			}
HXLINE( 662)			::kha::graphics4::TextShaderPainter_obj::indexBuffer->unlock(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,initBuffers,(void))

void TextShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_667_setRectVertices)
HXLINE( 668)		int baseIndex = ((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 9) * 4);
HXLINE( 669)		{
HXLINE( 669)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 669)			*((float *)&this1->self.data[this1->byteArrayOffset + (baseIndex * 4)]) = bottomleftx;
            		}
HXLINE( 670)		{
HXLINE( 670)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 670)			*((float *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 1) * 4)]) = bottomlefty;
            		}
HXLINE( 671)		{
HXLINE( 671)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 671)			*((float *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 2) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 673)		{
HXLINE( 673)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 673)			*((float *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 9) * 4)]) = topleftx;
            		}
HXLINE( 674)		{
HXLINE( 674)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 674)			*((float *)&this5->self.data[this5->byteArrayOffset + ((baseIndex + 10) * 4)]) = toplefty;
            		}
HXLINE( 675)		{
HXLINE( 675)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 675)			*((float *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 11) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 677)		{
HXLINE( 677)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 677)			*((float *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 18) * 4)]) = toprightx;
            		}
HXLINE( 678)		{
HXLINE( 678)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 678)			*((float *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 19) * 4)]) = toprighty;
            		}
HXLINE( 679)		{
HXLINE( 679)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 679)			*((float *)&this9->self.data[this9->byteArrayOffset + ((baseIndex + 20) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 681)		{
HXLINE( 681)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 681)			*((float *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 27) * 4)]) = bottomrightx;
            		}
HXLINE( 682)		{
HXLINE( 682)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 682)			*((float *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 28) * 4)]) = bottomrighty;
            		}
HXLINE( 683)		{
HXLINE( 683)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 683)			*((float *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 29) * 4)]) = ((Float)-5.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(TextShaderPainter_obj,setRectVertices,(void))

void TextShaderPainter_obj::setRectTexCoords(Float left,Float top,Float right,Float bottom){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_686_setRectTexCoords)
HXLINE( 687)		int baseIndex = ((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 9) * 4);
HXLINE( 688)		{
HXLINE( 688)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 688)			*((float *)&this1->self.data[this1->byteArrayOffset + ((baseIndex + 3) * 4)]) = left;
            		}
HXLINE( 689)		{
HXLINE( 689)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 689)			*((float *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 4) * 4)]) = bottom;
            		}
HXLINE( 691)		{
HXLINE( 691)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 691)			*((float *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 12) * 4)]) = left;
            		}
HXLINE( 692)		{
HXLINE( 692)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 692)			*((float *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 13) * 4)]) = top;
            		}
HXLINE( 694)		{
HXLINE( 694)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 694)			*((float *)&this5->self.data[this5->byteArrayOffset + ((baseIndex + 21) * 4)]) = right;
            		}
HXLINE( 695)		{
HXLINE( 695)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 695)			*((float *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 22) * 4)]) = top;
            		}
HXLINE( 697)		{
HXLINE( 697)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 697)			*((float *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 30) * 4)]) = right;
            		}
HXLINE( 698)		{
HXLINE( 698)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 698)			*((float *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 31) * 4)]) = bottom;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextShaderPainter_obj,setRectTexCoords,(void))

void TextShaderPainter_obj::setRectColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_701_setRectColors)
HXLINE( 702)		int baseIndex = ((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 9) * 4);
HXLINE( 703)		float a = (opacity * (( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 704)		{
HXLINE( 704)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 704)			float v = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 704)			*((float *)&this1->self.data[this1->byteArrayOffset + ((baseIndex + 5) * 4)]) = v;
            		}
HXLINE( 705)		{
HXLINE( 705)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 705)			float v1 = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 705)			*((float *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 6) * 4)]) = v1;
            		}
HXLINE( 706)		{
HXLINE( 706)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 706)			float v2 = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 706)			*((float *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 7) * 4)]) = v2;
            		}
HXLINE( 707)		{
HXLINE( 707)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 707)			*((float *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 8) * 4)]) = a;
            		}
HXLINE( 709)		{
HXLINE( 709)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 709)			float v3 = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 709)			*((float *)&this5->self.data[this5->byteArrayOffset + ((baseIndex + 14) * 4)]) = v3;
            		}
HXLINE( 710)		{
HXLINE( 710)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 710)			float v4 = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 710)			*((float *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 15) * 4)]) = v4;
            		}
HXLINE( 711)		{
HXLINE( 711)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 711)			float v5 = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 711)			*((float *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 16) * 4)]) = v5;
            		}
HXLINE( 712)		{
HXLINE( 712)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 712)			*((float *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 17) * 4)]) = a;
            		}
HXLINE( 714)		{
HXLINE( 714)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 714)			float v6 = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 714)			*((float *)&this9->self.data[this9->byteArrayOffset + ((baseIndex + 23) * 4)]) = v6;
            		}
HXLINE( 715)		{
HXLINE( 715)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 715)			float v7 = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 715)			*((float *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 24) * 4)]) = v7;
            		}
HXLINE( 716)		{
HXLINE( 716)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 716)			float v8 = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 716)			*((float *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 25) * 4)]) = v8;
            		}
HXLINE( 717)		{
HXLINE( 717)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 717)			*((float *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 26) * 4)]) = a;
            		}
HXLINE( 719)		{
HXLINE( 719)			 ::kha::arrays::ByteArrayPrivate this13 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 719)			float v9 = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 719)			*((float *)&this13->self.data[this13->byteArrayOffset + ((baseIndex + 32) * 4)]) = v9;
            		}
HXLINE( 720)		{
HXLINE( 720)			 ::kha::arrays::ByteArrayPrivate this14 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 720)			float v10 = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 720)			*((float *)&this14->self.data[this14->byteArrayOffset + ((baseIndex + 33) * 4)]) = v10;
            		}
HXLINE( 721)		{
HXLINE( 721)			 ::kha::arrays::ByteArrayPrivate this15 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 721)			float v11 = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 721)			*((float *)&this15->self.data[this15->byteArrayOffset + ((baseIndex + 34) * 4)]) = v11;
            		}
HXLINE( 722)		{
HXLINE( 722)			 ::kha::arrays::ByteArrayPrivate this16 = ::kha::graphics4::TextShaderPainter_obj::rectVertices;
HXDLIN( 722)			*((float *)&this16->self.data[this16->byteArrayOffset + ((baseIndex + 35) * 4)]) = a;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextShaderPainter_obj,setRectColors,(void))

void TextShaderPainter_obj::drawBuffer(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_725_drawBuffer)
HXLINE( 726)		if ((::kha::graphics4::TextShaderPainter_obj::bufferIndex == 0)) {
HXLINE( 727)			return;
            		}
HXLINE( 730)		::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer->unlock((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 4));
HXLINE( 731)		 ::kha::graphics4::InternalPipeline pipeline = ::kha::graphics4::PipelineCache_obj::get(this->myPipeline,null(),3);
HXLINE( 732)		::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline->pipeline);
HXLINE( 733)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer);
HXLINE( 734)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::TextShaderPainter_obj::indexBuffer);
HXLINE( 735)		::kha::graphics4::Graphics_obj::setMatrix(this->g,pipeline->projectionLocation,this->projectionMatrix);
HXLINE( 736)		::kha::graphics4::Graphics_obj::setTexture(this->g,pipeline->textureLocation,::kha::graphics4::TextShaderPainter_obj::lastTexture);
HXLINE( 738)		int _hx_tmp;
HXDLIN( 738)		if (this->bilinear) {
HXLINE( 738)			_hx_tmp = 1;
            		}
            		else {
HXLINE( 738)			_hx_tmp = 0;
            		}
HXDLIN( 738)		int _hx_tmp1;
HXDLIN( 738)		if (this->bilinear) {
HXLINE( 738)			_hx_tmp1 = 1;
            		}
            		else {
HXLINE( 738)			_hx_tmp1 = 0;
            		}
HXLINE( 737)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,pipeline->textureLocation,2,2,_hx_tmp,_hx_tmp1,0);
HXLINE( 741)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 2) * 3));
HXLINE( 743)		::kha::graphics4::Graphics_obj::setTexture(this->g,pipeline->textureLocation,null());
HXLINE( 744)		::kha::graphics4::TextShaderPainter_obj::bufferIndex = 0;
HXLINE( 745)		::kha::graphics4::TextShaderPainter_obj::rectVertices = ::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,drawBuffer,(void))

void TextShaderPainter_obj::setBilinearFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_748_setBilinearFilter)
HXLINE( 749)		this->end();
HXLINE( 750)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setBilinearFilter,(void))

void TextShaderPainter_obj::setFont( ::kha::Kravur font){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_754_setFont)
HXDLIN( 754)		this->_hx_set_font(HX_CTX, font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setFont,(void))

void TextShaderPainter_obj::drawString(::String text,float opacity,int color,Float x,Float y, ::kha::math::FastMatrix3 transformation){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_773_drawString)
HXLINE( 774)		 ::kha::KravurImage font = this->font->_get(this->fontSize);
HXLINE( 775)		 ::kha::Image tex = font->getTexture();
HXLINE( 776)		bool _hx_tmp;
HXDLIN( 776)		if (::hx::IsNotNull( ::kha::graphics4::TextShaderPainter_obj::lastTexture )) {
HXLINE( 776)			_hx_tmp = ::hx::IsInstanceNotEq( tex,::kha::graphics4::TextShaderPainter_obj::lastTexture );
            		}
            		else {
HXLINE( 776)			_hx_tmp = false;
            		}
HXDLIN( 776)		if (_hx_tmp) {
HXLINE( 777)			this->drawBuffer();
            		}
HXLINE( 778)		::kha::graphics4::TextShaderPainter_obj::lastTexture = tex;
HXLINE( 780)		Float xpos = x;
HXLINE( 781)		Float ypos = y;
HXLINE( 782)		{
HXLINE( 782)			int _g = 0;
HXDLIN( 782)			int _g1 = text.length;
HXDLIN( 782)			while((_g < _g1)){
HXLINE( 782)				_g = (_g + 1);
HXDLIN( 782)				int i = (_g - 1);
HXLINE( 783)				int charCode = text.cca(i);
HXLINE( 784)				 ::kha::AlignedQuad q = this->bakedQuadCache;
HXDLIN( 784)				 ::kha::AlignedQuad q1 = font->getBakedQuad(q,::kha::graphics4::TextShaderPainter_obj::findIndex(charCode),xpos,ypos);
HXLINE( 785)				if (::hx::IsNotNull( q1 )) {
HXLINE( 786)					if (((::kha::graphics4::TextShaderPainter_obj::bufferIndex + 1) >= 1000)) {
HXLINE( 787)						this->drawBuffer();
            					}
HXLINE( 788)					this->setRectColors(opacity,color);
HXLINE( 789)					Float q2 = q1->s0;
HXDLIN( 789)					Float _hx_tmp1 = (q2 * ( (Float)(tex->get_width()) ));
HXDLIN( 789)					Float _hx_tmp2 = (_hx_tmp1 / ( (Float)(tex->get_realWidth()) ));
HXDLIN( 789)					Float q3 = q1->t0;
HXDLIN( 789)					Float _hx_tmp3 = (q3 * ( (Float)(tex->get_height()) ));
HXDLIN( 789)					Float _hx_tmp4 = (_hx_tmp3 / ( (Float)(tex->get_realHeight()) ));
HXDLIN( 789)					Float q4 = q1->s1;
HXDLIN( 789)					Float _hx_tmp5 = (q4 * ( (Float)(tex->get_width()) ));
HXDLIN( 789)					Float _hx_tmp6 = (_hx_tmp5 / ( (Float)(tex->get_realWidth()) ));
HXLINE( 790)					Float q5 = q1->t1;
HXDLIN( 790)					Float _hx_tmp7 = (q5 * ( (Float)(tex->get_height()) ));
HXLINE( 789)					this->setRectTexCoords(_hx_tmp2,_hx_tmp4,_hx_tmp6,(_hx_tmp7 / ( (Float)(tex->get_realHeight()) )));
HXLINE( 791)					float value_x = ( (float)(q1->x0) );
HXDLIN( 791)					float value_y = ( (float)(q1->y1) );
HXDLIN( 791)					float w = (((transformation->_02 * value_x) + (transformation->_12 * value_y)) + transformation->_22);
HXDLIN( 791)					Float x1 = (( (Float)((((transformation->_00 * value_x) + (transformation->_10 * value_y)) + transformation->_20)) ) / ( (Float)(w) ));
HXDLIN( 791)					float y1 = ( (float)((( (Float)((((transformation->_01 * value_x) + (transformation->_11 * value_y)) + transformation->_21)) ) / ( (Float)(w) ))) );
HXDLIN( 791)					float p0_x = ( (float)(x1) );
HXDLIN( 791)					float p0_y = y1;
HXLINE( 792)					float value_x1 = ( (float)(q1->x0) );
HXDLIN( 792)					float value_y1 = ( (float)(q1->y0) );
HXDLIN( 792)					float w1 = (((transformation->_02 * value_x1) + (transformation->_12 * value_y1)) + transformation->_22);
HXDLIN( 792)					Float x2 = (( (Float)((((transformation->_00 * value_x1) + (transformation->_10 * value_y1)) + transformation->_20)) ) / ( (Float)(w1) ));
HXDLIN( 792)					float y2 = ( (float)((( (Float)((((transformation->_01 * value_x1) + (transformation->_11 * value_y1)) + transformation->_21)) ) / ( (Float)(w1) ))) );
HXDLIN( 792)					float p1_x = ( (float)(x2) );
HXDLIN( 792)					float p1_y = y2;
HXLINE( 793)					float value_x2 = ( (float)(q1->x1) );
HXDLIN( 793)					float value_y2 = ( (float)(q1->y0) );
HXDLIN( 793)					float w2 = (((transformation->_02 * value_x2) + (transformation->_12 * value_y2)) + transformation->_22);
HXDLIN( 793)					Float x3 = (( (Float)((((transformation->_00 * value_x2) + (transformation->_10 * value_y2)) + transformation->_20)) ) / ( (Float)(w2) ));
HXDLIN( 793)					float y3 = ( (float)((( (Float)((((transformation->_01 * value_x2) + (transformation->_11 * value_y2)) + transformation->_21)) ) / ( (Float)(w2) ))) );
HXDLIN( 793)					float p2_x = ( (float)(x3) );
HXDLIN( 793)					float p2_y = y3;
HXLINE( 794)					float value_x3 = ( (float)(q1->x1) );
HXDLIN( 794)					float value_y3 = ( (float)(q1->y1) );
HXDLIN( 794)					float w3 = (((transformation->_02 * value_x3) + (transformation->_12 * value_y3)) + transformation->_22);
HXDLIN( 794)					Float x4 = (( (Float)((((transformation->_00 * value_x3) + (transformation->_10 * value_y3)) + transformation->_20)) ) / ( (Float)(w3) ));
HXDLIN( 794)					float y4 = ( (float)((( (Float)((((transformation->_01 * value_x3) + (transformation->_11 * value_y3)) + transformation->_21)) ) / ( (Float)(w3) ))) );
HXDLIN( 794)					float p3_x = ( (float)(x4) );
HXDLIN( 794)					float p3_y = y4;
HXLINE( 795)					this->setRectVertices(( (Float)(p0_x) ),( (Float)(p0_y) ),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ));
HXLINE( 796)					xpos = (xpos + q1->xadvance);
HXLINE( 797)					++::kha::graphics4::TextShaderPainter_obj::bufferIndex;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(TextShaderPainter_obj,drawString,(void))

void TextShaderPainter_obj::drawCharacters(::Array< int > text,int start,int length,float opacity,int color,Float x,Float y, ::kha::math::FastMatrix3 transformation){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_803_drawCharacters)
HXLINE( 804)		 ::kha::KravurImage font = this->font->_get(this->fontSize);
HXLINE( 805)		 ::kha::Image tex = font->getTexture();
HXLINE( 806)		bool _hx_tmp;
HXDLIN( 806)		if (::hx::IsNotNull( ::kha::graphics4::TextShaderPainter_obj::lastTexture )) {
HXLINE( 806)			_hx_tmp = ::hx::IsInstanceNotEq( tex,::kha::graphics4::TextShaderPainter_obj::lastTexture );
            		}
            		else {
HXLINE( 806)			_hx_tmp = false;
            		}
HXDLIN( 806)		if (_hx_tmp) {
HXLINE( 807)			this->drawBuffer();
            		}
HXLINE( 808)		::kha::graphics4::TextShaderPainter_obj::lastTexture = tex;
HXLINE( 810)		Float xpos = x;
HXLINE( 811)		Float ypos = y;
HXLINE( 812)		{
HXLINE( 812)			int _g = start;
HXDLIN( 812)			int _g1 = (start + length);
HXDLIN( 812)			while((_g < _g1)){
HXLINE( 812)				_g = (_g + 1);
HXDLIN( 812)				int i = (_g - 1);
HXLINE( 813)				 ::kha::AlignedQuad q = this->bakedQuadCache;
HXDLIN( 813)				 ::kha::AlignedQuad q1 = font->getBakedQuad(q,::kha::graphics4::TextShaderPainter_obj::findIndex(text->__get(i)),xpos,ypos);
HXLINE( 814)				if (::hx::IsNotNull( q1 )) {
HXLINE( 815)					if (((::kha::graphics4::TextShaderPainter_obj::bufferIndex + 1) >= 1000)) {
HXLINE( 816)						this->drawBuffer();
            					}
HXLINE( 817)					this->setRectColors(opacity,color);
HXLINE( 818)					Float q2 = q1->s0;
HXDLIN( 818)					Float _hx_tmp1 = (q2 * ( (Float)(tex->get_width()) ));
HXDLIN( 818)					Float _hx_tmp2 = (_hx_tmp1 / ( (Float)(tex->get_realWidth()) ));
HXDLIN( 818)					Float q3 = q1->t0;
HXDLIN( 818)					Float _hx_tmp3 = (q3 * ( (Float)(tex->get_height()) ));
HXDLIN( 818)					Float _hx_tmp4 = (_hx_tmp3 / ( (Float)(tex->get_realHeight()) ));
HXDLIN( 818)					Float q4 = q1->s1;
HXDLIN( 818)					Float _hx_tmp5 = (q4 * ( (Float)(tex->get_width()) ));
HXDLIN( 818)					Float _hx_tmp6 = (_hx_tmp5 / ( (Float)(tex->get_realWidth()) ));
HXLINE( 819)					Float q5 = q1->t1;
HXDLIN( 819)					Float _hx_tmp7 = (q5 * ( (Float)(tex->get_height()) ));
HXLINE( 818)					this->setRectTexCoords(_hx_tmp2,_hx_tmp4,_hx_tmp6,(_hx_tmp7 / ( (Float)(tex->get_realHeight()) )));
HXLINE( 820)					float value_x = ( (float)(q1->x0) );
HXDLIN( 820)					float value_y = ( (float)(q1->y1) );
HXDLIN( 820)					float w = (((transformation->_02 * value_x) + (transformation->_12 * value_y)) + transformation->_22);
HXDLIN( 820)					Float x1 = (( (Float)((((transformation->_00 * value_x) + (transformation->_10 * value_y)) + transformation->_20)) ) / ( (Float)(w) ));
HXDLIN( 820)					float y1 = ( (float)((( (Float)((((transformation->_01 * value_x) + (transformation->_11 * value_y)) + transformation->_21)) ) / ( (Float)(w) ))) );
HXDLIN( 820)					float p0_x = ( (float)(x1) );
HXDLIN( 820)					float p0_y = y1;
HXLINE( 821)					float value_x1 = ( (float)(q1->x0) );
HXDLIN( 821)					float value_y1 = ( (float)(q1->y0) );
HXDLIN( 821)					float w1 = (((transformation->_02 * value_x1) + (transformation->_12 * value_y1)) + transformation->_22);
HXDLIN( 821)					Float x2 = (( (Float)((((transformation->_00 * value_x1) + (transformation->_10 * value_y1)) + transformation->_20)) ) / ( (Float)(w1) ));
HXDLIN( 821)					float y2 = ( (float)((( (Float)((((transformation->_01 * value_x1) + (transformation->_11 * value_y1)) + transformation->_21)) ) / ( (Float)(w1) ))) );
HXDLIN( 821)					float p1_x = ( (float)(x2) );
HXDLIN( 821)					float p1_y = y2;
HXLINE( 822)					float value_x2 = ( (float)(q1->x1) );
HXDLIN( 822)					float value_y2 = ( (float)(q1->y0) );
HXDLIN( 822)					float w2 = (((transformation->_02 * value_x2) + (transformation->_12 * value_y2)) + transformation->_22);
HXDLIN( 822)					Float x3 = (( (Float)((((transformation->_00 * value_x2) + (transformation->_10 * value_y2)) + transformation->_20)) ) / ( (Float)(w2) ));
HXDLIN( 822)					float y3 = ( (float)((( (Float)((((transformation->_01 * value_x2) + (transformation->_11 * value_y2)) + transformation->_21)) ) / ( (Float)(w2) ))) );
HXDLIN( 822)					float p2_x = ( (float)(x3) );
HXDLIN( 822)					float p2_y = y3;
HXLINE( 823)					float value_x3 = ( (float)(q1->x1) );
HXDLIN( 823)					float value_y3 = ( (float)(q1->y1) );
HXDLIN( 823)					float w3 = (((transformation->_02 * value_x3) + (transformation->_12 * value_y3)) + transformation->_22);
HXDLIN( 823)					Float x4 = (( (Float)((((transformation->_00 * value_x3) + (transformation->_10 * value_y3)) + transformation->_20)) ) / ( (Float)(w3) ));
HXDLIN( 823)					float y4 = ( (float)((( (Float)((((transformation->_01 * value_x3) + (transformation->_11 * value_y3)) + transformation->_21)) ) / ( (Float)(w3) ))) );
HXDLIN( 823)					float p3_x = ( (float)(x4) );
HXDLIN( 823)					float p3_y = y4;
HXLINE( 824)					this->setRectVertices(( (Float)(p0_x) ),( (Float)(p0_y) ),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ));
HXLINE( 825)					xpos = (xpos + q1->xadvance);
HXLINE( 826)					++::kha::graphics4::TextShaderPainter_obj::bufferIndex;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(TextShaderPainter_obj,drawCharacters,(void))

void TextShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_831_end)
HXLINE( 832)		if ((::kha::graphics4::TextShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 833)			this->drawBuffer();
            		}
HXLINE( 834)		::kha::graphics4::TextShaderPainter_obj::lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,end,(void))

::Dynamic TextShaderPainter_obj::standardTextPipeline;

 ::kha::graphics4::VertexStructure TextShaderPainter_obj::structure;

int TextShaderPainter_obj::bufferSize;

int TextShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer TextShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::ByteArrayPrivate TextShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer TextShaderPainter_obj::indexBuffer;

 ::kha::Image TextShaderPainter_obj::lastTexture;

void TextShaderPainter_obj::initShaders(){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_637_initShaders)
HXLINE( 638)		if (::hx::IsNull( ::kha::graphics4::TextShaderPainter_obj::structure )) {
HXLINE( 639)			::kha::graphics4::TextShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createTextVertexStructure();
            		}
HXLINE( 641)		if (::hx::IsNull( ::kha::graphics4::TextShaderPainter_obj::standardTextPipeline )) {
HXLINE( 642)			 ::kha::graphics4::PipelineState pipeline = ::kha::graphics4::Graphics2_obj::createTextPipeline(::kha::graphics4::TextShaderPainter_obj::structure);
HXLINE( 643)			::kha::graphics4::TextShaderPainter_obj::standardTextPipeline =  ::kha::graphics4::PerFramebufferPipelineCache_obj::__alloc( HX_CTX ,pipeline,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,initShaders,(void))

int TextShaderPainter_obj::findIndex(int charCode){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_757_findIndex)
HXLINE( 759)		::Array< int > blocks = ::kha::KravurImage_obj::charBlocks;
HXLINE( 760)		int offset = 0;
HXLINE( 761)		{
HXLINE( 761)			int _g = 0;
HXDLIN( 761)			int _g1 = ::Std_obj::_hx_int((( (Float)(blocks->length) ) / ( (Float)(2) )));
HXDLIN( 761)			while((_g < _g1)){
HXLINE( 761)				_g = (_g + 1);
HXDLIN( 761)				int i = (_g - 1);
HXLINE( 762)				int start = blocks->__get((i * 2));
HXLINE( 763)				int end = blocks->__get(((i * 2) + 1));
HXLINE( 764)				bool _hx_tmp;
HXDLIN( 764)				if ((charCode >= start)) {
HXLINE( 764)					_hx_tmp = (charCode <= end);
            				}
            				else {
HXLINE( 764)					_hx_tmp = false;
            				}
HXDLIN( 764)				if (_hx_tmp) {
HXLINE( 765)					return ((offset + charCode) - start);
            				}
HXLINE( 766)				offset = (offset + ((end - start) + 1));
            			}
            		}
HXLINE( 768)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,findIndex,return )


::hx::ObjectPtr< TextShaderPainter_obj > TextShaderPainter_obj::__new(::Dynamic g4) {
	::hx::ObjectPtr< TextShaderPainter_obj > __this = new TextShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

::hx::ObjectPtr< TextShaderPainter_obj > TextShaderPainter_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic g4) {
	TextShaderPainter_obj *__this = (TextShaderPainter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextShaderPainter_obj), true, "kha.graphics4.TextShaderPainter"));
	*(void **)__this = TextShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

TextShaderPainter_obj::TextShaderPainter_obj()
{
}

void TextShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(bakedQuadCache,"bakedQuadCache");
	HX_MARK_END_CLASS();
}

void TextShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(bakedQuadCache,"bakedQuadCache");
}

::hx::Val TextShaderPainter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return ::hx::Val( font ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setFont") ) { return ::hx::Val( setFont_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pipeline() ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return ::hx::Val( fontSize ); }
		if (HX_FIELD_EQ(inName,"bilinear") ) { return ::hx::Val( bilinear ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return ::hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return ::hx::Val( drawBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawString") ) { return ::hx::Val( drawString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return ::hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return ::hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return ::hx::Val( set_pipeline_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return ::hx::Val( setProjection_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return ::hx::Val( setRectColors_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bakedQuadCache") ) { return ::hx::Val( bakedQuadCache ); }
		if (HX_FIELD_EQ(inName,"drawCharacters") ) { return ::hx::Val( drawCharacters_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return ::hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return ::hx::Val( projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return ::hx::Val( setRectTexCoords_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return ::hx::Val( setBilinearFilter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		if (HX_FIELD_EQ(inName,"findIndex") ) { outValue = findIndex_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { outValue = ( lastTexture ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"standardTextPipeline") ) { outValue = ( standardTextPipeline ); return true; }
	}
	return false;
}

::hx::Val TextShaderPainter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { _hx_set_font(HX_CTX_GET,inValue.Cast<  ::kha::Kravur >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pipeline(inValue.Cast< ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { fontSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { _hx_set_myPipeline(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bakedQuadCache") ) { _hx_set_bakedQuadCache(HX_CTX_GET,inValue.Cast<  ::kha::AlignedQuad >()); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { _hx_set_projectionMatrix(HX_CTX_GET,inValue.Cast<  ::kha::math::FastMatrix4 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=ioValue.Cast<  ::kha::Image >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::ByteArrayPrivate >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"standardTextPipeline") ) { standardTextPipeline=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

void TextShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("bilinear",ec,b6,3d,e0));
	outFields->push(HX_("bakedQuadCache",50,ed,27,d8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextShaderPainter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(TextShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{::hx::fsObject /*  ::kha::Kravur */ ,(int)offsetof(TextShaderPainter_obj,font),HX_("font",cf,5d,c0,43)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(TextShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(TextShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{::hx::fsInt,(int)offsetof(TextShaderPainter_obj,fontSize),HX_("fontSize",30,be,d1,ce)},
	{::hx::fsBool,(int)offsetof(TextShaderPainter_obj,bilinear),HX_("bilinear",ec,b6,3d,e0)},
	{::hx::fsObject /*  ::kha::AlignedQuad */ ,(int)offsetof(TextShaderPainter_obj,bakedQuadCache),HX_("bakedQuadCache",50,ed,27,d8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TextShaderPainter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(void *) &TextShaderPainter_obj::standardTextPipeline,HX_("standardTextPipeline",cc,23,5e,00)},
	{::hx::fsObject /*  ::kha::graphics4::VertexStructure */ ,(void *) &TextShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{::hx::fsInt,(void *) &TextShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{::hx::fsInt,(void *) &TextShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{::hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &TextShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{::hx::fsObject /*  ::kha::arrays::ByteArrayPrivate */ ,(void *) &TextShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{::hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &TextShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{::hx::fsObject /*  ::kha::Image */ ,(void *) &TextShaderPainter_obj::lastTexture,HX_("lastTexture",25,7d,8c,53)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TextShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("font",cf,5d,c0,43),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("fontSize",30,be,d1,ce),
	HX_("bilinear",ec,b6,3d,e0),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectTexCoords",9f,c2,a8,fb),
	HX_("setRectColors",36,38,37,6d),
	HX_("drawBuffer",24,38,58,12),
	HX_("setBilinearFilter",06,cb,de,13),
	HX_("setFont",91,9e,44,09),
	HX_("bakedQuadCache",50,ed,27,d8),
	HX_("drawString",f5,a3,f3,52),
	HX_("drawCharacters",ce,35,d8,38),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void TextShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::standardTextPipeline,"standardTextPipeline");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::lastTexture,"lastTexture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::standardTextPipeline,"standardTextPipeline");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::lastTexture,"lastTexture");
};

#endif

::hx::Class TextShaderPainter_obj::__mClass;

static ::String TextShaderPainter_obj_sStaticFields[] = {
	HX_("standardTextPipeline",cc,23,5e,00),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("lastTexture",25,7d,8c,53),
	HX_("initShaders",7e,f0,f0,17),
	HX_("findIndex",19,cc,0b,ad),
	::String(null())
};

void TextShaderPainter_obj::__register()
{
	TextShaderPainter_obj _hx_dummy;
	TextShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.TextShaderPainter",ea,61,5a,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &TextShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = TextShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TextShaderPainter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextShaderPainter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_596_boot)
HXDLIN( 596)		standardTextPipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_597_boot)
HXDLIN( 597)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_598_boot)
HXDLIN( 598)		bufferSize = 1000;
            	}
}

} // end namespace kha
} // end namespace graphics4
