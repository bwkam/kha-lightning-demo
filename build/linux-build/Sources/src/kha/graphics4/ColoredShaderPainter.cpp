// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_3fe8139d5204232b
#define INCLUDED_3fe8139d5204232b
#include "cpp_bytearray.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_arrays_ByteArrayPrivate
#include <hxinc/kha/arrays/ByteArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <hxinc/kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_InternalPipeline
#include <hxinc/kha/graphics4/InternalPipeline.h>
#endif
#ifndef INCLUDED_kha_graphics4_PerFramebufferPipelineCache
#include <hxinc/kha/graphics4/PerFramebufferPipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa9e8f706269b90e_339_new,"kha.graphics4.ColoredShaderPainter","new",0x02e5b025,"kha.graphics4.ColoredShaderPainter.new","kha/graphics4/Graphics2.hx",339,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_372_get_pipeline,"kha.graphics4.ColoredShaderPainter","get_pipeline",0x7ba5eec6,"kha.graphics4.ColoredShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",372,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_375_set_pipeline,"kha.graphics4.ColoredShaderPainter","set_pipeline",0x909f123a,"kha.graphics4.ColoredShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",375,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_381_setProjection,"kha.graphics4.ColoredShaderPainter","setProjection",0x926aeed6,"kha.graphics4.ColoredShaderPainter.setProjection","kha/graphics4/Graphics2.hx",381,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_395_initBuffers,"kha.graphics4.ColoredShaderPainter","initBuffers",0x83c9bf08,"kha.graphics4.ColoredShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",395,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_426_setRectVertices,"kha.graphics4.ColoredShaderPainter","setRectVertices",0xe6315344,"kha.graphics4.ColoredShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",426,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_445_setRectColors,"kha.graphics4.ColoredShaderPainter","setRectColors",0x999e603b,"kha.graphics4.ColoredShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",445,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_474_setTriVertices,"kha.graphics4.ColoredShaderPainter","setTriVertices",0x2457a01d,"kha.graphics4.ColoredShaderPainter.setTriVertices","kha/graphics4/Graphics2.hx",474,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_490_setTriColors,"kha.graphics4.ColoredShaderPainter","setTriColors",0xb69b94d4,"kha.graphics4.ColoredShaderPainter.setTriColors","kha/graphics4/Graphics2.hx",490,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_514_drawBuffer,"kha.graphics4.ColoredShaderPainter","drawBuffer",0xe9220aff,"kha.graphics4.ColoredShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",514,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_535_drawTriBuffer,"kha.graphics4.ColoredShaderPainter","drawTriBuffer",0xacdf87ec,"kha.graphics4.ColoredShaderPainter.drawTriBuffer","kha/graphics4/Graphics2.hx",535,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_553_fillRect,"kha.graphics4.ColoredShaderPainter","fillRect",0xd64d1b62,"kha.graphics4.ColoredShaderPainter.fillRect","kha/graphics4/Graphics2.hx",553,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_565_fillTriangle,"kha.graphics4.ColoredShaderPainter","fillTriangle",0x0d428406,"kha.graphics4.ColoredShaderPainter.fillTriangle","kha/graphics4/Graphics2.hx",565,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_578_endTris,"kha.graphics4.ColoredShaderPainter","endTris",0x1785fca8,"kha.graphics4.ColoredShaderPainter.endTris","kha/graphics4/Graphics2.hx",578,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_583_endRects,"kha.graphics4.ColoredShaderPainter","endRects",0x4e4d9b0f,"kha.graphics4.ColoredShaderPainter.endRects","kha/graphics4/Graphics2.hx",583,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_587_end,"kha.graphics4.ColoredShaderPainter","end",0x02dee3a0,"kha.graphics4.ColoredShaderPainter.end","kha/graphics4/Graphics2.hx",587,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_384_initShaders,"kha.graphics4.ColoredShaderPainter","initShaders",0x31bf9d43,"kha.graphics4.ColoredShaderPainter.initShaders","kha/graphics4/Graphics2.hx",384,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_342_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",342,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_343_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",343,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_345_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",345,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_351_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",351,0x0c1de808)
namespace kha{
namespace graphics4{

void ColoredShaderPainter_obj::__construct(::Dynamic g4){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_339_new)
HXLINE( 358)		this->_hx_set_myPipeline(HX_CTX, null());
HXLINE( 363)		this->_hx_set_g(HX_CTX, g4);
HXLINE( 364)		::kha::graphics4::ColoredShaderPainter_obj::bufferIndex = 0;
HXLINE( 365)		::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex = 0;
HXLINE( 366)		::kha::graphics4::ColoredShaderPainter_obj::initShaders();
HXLINE( 367)		this->_hx_set_myPipeline(HX_CTX, ::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline);
HXLINE( 368)		this->initBuffers();
            	}

Dynamic ColoredShaderPainter_obj::__CreateEmpty() { return new ColoredShaderPainter_obj; }

void *ColoredShaderPainter_obj::_hx_vtable = 0;

Dynamic ColoredShaderPainter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColoredShaderPainter_obj > _hx_result = new ColoredShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ColoredShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5f85e1d1;
}

::Dynamic ColoredShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_372_get_pipeline)
HXDLIN( 372)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,get_pipeline,return )

::Dynamic ColoredShaderPainter_obj::set_pipeline(::Dynamic pipe){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_375_set_pipeline)
HXLINE( 376)		::Dynamic _hx_tmp;
HXDLIN( 376)		if (::hx::IsNotNull( pipe )) {
HXLINE( 376)			_hx_tmp = pipe;
            		}
            		else {
HXLINE( 376)			_hx_tmp = ::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline;
            		}
HXDLIN( 376)		this->_hx_set_myPipeline(HX_CTX, _hx_tmp);
HXLINE( 377)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,set_pipeline,return )

void ColoredShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_381_setProjection)
HXDLIN( 381)		this->_hx_set_projectionMatrix(HX_CTX, projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,setProjection,(void))

void ColoredShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_395_initBuffers)
HXDLIN( 395)		if (::hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 396)			::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,4000,::kha::graphics4::ColoredShaderPainter_obj::structure,1,null(),null());
HXLINE( 397)			::kha::graphics4::ColoredShaderPainter_obj::rectVertices = ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 399)			::kha::graphics4::ColoredShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,6000,0,null());
HXLINE( 400)			 ::kha::arrays::ByteArrayPrivate indices = ::kha::graphics4::ColoredShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 401)			{
HXLINE( 401)				int _g = 0;
HXDLIN( 401)				while((_g < 1000)){
HXLINE( 401)					_g = (_g + 1);
HXDLIN( 401)					int i = (_g - 1);
HXLINE( 402)					{
HXLINE( 402)						int k = ((i * 3) * 2);
HXDLIN( 402)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k * 4)]) = (i * 4);
HXDLIN( 402)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k * 4)];
            					}
HXLINE( 403)					{
HXLINE( 403)						int k1 = (((i * 3) * 2) + 1);
HXDLIN( 403)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k1 * 4)]) = ((i * 4) + 1);
HXDLIN( 403)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k1 * 4)];
            					}
HXLINE( 404)					{
HXLINE( 404)						int k2 = (((i * 3) * 2) + 2);
HXDLIN( 404)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k2 * 4)]) = ((i * 4) + 2);
HXDLIN( 404)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k2 * 4)];
            					}
HXLINE( 405)					{
HXLINE( 405)						int k3 = (((i * 3) * 2) + 3);
HXDLIN( 405)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k3 * 4)]) = (i * 4);
HXDLIN( 405)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k3 * 4)];
            					}
HXLINE( 406)					{
HXLINE( 406)						int k4 = (((i * 3) * 2) + 4);
HXDLIN( 406)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k4 * 4)]) = ((i * 4) + 2);
HXDLIN( 406)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k4 * 4)];
            					}
HXLINE( 407)					{
HXLINE( 407)						int k5 = (((i * 3) * 2) + 5);
HXDLIN( 407)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k5 * 4)]) = ((i * 4) + 3);
HXDLIN( 407)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k5 * 4)];
            					}
            				}
            			}
HXLINE( 409)			::kha::graphics4::ColoredShaderPainter_obj::indexBuffer->unlock(null());
HXLINE( 411)			::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,3000,::kha::graphics4::ColoredShaderPainter_obj::structure,1,null(),null());
HXLINE( 412)			::kha::graphics4::ColoredShaderPainter_obj::triangleVertices = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->lock(null(),null());
HXLINE( 414)			::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,3000,0,null());
HXLINE( 415)			 ::kha::arrays::ByteArrayPrivate triIndices = ::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer->lock(null(),null());
HXLINE( 416)			{
HXLINE( 416)				int _g1 = 0;
HXDLIN( 416)				while((_g1 < 1000)){
HXLINE( 416)					_g1 = (_g1 + 1);
HXDLIN( 416)					int i1 = (_g1 - 1);
HXLINE( 417)					{
HXLINE( 417)						int k6 = (i1 * 3);
HXDLIN( 417)						*((uint32_t *)&triIndices->self.data[triIndices->byteArrayOffset + (k6 * 4)]) = (i1 * 3);
HXDLIN( 417)						*(uint32_t *)&triIndices->self.data[triIndices->byteArrayOffset + (k6 * 4)];
            					}
HXLINE( 418)					{
HXLINE( 418)						int k7 = ((i1 * 3) + 1);
HXDLIN( 418)						*((uint32_t *)&triIndices->self.data[triIndices->byteArrayOffset + (k7 * 4)]) = ((i1 * 3) + 1);
HXDLIN( 418)						*(uint32_t *)&triIndices->self.data[triIndices->byteArrayOffset + (k7 * 4)];
            					}
HXLINE( 419)					{
HXLINE( 419)						int k8 = ((i1 * 3) + 2);
HXDLIN( 419)						*((uint32_t *)&triIndices->self.data[triIndices->byteArrayOffset + (k8 * 4)]) = ((i1 * 3) + 2);
HXDLIN( 419)						*(uint32_t *)&triIndices->self.data[triIndices->byteArrayOffset + (k8 * 4)];
            					}
            				}
            			}
HXLINE( 421)			::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer->unlock(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initBuffers,(void))

void ColoredShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_426_setRectVertices)
HXLINE( 427)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 4) * 4);
HXLINE( 428)		{
HXLINE( 428)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 428)			*((float *)&this1->self.data[this1->byteArrayOffset + (baseIndex * 4)]) = bottomleftx;
            		}
HXLINE( 429)		{
HXLINE( 429)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 429)			*((float *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 1) * 4)]) = bottomlefty;
            		}
HXLINE( 430)		{
HXLINE( 430)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 430)			*((float *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 2) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 432)		{
HXLINE( 432)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 432)			*((float *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 4) * 4)]) = topleftx;
            		}
HXLINE( 433)		{
HXLINE( 433)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 433)			*((float *)&this5->self.data[this5->byteArrayOffset + ((baseIndex + 5) * 4)]) = toplefty;
            		}
HXLINE( 434)		{
HXLINE( 434)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 434)			*((float *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 6) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 436)		{
HXLINE( 436)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 436)			*((float *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 8) * 4)]) = toprightx;
            		}
HXLINE( 437)		{
HXLINE( 437)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 437)			*((float *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 9) * 4)]) = toprighty;
            		}
HXLINE( 438)		{
HXLINE( 438)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 438)			*((float *)&this9->self.data[this9->byteArrayOffset + ((baseIndex + 10) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 440)		{
HXLINE( 440)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 440)			*((float *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 12) * 4)]) = bottomrightx;
            		}
HXLINE( 441)		{
HXLINE( 441)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 441)			*((float *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 13) * 4)]) = bottomrighty;
            		}
HXLINE( 442)		{
HXLINE( 442)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 442)			*((float *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 14) * 4)]) = ((Float)-5.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,setRectVertices,(void))

void ColoredShaderPainter_obj::setRectColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_445_setRectColors)
HXLINE( 446)		int baseIndex = (((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 4) * 4) * 4);
HXLINE( 448)		float a = (opacity * (( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 449)		float r = (a * (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 450)		float g = (a * (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 451)		float b = (a * (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 453)		{
HXLINE( 453)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 453)			int value = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 453)			*((uint8_t *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 12)]) = value;
            		}
HXLINE( 454)		{
HXLINE( 454)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 454)			int value1 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 454)			*((uint8_t *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 12) + 1)]) = value1;
            		}
HXLINE( 455)		{
HXLINE( 455)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 455)			int value2 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 455)			*((uint8_t *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 12) + 2)]) = value2;
            		}
HXLINE( 456)		{
HXLINE( 456)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 456)			int value3 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 456)			*((uint8_t *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 12) + 3)]) = value3;
            		}
HXLINE( 458)		{
HXLINE( 458)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 458)			int value4 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 458)			*((uint8_t *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 28)]) = value4;
            		}
HXLINE( 459)		{
HXLINE( 459)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 459)			int value5 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 459)			*((uint8_t *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 28) + 1)]) = value5;
            		}
HXLINE( 460)		{
HXLINE( 460)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 460)			int value6 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 460)			*((uint8_t *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 28) + 2)]) = value6;
            		}
HXLINE( 461)		{
HXLINE( 461)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 461)			int value7 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 461)			*((uint8_t *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 28) + 3)]) = value7;
            		}
HXLINE( 463)		{
HXLINE( 463)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 463)			int value8 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 463)			*((uint8_t *)&this9->self.data[this9->byteArrayOffset + (baseIndex + 44)]) = value8;
            		}
HXLINE( 464)		{
HXLINE( 464)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 464)			int value9 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 464)			*((uint8_t *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 44) + 1)]) = value9;
            		}
HXLINE( 465)		{
HXLINE( 465)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 465)			int value10 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 465)			*((uint8_t *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 44) + 2)]) = value10;
            		}
HXLINE( 466)		{
HXLINE( 466)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 466)			int value11 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 466)			*((uint8_t *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 44) + 3)]) = value11;
            		}
HXLINE( 468)		{
HXLINE( 468)			 ::kha::arrays::ByteArrayPrivate this13 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 468)			int value12 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 468)			*((uint8_t *)&this13->self.data[this13->byteArrayOffset + (baseIndex + 60)]) = value12;
            		}
HXLINE( 469)		{
HXLINE( 469)			 ::kha::arrays::ByteArrayPrivate this14 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 469)			int value13 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 469)			*((uint8_t *)&this14->self.data[this14->byteArrayOffset + ((baseIndex + 60) + 1)]) = value13;
            		}
HXLINE( 470)		{
HXLINE( 470)			 ::kha::arrays::ByteArrayPrivate this15 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 470)			int value14 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 470)			*((uint8_t *)&this15->self.data[this15->byteArrayOffset + ((baseIndex + 60) + 2)]) = value14;
            		}
HXLINE( 471)		{
HXLINE( 471)			 ::kha::arrays::ByteArrayPrivate this16 = ::kha::graphics4::ColoredShaderPainter_obj::rectVertices;
HXDLIN( 471)			int value15 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 471)			*((uint8_t *)&this16->self.data[this16->byteArrayOffset + ((baseIndex + 60) + 3)]) = value15;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setRectColors,(void))

void ColoredShaderPainter_obj::setTriVertices(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_474_setTriVertices)
HXLINE( 475)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 4) * 3);
HXLINE( 477)		{
HXLINE( 477)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 477)			*((float *)&this1->self.data[this1->byteArrayOffset + (baseIndex * 4)]) = x1;
            		}
HXLINE( 478)		{
HXLINE( 478)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 478)			*((float *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 1) * 4)]) = y1;
            		}
HXLINE( 479)		{
HXLINE( 479)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 479)			*((float *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 2) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 481)		{
HXLINE( 481)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 481)			*((float *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 4) * 4)]) = x2;
            		}
HXLINE( 482)		{
HXLINE( 482)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 482)			*((float *)&this5->self.data[this5->byteArrayOffset + ((baseIndex + 5) * 4)]) = y2;
            		}
HXLINE( 483)		{
HXLINE( 483)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 483)			*((float *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 6) * 4)]) = ((Float)-5.0);
            		}
HXLINE( 485)		{
HXLINE( 485)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 485)			*((float *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 8) * 4)]) = x3;
            		}
HXLINE( 486)		{
HXLINE( 486)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 486)			*((float *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 9) * 4)]) = y3;
            		}
HXLINE( 487)		{
HXLINE( 487)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 487)			*((float *)&this9->self.data[this9->byteArrayOffset + ((baseIndex + 10) * 4)]) = ((Float)-5.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(ColoredShaderPainter_obj,setTriVertices,(void))

void ColoredShaderPainter_obj::setTriColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_490_setTriColors)
HXLINE( 491)		int baseIndex = (((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 4) * 4) * 3);
HXLINE( 493)		float a = (opacity * (( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 494)		float r = (a * (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 495)		float g = (a * (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 496)		float b = (a * (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 498)		{
HXLINE( 498)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 498)			int value = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 498)			*((uint8_t *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 12)]) = value;
            		}
HXLINE( 499)		{
HXLINE( 499)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 499)			int value1 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 499)			*((uint8_t *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 12) + 1)]) = value1;
            		}
HXLINE( 500)		{
HXLINE( 500)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 500)			int value2 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 500)			*((uint8_t *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 12) + 2)]) = value2;
            		}
HXLINE( 501)		{
HXLINE( 501)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 501)			int value3 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 501)			*((uint8_t *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 12) + 3)]) = value3;
            		}
HXLINE( 503)		{
HXLINE( 503)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 503)			int value4 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 503)			*((uint8_t *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 28)]) = value4;
            		}
HXLINE( 504)		{
HXLINE( 504)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 504)			int value5 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 504)			*((uint8_t *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 28) + 1)]) = value5;
            		}
HXLINE( 505)		{
HXLINE( 505)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 505)			int value6 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 505)			*((uint8_t *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 28) + 2)]) = value6;
            		}
HXLINE( 506)		{
HXLINE( 506)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 506)			int value7 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 506)			*((uint8_t *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 28) + 3)]) = value7;
            		}
HXLINE( 508)		{
HXLINE( 508)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 508)			int value8 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 508)			*((uint8_t *)&this9->self.data[this9->byteArrayOffset + (baseIndex + 44)]) = value8;
            		}
HXLINE( 509)		{
HXLINE( 509)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 509)			int value9 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 509)			*((uint8_t *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 44) + 1)]) = value9;
            		}
HXLINE( 510)		{
HXLINE( 510)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 510)			int value10 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 510)			*((uint8_t *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 44) + 2)]) = value10;
            		}
HXLINE( 511)		{
HXLINE( 511)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertices;
HXDLIN( 511)			int value11 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 511)			*((uint8_t *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 44) + 3)]) = value11;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setTriColors,(void))

void ColoredShaderPainter_obj::drawBuffer(bool trisDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_514_drawBuffer)
HXLINE( 515)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex == 0)) {
HXLINE( 516)			return;
            		}
HXLINE( 519)		if (!(trisDone)) {
HXLINE( 520)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 520)				this->drawTriBuffer(true);
            			}
            		}
HXLINE( 522)		::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->unlock((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 4));
HXLINE( 523)		 ::kha::graphics4::InternalPipeline pipeline = ::kha::graphics4::PipelineCache_obj::get(this->myPipeline,null(),3);
HXLINE( 524)		::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline->pipeline);
HXLINE( 525)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer);
HXLINE( 526)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::indexBuffer);
HXLINE( 527)		::kha::graphics4::Graphics_obj::setMatrix(this->g,pipeline->projectionLocation,this->projectionMatrix);
HXLINE( 529)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 2) * 3));
HXLINE( 531)		::kha::graphics4::ColoredShaderPainter_obj::bufferIndex = 0;
HXLINE( 532)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices = ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawBuffer,(void))

void ColoredShaderPainter_obj::drawTriBuffer(bool rectsDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_535_drawTriBuffer)
HXLINE( 536)		if (!(rectsDone)) {
HXLINE( 537)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 537)				this->drawBuffer(true);
            			}
            		}
HXLINE( 539)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->unlock((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 3));
HXLINE( 540)		 ::kha::graphics4::InternalPipeline pipeline = ::kha::graphics4::PipelineCache_obj::get(this->myPipeline,null(),3);
HXLINE( 541)		::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline->pipeline);
HXLINE( 542)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer);
HXLINE( 543)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer);
HXLINE( 544)		::kha::graphics4::Graphics_obj::setMatrix(this->g,pipeline->projectionLocation,this->projectionMatrix);
HXLINE( 546)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,(::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 3));
HXLINE( 548)		::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex = 0;
HXLINE( 549)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawTriBuffer,(void))

void ColoredShaderPainter_obj::fillRect(float opacity,int color,Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_553_fillRect)
HXLINE( 554)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 555)			this->drawTriBuffer(true);
            		}
HXLINE( 557)		if (((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex + 1) >= 1000)) {
HXLINE( 558)			this->drawBuffer(false);
            		}
HXLINE( 560)		this->setRectColors(opacity,color);
HXLINE( 561)		this->setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
HXLINE( 562)		++::kha::graphics4::ColoredShaderPainter_obj::bufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC10(ColoredShaderPainter_obj,fillRect,(void))

void ColoredShaderPainter_obj::fillTriangle(float opacity,int color,Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_565_fillTriangle)
HXLINE( 566)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 567)			this->drawBuffer(true);
            		}
HXLINE( 569)		if (((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex + 1) >= 1000)) {
HXLINE( 570)			this->drawTriBuffer(false);
            		}
HXLINE( 572)		this->setTriColors(opacity,color);
HXLINE( 573)		this->setTriVertices(x1,y1,x2,y2,x3,y3);
HXLINE( 574)		++::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,fillTriangle,(void))

void ColoredShaderPainter_obj::endTris(bool rectsDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_578_endTris)
HXDLIN( 578)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 579)			this->drawTriBuffer(rectsDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endTris,(void))

void ColoredShaderPainter_obj::endRects(bool trisDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_583_endRects)
HXDLIN( 583)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 584)			this->drawBuffer(trisDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endRects,(void))

void ColoredShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_587_end)
HXLINE( 588)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 588)			this->drawTriBuffer(false);
            		}
HXLINE( 589)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 589)			this->drawBuffer(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,end,(void))

::Dynamic ColoredShaderPainter_obj::standardColorPipeline;

 ::kha::graphics4::VertexStructure ColoredShaderPainter_obj::structure;

int ColoredShaderPainter_obj::bufferSize;

int ColoredShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer ColoredShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::ByteArrayPrivate ColoredShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer ColoredShaderPainter_obj::indexBuffer;

int ColoredShaderPainter_obj::triangleBufferSize;

int ColoredShaderPainter_obj::triangleBufferIndex;

 ::kha::graphics4::VertexBuffer ColoredShaderPainter_obj::triangleVertexBuffer;

 ::kha::arrays::ByteArrayPrivate ColoredShaderPainter_obj::triangleVertices;

 ::kha::graphics4::IndexBuffer ColoredShaderPainter_obj::triangleIndexBuffer;

void ColoredShaderPainter_obj::initShaders(){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_384_initShaders)
HXLINE( 385)		if (::hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::structure )) {
HXLINE( 386)			::kha::graphics4::ColoredShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createColoredVertexStructure();
            		}
HXLINE( 388)		if (::hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline )) {
HXLINE( 389)			 ::kha::graphics4::PipelineState pipeline = ::kha::graphics4::Graphics2_obj::createColoredPipeline(::kha::graphics4::ColoredShaderPainter_obj::structure);
HXLINE( 390)			::kha::graphics4::ColoredShaderPainter_obj::standardColorPipeline =  ::kha::graphics4::PerFramebufferPipelineCache_obj::__alloc( HX_CTX ,pipeline,false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initShaders,(void))


::hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__new(::Dynamic g4) {
	::hx::ObjectPtr< ColoredShaderPainter_obj > __this = new ColoredShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

::hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic g4) {
	ColoredShaderPainter_obj *__this = (ColoredShaderPainter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColoredShaderPainter_obj), true, "kha.graphics4.ColoredShaderPainter"));
	*(void **)__this = ColoredShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

ColoredShaderPainter_obj::ColoredShaderPainter_obj()
{
}

void ColoredShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColoredShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_END_CLASS();
}

void ColoredShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
}

::hx::Val ColoredShaderPainter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endTris") ) { return ::hx::Val( endTris_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pipeline() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return ::hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"endRects") ) { return ::hx::Val( endRects_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return ::hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return ::hx::Val( drawBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return ::hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return ::hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return ::hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTriColors") ) { return ::hx::Val( setTriColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return ::hx::Val( fillTriangle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return ::hx::Val( setProjection_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return ::hx::Val( setRectColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriBuffer") ) { return ::hx::Val( drawTriBuffer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setTriVertices") ) { return ::hx::Val( setTriVertices_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return ::hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return ::hx::Val( projectionMatrix ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColoredShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { outValue = ( triangleVertices ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { outValue = ( triangleBufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { outValue = ( triangleIndexBuffer ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { outValue = ( triangleVertexBuffer ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardColorPipeline") ) { outValue = ( standardColorPipeline ); return true; }
	}
	return false;
}

::hx::Val ColoredShaderPainter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pipeline(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { _hx_set_myPipeline(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { _hx_set_projectionMatrix(HX_CTX_GET,inValue.Cast<  ::kha::math::FastMatrix4 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColoredShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::ByteArrayPrivate >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { triangleVertices=ioValue.Cast<  ::kha::arrays::ByteArrayPrivate >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { triangleBufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { triangleIndexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { triangleVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardColorPipeline") ) { standardColorPipeline=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

void ColoredShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColoredShaderPainter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(ColoredShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(ColoredShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(ColoredShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ColoredShaderPainter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(void *) &ColoredShaderPainter_obj::standardColorPipeline,HX_("standardColorPipeline",28,1a,f5,20)},
	{::hx::fsObject /*  ::kha::graphics4::VertexStructure */ ,(void *) &ColoredShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{::hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{::hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{::hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ColoredShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{::hx::fsObject /*  ::kha::arrays::ByteArrayPrivate */ ,(void *) &ColoredShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{::hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ColoredShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{::hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferSize,HX_("triangleBufferSize",c9,16,78,ab)},
	{::hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferIndex,HX_("triangleBufferIndex",0a,6c,d7,9e)},
	{::hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ColoredShaderPainter_obj::triangleVertexBuffer,HX_("triangleVertexBuffer",6c,c6,88,35)},
	{::hx::fsObject /*  ::kha::arrays::ByteArrayPrivate */ ,(void *) &ColoredShaderPainter_obj::triangleVertices,HX_("triangleVertices",e1,42,15,97)},
	{::hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ColoredShaderPainter_obj::triangleIndexBuffer,HX_("triangleIndexBuffer",ca,a3,1d,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ColoredShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectColors",36,38,37,6d),
	HX_("setTriVertices",c2,c3,7b,76),
	HX_("setTriColors",39,15,93,3b),
	HX_("drawBuffer",24,38,58,12),
	HX_("drawTriBuffer",e7,5f,78,80),
	HX_("fillRect",47,45,b9,6c),
	HX_("fillTriangle",6b,04,3a,92),
	HX_("endTris",63,56,28,2f),
	HX_("endRects",f4,c4,b9,e4),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void ColoredShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::standardColorPipeline,"standardColorPipeline");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferIndex,"triangleBufferIndex");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertexBuffer,"triangleVertexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertices,"triangleVertices");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleIndexBuffer,"triangleIndexBuffer");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColoredShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::standardColorPipeline,"standardColorPipeline");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferIndex,"triangleBufferIndex");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertexBuffer,"triangleVertexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertices,"triangleVertices");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleIndexBuffer,"triangleIndexBuffer");
};

#endif

::hx::Class ColoredShaderPainter_obj::__mClass;

static ::String ColoredShaderPainter_obj_sStaticFields[] = {
	HX_("standardColorPipeline",28,1a,f5,20),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("triangleBufferSize",c9,16,78,ab),
	HX_("triangleBufferIndex",0a,6c,d7,9e),
	HX_("triangleVertexBuffer",6c,c6,88,35),
	HX_("triangleVertices",e1,42,15,97),
	HX_("triangleIndexBuffer",ca,a3,1d,39),
	HX_("initShaders",7e,f0,f0,17),
	::String(null())
};

void ColoredShaderPainter_obj::__register()
{
	ColoredShaderPainter_obj _hx_dummy;
	ColoredShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.ColoredShaderPainter",b3,b9,9f,76);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColoredShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ColoredShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ColoredShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColoredShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColoredShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColoredShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColoredShaderPainter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColoredShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_342_boot)
HXDLIN( 342)		standardColorPipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_343_boot)
HXDLIN( 343)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_345_boot)
HXDLIN( 345)		bufferSize = 1000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_351_boot)
HXDLIN( 351)		triangleBufferSize = 1000;
            	}
}

} // end namespace kha
} // end namespace graphics4
