// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_3fe8139d5204232b
#define INCLUDED_3fe8139d5204232b
#include "cpp_bytearray.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_ByteArrayPrivate
#include <hxinc/kha/arrays/ByteArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <hxinc/kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_InternalPipeline
#include <hxinc/kha/graphics4/InternalPipeline.h>
#endif
#ifndef INCLUDED_kha_graphics4_PerFramebufferPipelineCache
#include <hxinc/kha/graphics4/PerFramebufferPipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineCache
#include <hxinc/kha/graphics4/PipelineCache.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a1398f166f3e074_115_new,"kha.graphics4.ImageShaderPainter","new",0xa318bb6c,"kha.graphics4.ImageShaderPainter.new","kha/graphics4/Graphics2.hx",115,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_146_get_pipeline,"kha.graphics4.ImageShaderPainter","get_pipeline",0x44e0c29f,"kha.graphics4.ImageShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",146,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_149_set_pipeline,"kha.graphics4.ImageShaderPainter","set_pipeline",0x59d9e613,"kha.graphics4.ImageShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",149,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_155_setProjection,"kha.graphics4.ImageShaderPainter","setProjection",0xdca978dd,"kha.graphics4.ImageShaderPainter.setProjection","kha/graphics4/Graphics2.hx",155,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_169_initBuffers,"kha.graphics4.ImageShaderPainter","initBuffers",0xef73e94f,"kha.graphics4.ImageShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",169,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_188_setRectVertices,"kha.graphics4.ImageShaderPainter","setRectVertices",0x24abad0b,"kha.graphics4.ImageShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",188,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_207_setRectTexCoords,"kha.graphics4.ImageShaderPainter","setRectTexCoords",0x2a0ce013,"kha.graphics4.ImageShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",207,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_222_setRectColor,"kha.graphics4.ImageShaderPainter","setRectColor",0x3cb78511,"kha.graphics4.ImageShaderPainter.setRectColor","kha/graphics4/Graphics2.hx",222,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_245_drawBuffer,"kha.graphics4.ImageShaderPainter","drawBuffer",0x0d340698,"kha.graphics4.ImageShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",245,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_276_setBilinearFilter,"kha.graphics4.ImageShaderPainter","setBilinearFilter",0x7d147312,"kha.graphics4.ImageShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",276,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_282_setBilinearMipmapFilter,"kha.graphics4.ImageShaderPainter","setBilinearMipmapFilter",0x1f8fea3a,"kha.graphics4.ImageShaderPainter.setBilinearMipmapFilter","kha/graphics4/Graphics2.hx",282,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_289_drawImage,"kha.graphics4.ImageShaderPainter","drawImage",0xba3d10c3,"kha.graphics4.ImageShaderPainter.drawImage","kha/graphics4/Graphics2.hx",289,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_304_drawImage2,"kha.graphics4.ImageShaderPainter","drawImage2",0x3b319a0f,"kha.graphics4.ImageShaderPainter.drawImage2","kha/graphics4/Graphics2.hx",304,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_318_drawImageScale,"kha.graphics4.ImageShaderPainter","drawImageScale",0xc1fc8ac7,"kha.graphics4.ImageShaderPainter.drawImageScale","kha/graphics4/Graphics2.hx",318,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_331_end,"kha.graphics4.ImageShaderPainter","end",0xa311eee7,"kha.graphics4.ImageShaderPainter.end","kha/graphics4/Graphics2.hx",331,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_158_initShaders,"kha.graphics4.ImageShaderPainter","initShaders",0x9d69c78a,"kha.graphics4.ImageShaderPainter.initShaders","kha/graphics4/Graphics2.hx",158,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_118_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",118,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_119_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",119,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_120_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",120,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1398f166f3e074_121_boot,"kha.graphics4.ImageShaderPainter","boot",0x0aa443a6,"kha.graphics4.ImageShaderPainter.boot","kha/graphics4/Graphics2.hx",121,0x0c1de808)
namespace kha{
namespace graphics4{

void ImageShaderPainter_obj::__construct(::Dynamic g4){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_115_new)
HXLINE( 132)		this->_hx_set_myPipeline(HX_CTX, null());
HXLINE( 130)		this->bilinearMipmaps = false;
HXLINE( 129)		this->bilinear = false;
HXLINE( 137)		this->_hx_set_g(HX_CTX, g4);
HXLINE( 138)		::kha::graphics4::ImageShaderPainter_obj::bufferStart = 0;
HXLINE( 139)		::kha::graphics4::ImageShaderPainter_obj::bufferIndex = 0;
HXLINE( 140)		::kha::graphics4::ImageShaderPainter_obj::initShaders();
HXLINE( 141)		this->_hx_set_myPipeline(HX_CTX, ::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline);
HXLINE( 142)		this->initBuffers();
            	}

Dynamic ImageShaderPainter_obj::__CreateEmpty() { return new ImageShaderPainter_obj; }

void *ImageShaderPainter_obj::_hx_vtable = 0;

Dynamic ImageShaderPainter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageShaderPainter_obj > _hx_result = new ImageShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ImageShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x039b07b4;
}

::Dynamic ImageShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_146_get_pipeline)
HXDLIN( 146)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,get_pipeline,return )

::Dynamic ImageShaderPainter_obj::set_pipeline(::Dynamic pipe){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_149_set_pipeline)
HXLINE( 150)		::Dynamic _hx_tmp;
HXDLIN( 150)		if (::hx::IsNotNull( pipe )) {
HXLINE( 150)			_hx_tmp = pipe;
            		}
            		else {
HXLINE( 150)			_hx_tmp = ::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline;
            		}
HXDLIN( 150)		this->_hx_set_myPipeline(HX_CTX, _hx_tmp);
HXLINE( 151)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,set_pipeline,return )

void ImageShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_155_setProjection)
HXDLIN( 155)		this->_hx_set_projectionMatrix(HX_CTX, projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setProjection,(void))

void ImageShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_169_initBuffers)
HXDLIN( 169)		if (::hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 170)			::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,6000,::kha::graphics4::ImageShaderPainter_obj::structure,1,null(),null());
HXLINE( 171)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 173)			::kha::graphics4::ImageShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,9000,0,null());
HXLINE( 174)			 ::kha::arrays::ByteArrayPrivate indices = ::kha::graphics4::ImageShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 175)			{
HXLINE( 175)				int _g = 0;
HXDLIN( 175)				while((_g < 1500)){
HXLINE( 175)					_g = (_g + 1);
HXDLIN( 175)					int i = (_g - 1);
HXLINE( 176)					{
HXLINE( 176)						int k = ((i * 3) * 2);
HXDLIN( 176)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k * 4)]) = (i * 4);
HXDLIN( 176)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k * 4)];
            					}
HXLINE( 177)					{
HXLINE( 177)						int k1 = (((i * 3) * 2) + 1);
HXDLIN( 177)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k1 * 4)]) = ((i * 4) + 1);
HXDLIN( 177)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k1 * 4)];
            					}
HXLINE( 178)					{
HXLINE( 178)						int k2 = (((i * 3) * 2) + 2);
HXDLIN( 178)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k2 * 4)]) = ((i * 4) + 2);
HXDLIN( 178)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k2 * 4)];
            					}
HXLINE( 179)					{
HXLINE( 179)						int k3 = (((i * 3) * 2) + 3);
HXDLIN( 179)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k3 * 4)]) = (i * 4);
HXDLIN( 179)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k3 * 4)];
            					}
HXLINE( 180)					{
HXLINE( 180)						int k4 = (((i * 3) * 2) + 4);
HXDLIN( 180)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k4 * 4)]) = ((i * 4) + 2);
HXDLIN( 180)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k4 * 4)];
            					}
HXLINE( 181)					{
HXLINE( 181)						int k5 = (((i * 3) * 2) + 5);
HXDLIN( 181)						*((uint32_t *)&indices->self.data[indices->byteArrayOffset + (k5 * 4)]) = ((i * 4) + 3);
HXDLIN( 181)						*(uint32_t *)&indices->self.data[indices->byteArrayOffset + (k5 * 4)];
            					}
            				}
            			}
HXLINE( 183)			::kha::graphics4::ImageShaderPainter_obj::indexBuffer->unlock(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initBuffers,(void))

void ImageShaderPainter_obj::setRectVertices(float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_188_setRectVertices)
HXLINE( 189)		int baseIndex = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXLINE( 190)		{
HXLINE( 190)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 190)			*((float *)&this1->self.data[this1->byteArrayOffset + baseIndex]) = bottomleftx;
            		}
HXLINE( 191)		{
HXLINE( 191)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 191)			*((float *)&this2->self.data[this2->byteArrayOffset + (baseIndex + 4)]) = bottomlefty;
            		}
HXLINE( 192)		{
HXLINE( 192)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 192)			*((float *)&this3->self.data[this3->byteArrayOffset + (baseIndex + 8)]) = ((Float)-5.0);
            		}
HXLINE( 194)		{
HXLINE( 194)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 194)			*((float *)&this4->self.data[this4->byteArrayOffset + (baseIndex + 24)]) = topleftx;
            		}
HXLINE( 195)		{
HXLINE( 195)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 195)			*((float *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 28)]) = toplefty;
            		}
HXLINE( 196)		{
HXLINE( 196)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 196)			*((float *)&this6->self.data[this6->byteArrayOffset + (baseIndex + 32)]) = ((Float)-5.0);
            		}
HXLINE( 198)		{
HXLINE( 198)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 198)			*((float *)&this7->self.data[this7->byteArrayOffset + (baseIndex + 48)]) = toprightx;
            		}
HXLINE( 199)		{
HXLINE( 199)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 199)			*((float *)&this8->self.data[this8->byteArrayOffset + (baseIndex + 52)]) = toprighty;
            		}
HXLINE( 200)		{
HXLINE( 200)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 200)			*((float *)&this9->self.data[this9->byteArrayOffset + (baseIndex + 56)]) = ((Float)-5.0);
            		}
HXLINE( 202)		{
HXLINE( 202)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 202)			*((float *)&this10->self.data[this10->byteArrayOffset + (baseIndex + 72)]) = bottomrightx;
            		}
HXLINE( 203)		{
HXLINE( 203)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 203)			*((float *)&this11->self.data[this11->byteArrayOffset + (baseIndex + 76)]) = bottomrighty;
            		}
HXLINE( 204)		{
HXLINE( 204)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 204)			*((float *)&this12->self.data[this12->byteArrayOffset + (baseIndex + 80)]) = ((Float)-5.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(ImageShaderPainter_obj,setRectVertices,(void))

void ImageShaderPainter_obj::setRectTexCoords(float left,float top,float right,float bottom){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_207_setRectTexCoords)
HXLINE( 208)		int baseIndex = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXLINE( 209)		{
HXLINE( 209)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 209)			*((float *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 12)]) = left;
            		}
HXLINE( 210)		{
HXLINE( 210)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 210)			*((float *)&this2->self.data[this2->byteArrayOffset + (baseIndex + 16)]) = bottom;
            		}
HXLINE( 212)		{
HXLINE( 212)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 212)			*((float *)&this3->self.data[this3->byteArrayOffset + (baseIndex + 36)]) = left;
            		}
HXLINE( 213)		{
HXLINE( 213)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 213)			*((float *)&this4->self.data[this4->byteArrayOffset + (baseIndex + 40)]) = top;
            		}
HXLINE( 215)		{
HXLINE( 215)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 215)			*((float *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 60)]) = right;
            		}
HXLINE( 216)		{
HXLINE( 216)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 216)			*((float *)&this6->self.data[this6->byteArrayOffset + (baseIndex + 64)]) = top;
            		}
HXLINE( 218)		{
HXLINE( 218)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 218)			*((float *)&this7->self.data[this7->byteArrayOffset + (baseIndex + 84)]) = right;
            		}
HXLINE( 219)		{
HXLINE( 219)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 219)			*((float *)&this8->self.data[this8->byteArrayOffset + (baseIndex + 88)]) = bottom;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectTexCoords,(void))

void ImageShaderPainter_obj::setRectColor(float r,float g,float b,float a){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_222_setRectColor)
HXLINE( 223)		int baseIndex = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXLINE( 224)		{
HXLINE( 224)			 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 224)			int value = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 224)			*((uint8_t *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 20)]) = value;
            		}
HXLINE( 225)		{
HXLINE( 225)			 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 225)			int value1 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 225)			*((uint8_t *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 20) + 1)]) = value1;
            		}
HXLINE( 226)		{
HXLINE( 226)			 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 226)			int value2 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 226)			*((uint8_t *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 20) + 2)]) = value2;
            		}
HXLINE( 227)		{
HXLINE( 227)			 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 227)			int value3 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 227)			*((uint8_t *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 20) + 3)]) = value3;
            		}
HXLINE( 229)		{
HXLINE( 229)			 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 229)			int value4 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 229)			*((uint8_t *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 44)]) = value4;
            		}
HXLINE( 230)		{
HXLINE( 230)			 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 230)			int value5 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 230)			*((uint8_t *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 44) + 1)]) = value5;
            		}
HXLINE( 231)		{
HXLINE( 231)			 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 231)			int value6 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 231)			*((uint8_t *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 44) + 2)]) = value6;
            		}
HXLINE( 232)		{
HXLINE( 232)			 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 232)			int value7 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 232)			*((uint8_t *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 44) + 3)]) = value7;
            		}
HXLINE( 234)		{
HXLINE( 234)			 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 234)			int value8 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 234)			*((uint8_t *)&this9->self.data[this9->byteArrayOffset + (baseIndex + 68)]) = value8;
            		}
HXLINE( 235)		{
HXLINE( 235)			 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 235)			int value9 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 235)			*((uint8_t *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 68) + 1)]) = value9;
            		}
HXLINE( 236)		{
HXLINE( 236)			 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 236)			int value10 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 236)			*((uint8_t *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 68) + 2)]) = value10;
            		}
HXLINE( 237)		{
HXLINE( 237)			 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 237)			int value11 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 237)			*((uint8_t *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 68) + 3)]) = value11;
            		}
HXLINE( 239)		{
HXLINE( 239)			 ::kha::arrays::ByteArrayPrivate this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 239)			int value12 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 239)			*((uint8_t *)&this13->self.data[this13->byteArrayOffset + (baseIndex + 92)]) = value12;
            		}
HXLINE( 240)		{
HXLINE( 240)			 ::kha::arrays::ByteArrayPrivate this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 240)			int value13 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 240)			*((uint8_t *)&this14->self.data[this14->byteArrayOffset + ((baseIndex + 92) + 1)]) = value13;
            		}
HXLINE( 241)		{
HXLINE( 241)			 ::kha::arrays::ByteArrayPrivate this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 241)			int value14 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 241)			*((uint8_t *)&this15->self.data[this15->byteArrayOffset + ((baseIndex + 92) + 2)]) = value14;
            		}
HXLINE( 242)		{
HXLINE( 242)			 ::kha::arrays::ByteArrayPrivate this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 242)			int value15 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 242)			*((uint8_t *)&this16->self.data[this16->byteArrayOffset + ((baseIndex + 92) + 3)]) = value15;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageShaderPainter_obj,setRectColor,(void))

void ImageShaderPainter_obj::drawBuffer(bool end){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_245_drawBuffer)
HXLINE( 246)		if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) == 0)) {
HXLINE( 247)			return;
            		}
HXLINE( 250)		::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->unlock(((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 4));
HXLINE( 251)		 ::kha::graphics4::InternalPipeline pipeline = ::kha::graphics4::PipelineCache_obj::get(this->myPipeline,null(),3);
HXLINE( 252)		::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline->pipeline);
HXLINE( 253)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer);
HXLINE( 254)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ImageShaderPainter_obj::indexBuffer);
HXLINE( 255)		::kha::graphics4::Graphics_obj::setTexture(this->g,pipeline->textureLocation,::kha::graphics4::ImageShaderPainter_obj::lastTexture);
HXLINE( 257)		int _hx_tmp;
HXDLIN( 257)		if (this->bilinear) {
HXLINE( 257)			_hx_tmp = 1;
            		}
            		else {
HXLINE( 257)			_hx_tmp = 0;
            		}
HXDLIN( 257)		int _hx_tmp1;
HXDLIN( 257)		if (this->bilinear) {
HXLINE( 257)			_hx_tmp1 = 1;
            		}
            		else {
HXLINE( 257)			_hx_tmp1 = 0;
            		}
HXLINE( 258)		int _hx_tmp2;
HXDLIN( 258)		if (this->bilinearMipmaps) {
HXLINE( 258)			_hx_tmp2 = 2;
            		}
            		else {
HXLINE( 258)			_hx_tmp2 = 0;
            		}
HXLINE( 256)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,pipeline->textureLocation,2,2,_hx_tmp,_hx_tmp1,_hx_tmp2);
HXLINE( 259)		::kha::graphics4::Graphics_obj::setMatrix(this->g,pipeline->projectionLocation,this->projectionMatrix);
HXLINE( 261)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,((::kha::graphics4::ImageShaderPainter_obj::bufferStart * 2) * 3),(((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 2) * 3));
HXLINE( 263)		::kha::graphics4::Graphics_obj::setTexture(this->g,pipeline->textureLocation,null());
HXLINE( 265)		bool _hx_tmp3;
HXDLIN( 265)		if (!(end)) {
HXLINE( 265)			_hx_tmp3 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) * 4) >= 1500);
            		}
            		else {
HXLINE( 265)			_hx_tmp3 = true;
            		}
HXDLIN( 265)		if (_hx_tmp3) {
HXLINE( 266)			::kha::graphics4::ImageShaderPainter_obj::bufferStart = 0;
HXLINE( 267)			::kha::graphics4::ImageShaderPainter_obj::bufferIndex = 0;
HXLINE( 268)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock(0,null());
            		}
            		else {
HXLINE( 271)			::kha::graphics4::ImageShaderPainter_obj::bufferStart = ::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 272)			::kha::graphics4::ImageShaderPainter_obj::rectVertices = ::kha::graphics4::ImageShaderPainter_obj::rectVertexBuffer->lock((::kha::graphics4::ImageShaderPainter_obj::bufferStart * 4),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,drawBuffer,(void))

void ImageShaderPainter_obj::setBilinearFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_276_setBilinearFilter)
HXLINE( 277)		this->drawBuffer(false);
HXLINE( 278)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
HXLINE( 279)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearFilter,(void))

void ImageShaderPainter_obj::setBilinearMipmapFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_282_setBilinearMipmapFilter)
HXLINE( 283)		this->drawBuffer(false);
HXLINE( 284)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
HXLINE( 285)		this->bilinearMipmaps = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageShaderPainter_obj,setBilinearMipmapFilter,(void))

void ImageShaderPainter_obj::drawImage( ::kha::Image img,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_289_drawImage)
HXLINE( 290)		 ::kha::Image tex = img;
HXLINE( 291)		bool _hx_tmp;
HXDLIN( 291)		if ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) < 1500)) {
HXLINE( 291)			if (::hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 291)				_hx_tmp = ::hx::IsInstanceNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 291)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 291)			_hx_tmp = true;
            		}
HXDLIN( 291)		if (_hx_tmp) {
HXLINE( 292)			this->drawBuffer(false);
            		}
HXLINE( 294)		{
HXLINE( 294)			float r = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 294)			float g = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 294)			float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 294)			float a = ((( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 294)			int baseIndex = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 20)]) = value;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value1 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this2->self.data[this2->byteArrayOffset + ((baseIndex + 20) + 1)]) = value1;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value2 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this3->self.data[this3->byteArrayOffset + ((baseIndex + 20) + 2)]) = value2;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value3 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this4->self.data[this4->byteArrayOffset + ((baseIndex + 20) + 3)]) = value3;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value4 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 44)]) = value4;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value5 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this6->self.data[this6->byteArrayOffset + ((baseIndex + 44) + 1)]) = value5;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value6 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this7->self.data[this7->byteArrayOffset + ((baseIndex + 44) + 2)]) = value6;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value7 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this8->self.data[this8->byteArrayOffset + ((baseIndex + 44) + 3)]) = value7;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value8 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this9->self.data[this9->byteArrayOffset + (baseIndex + 68)]) = value8;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value9 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this10->self.data[this10->byteArrayOffset + ((baseIndex + 68) + 1)]) = value9;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value10 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this11->self.data[this11->byteArrayOffset + ((baseIndex + 68) + 2)]) = value10;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value11 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this12->self.data[this12->byteArrayOffset + ((baseIndex + 68) + 3)]) = value11;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value12 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this13->self.data[this13->byteArrayOffset + (baseIndex + 92)]) = value12;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value13 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this14->self.data[this14->byteArrayOffset + ((baseIndex + 92) + 1)]) = value13;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value14 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this15->self.data[this15->byteArrayOffset + ((baseIndex + 92) + 2)]) = value14;
            			}
HXDLIN( 294)			{
HXLINE( 294)				 ::kha::arrays::ByteArrayPrivate this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 294)				int value15 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 294)				*((uint8_t *)&this16->self.data[this16->byteArrayOffset + ((baseIndex + 92) + 3)]) = value15;
            			}
            		}
HXLINE( 295)		{
HXLINE( 295)			int right = tex->get_width();
HXDLIN( 295)			float right1 = ( (float)((( (Float)(right) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 295)			int bottom = tex->get_height();
HXDLIN( 295)			float bottom1 = ( (float)((( (Float)(bottom) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 295)			int baseIndex1 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this17->self.data[this17->byteArrayOffset + (baseIndex1 + 12)]) = 0;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this18->self.data[this18->byteArrayOffset + (baseIndex1 + 16)]) = bottom1;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this19->self.data[this19->byteArrayOffset + (baseIndex1 + 36)]) = 0;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this20->self.data[this20->byteArrayOffset + (baseIndex1 + 40)]) = 0;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this21->self.data[this21->byteArrayOffset + (baseIndex1 + 60)]) = right1;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this22->self.data[this22->byteArrayOffset + (baseIndex1 + 64)]) = 0;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this23->self.data[this23->byteArrayOffset + (baseIndex1 + 84)]) = right1;
            			}
HXDLIN( 295)			{
HXLINE( 295)				 ::kha::arrays::ByteArrayPrivate this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 295)				*((float *)&this24->self.data[this24->byteArrayOffset + (baseIndex1 + 88)]) = bottom1;
            			}
            		}
HXLINE( 296)		{
HXLINE( 296)			int baseIndex2 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this25->self.data[this25->byteArrayOffset + baseIndex2]) = bottomleftx;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this26->self.data[this26->byteArrayOffset + (baseIndex2 + 4)]) = bottomlefty;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this27->self.data[this27->byteArrayOffset + (baseIndex2 + 8)]) = ((Float)-5.0);
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this28->self.data[this28->byteArrayOffset + (baseIndex2 + 24)]) = topleftx;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this29->self.data[this29->byteArrayOffset + (baseIndex2 + 28)]) = toplefty;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this30->self.data[this30->byteArrayOffset + (baseIndex2 + 32)]) = ((Float)-5.0);
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this31->self.data[this31->byteArrayOffset + (baseIndex2 + 48)]) = toprightx;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this32->self.data[this32->byteArrayOffset + (baseIndex2 + 52)]) = toprighty;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this33->self.data[this33->byteArrayOffset + (baseIndex2 + 56)]) = ((Float)-5.0);
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this34->self.data[this34->byteArrayOffset + (baseIndex2 + 72)]) = bottomrightx;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this35->self.data[this35->byteArrayOffset + (baseIndex2 + 76)]) = bottomrighty;
            			}
HXDLIN( 296)			{
HXLINE( 296)				 ::kha::arrays::ByteArrayPrivate this36 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 296)				*((float *)&this36->self.data[this36->byteArrayOffset + (baseIndex2 + 80)]) = ((Float)-5.0);
            			}
            		}
HXLINE( 298)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 299)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImage,(void))

void ImageShaderPainter_obj::drawImage2( ::kha::Image img,float sx,float sy,float sw,float sh,float bottomleftx,float bottomlefty,float topleftx,float toplefty,float toprightx,float toprighty,float bottomrightx,float bottomrighty,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_304_drawImage2)
HXLINE( 305)		 ::kha::Image tex = img;
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		if ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) < 1500)) {
HXLINE( 306)			if (::hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 306)				_hx_tmp = ::hx::IsInstanceNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 306)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 306)			_hx_tmp = true;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 307)			this->drawBuffer(false);
            		}
HXLINE( 309)		{
HXLINE( 309)			float left = ( (float)((( (Float)(sx) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 309)			float top = ( (float)((( (Float)(sy) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 309)			float right = ( (float)((( (Float)((sx + sw)) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 309)			float bottom = ( (float)((( (Float)((sy + sh)) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 309)			int baseIndex = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 12)]) = left;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this2->self.data[this2->byteArrayOffset + (baseIndex + 16)]) = bottom;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this3->self.data[this3->byteArrayOffset + (baseIndex + 36)]) = left;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this4->self.data[this4->byteArrayOffset + (baseIndex + 40)]) = top;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 60)]) = right;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this6->self.data[this6->byteArrayOffset + (baseIndex + 64)]) = top;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this7->self.data[this7->byteArrayOffset + (baseIndex + 84)]) = right;
            			}
HXDLIN( 309)			{
HXLINE( 309)				 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 309)				*((float *)&this8->self.data[this8->byteArrayOffset + (baseIndex + 88)]) = bottom;
            			}
            		}
HXLINE( 310)		{
HXLINE( 310)			float r = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 310)			float g = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 310)			float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 310)			float a = ((( (float)(::hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 310)			int baseIndex1 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this9->self.data[this9->byteArrayOffset + (baseIndex1 + 20)]) = value;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value1 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this10->self.data[this10->byteArrayOffset + ((baseIndex1 + 20) + 1)]) = value1;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value2 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this11->self.data[this11->byteArrayOffset + ((baseIndex1 + 20) + 2)]) = value2;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value3 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this12->self.data[this12->byteArrayOffset + ((baseIndex1 + 20) + 3)]) = value3;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value4 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this13->self.data[this13->byteArrayOffset + (baseIndex1 + 44)]) = value4;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value5 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this14->self.data[this14->byteArrayOffset + ((baseIndex1 + 44) + 1)]) = value5;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value6 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this15->self.data[this15->byteArrayOffset + ((baseIndex1 + 44) + 2)]) = value6;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value7 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this16->self.data[this16->byteArrayOffset + ((baseIndex1 + 44) + 3)]) = value7;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value8 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this17->self.data[this17->byteArrayOffset + (baseIndex1 + 68)]) = value8;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value9 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this18->self.data[this18->byteArrayOffset + ((baseIndex1 + 68) + 1)]) = value9;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value10 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this19->self.data[this19->byteArrayOffset + ((baseIndex1 + 68) + 2)]) = value10;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value11 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this20->self.data[this20->byteArrayOffset + ((baseIndex1 + 68) + 3)]) = value11;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value12 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this21->self.data[this21->byteArrayOffset + (baseIndex1 + 92)]) = value12;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value13 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this22->self.data[this22->byteArrayOffset + ((baseIndex1 + 92) + 1)]) = value13;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value14 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this23->self.data[this23->byteArrayOffset + ((baseIndex1 + 92) + 2)]) = value14;
            			}
HXDLIN( 310)			{
HXLINE( 310)				 ::kha::arrays::ByteArrayPrivate this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 310)				int value15 = ::Std_obj::_hx_int(( (Float)((a * ( (float)(255) ))) ));
HXDLIN( 310)				*((uint8_t *)&this24->self.data[this24->byteArrayOffset + ((baseIndex1 + 92) + 3)]) = value15;
            			}
            		}
HXLINE( 311)		{
HXLINE( 311)			int baseIndex2 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this25->self.data[this25->byteArrayOffset + baseIndex2]) = bottomleftx;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this26->self.data[this26->byteArrayOffset + (baseIndex2 + 4)]) = bottomlefty;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this27->self.data[this27->byteArrayOffset + (baseIndex2 + 8)]) = ((Float)-5.0);
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this28->self.data[this28->byteArrayOffset + (baseIndex2 + 24)]) = topleftx;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this29->self.data[this29->byteArrayOffset + (baseIndex2 + 28)]) = toplefty;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this30->self.data[this30->byteArrayOffset + (baseIndex2 + 32)]) = ((Float)-5.0);
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this31->self.data[this31->byteArrayOffset + (baseIndex2 + 48)]) = toprightx;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this32->self.data[this32->byteArrayOffset + (baseIndex2 + 52)]) = toprighty;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this33->self.data[this33->byteArrayOffset + (baseIndex2 + 56)]) = ((Float)-5.0);
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this34->self.data[this34->byteArrayOffset + (baseIndex2 + 72)]) = bottomrightx;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this35->self.data[this35->byteArrayOffset + (baseIndex2 + 76)]) = bottomrighty;
            			}
HXDLIN( 311)			{
HXLINE( 311)				 ::kha::arrays::ByteArrayPrivate this36 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 311)				*((float *)&this36->self.data[this36->byteArrayOffset + (baseIndex2 + 80)]) = ((Float)-5.0);
            			}
            		}
HXLINE( 313)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 314)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC15(ImageShaderPainter_obj,drawImage2,(void))

void ImageShaderPainter_obj::drawImageScale( ::kha::Image img,float sx,float sy,float sw,float sh,float left,float top,float right,float bottom,float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_318_drawImageScale)
HXLINE( 319)		 ::kha::Image tex = img;
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		if ((((::kha::graphics4::ImageShaderPainter_obj::bufferStart + ::kha::graphics4::ImageShaderPainter_obj::bufferIndex) + 1) < 1500)) {
HXLINE( 320)			if (::hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 320)				_hx_tmp = ::hx::IsInstanceNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            			}
            			else {
HXLINE( 320)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 320)			_hx_tmp = true;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 321)			this->drawBuffer(false);
            		}
HXLINE( 323)		{
HXLINE( 323)			float left1 = ( (float)((( (Float)(sx) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 323)			float top1 = ( (float)((( (Float)(sy) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 323)			float right1 = ( (float)((( (Float)((sx + sw)) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 323)			float bottom1 = ( (float)((( (Float)((sy + sh)) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 323)			int baseIndex = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this1->self.data[this1->byteArrayOffset + (baseIndex + 12)]) = left1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this2->self.data[this2->byteArrayOffset + (baseIndex + 16)]) = bottom1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this3->self.data[this3->byteArrayOffset + (baseIndex + 36)]) = left1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this4->self.data[this4->byteArrayOffset + (baseIndex + 40)]) = top1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this5->self.data[this5->byteArrayOffset + (baseIndex + 60)]) = right1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this6->self.data[this6->byteArrayOffset + (baseIndex + 64)]) = top1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this7->self.data[this7->byteArrayOffset + (baseIndex + 84)]) = right1;
            			}
HXDLIN( 323)			{
HXLINE( 323)				 ::kha::arrays::ByteArrayPrivate this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 323)				*((float *)&this8->self.data[this8->byteArrayOffset + (baseIndex + 88)]) = bottom1;
            			}
            		}
HXLINE( 324)		{
HXLINE( 324)			float r = (( (float)(::hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 324)			float g = (( (float)(::hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 324)			float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 324)			int baseIndex1 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this9->self.data[this9->byteArrayOffset + (baseIndex1 + 20)]) = value;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value1 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this10->self.data[this10->byteArrayOffset + ((baseIndex1 + 20) + 1)]) = value1;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value2 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this11->self.data[this11->byteArrayOffset + ((baseIndex1 + 20) + 2)]) = value2;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value3 = ::Std_obj::_hx_int(( (Float)((opacity * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this12->self.data[this12->byteArrayOffset + ((baseIndex1 + 20) + 3)]) = value3;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value4 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this13->self.data[this13->byteArrayOffset + (baseIndex1 + 44)]) = value4;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value5 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this14->self.data[this14->byteArrayOffset + ((baseIndex1 + 44) + 1)]) = value5;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value6 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this15->self.data[this15->byteArrayOffset + ((baseIndex1 + 44) + 2)]) = value6;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value7 = ::Std_obj::_hx_int(( (Float)((opacity * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this16->self.data[this16->byteArrayOffset + ((baseIndex1 + 44) + 3)]) = value7;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value8 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this17->self.data[this17->byteArrayOffset + (baseIndex1 + 68)]) = value8;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value9 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this18->self.data[this18->byteArrayOffset + ((baseIndex1 + 68) + 1)]) = value9;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value10 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this19->self.data[this19->byteArrayOffset + ((baseIndex1 + 68) + 2)]) = value10;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value11 = ::Std_obj::_hx_int(( (Float)((opacity * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this20->self.data[this20->byteArrayOffset + ((baseIndex1 + 68) + 3)]) = value11;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value12 = ::Std_obj::_hx_int(( (Float)((r * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this21->self.data[this21->byteArrayOffset + (baseIndex1 + 92)]) = value12;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value13 = ::Std_obj::_hx_int(( (Float)((g * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this22->self.data[this22->byteArrayOffset + ((baseIndex1 + 92) + 1)]) = value13;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value14 = ::Std_obj::_hx_int(( (Float)((b * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this23->self.data[this23->byteArrayOffset + ((baseIndex1 + 92) + 2)]) = value14;
            			}
HXDLIN( 324)			{
HXLINE( 324)				 ::kha::arrays::ByteArrayPrivate this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 324)				int value15 = ::Std_obj::_hx_int(( (Float)((opacity * ( (float)(255) ))) ));
HXDLIN( 324)				*((uint8_t *)&this24->self.data[this24->byteArrayOffset + ((baseIndex1 + 92) + 3)]) = value15;
            			}
            		}
HXLINE( 325)		{
HXLINE( 325)			int baseIndex2 = ((((::kha::graphics4::ImageShaderPainter_obj::bufferIndex - ::kha::graphics4::ImageShaderPainter_obj::bufferStart) * 6) * 4) * 4);
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this25->self.data[this25->byteArrayOffset + baseIndex2]) = left;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this26->self.data[this26->byteArrayOffset + (baseIndex2 + 4)]) = bottom;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this27->self.data[this27->byteArrayOffset + (baseIndex2 + 8)]) = ((Float)-5.0);
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this28->self.data[this28->byteArrayOffset + (baseIndex2 + 24)]) = left;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this29->self.data[this29->byteArrayOffset + (baseIndex2 + 28)]) = top;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this30->self.data[this30->byteArrayOffset + (baseIndex2 + 32)]) = ((Float)-5.0);
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this31->self.data[this31->byteArrayOffset + (baseIndex2 + 48)]) = right;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this32->self.data[this32->byteArrayOffset + (baseIndex2 + 52)]) = top;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this33->self.data[this33->byteArrayOffset + (baseIndex2 + 56)]) = ((Float)-5.0);
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this34->self.data[this34->byteArrayOffset + (baseIndex2 + 72)]) = right;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this35->self.data[this35->byteArrayOffset + (baseIndex2 + 76)]) = bottom;
            			}
HXDLIN( 325)			{
HXLINE( 325)				 ::kha::arrays::ByteArrayPrivate this36 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices;
HXDLIN( 325)				*((float *)&this36->self.data[this36->byteArrayOffset + (baseIndex2 + 80)]) = ((Float)-5.0);
            			}
            		}
HXLINE( 327)		++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXLINE( 328)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            	}


HX_DEFINE_DYNAMIC_FUNC11(ImageShaderPainter_obj,drawImageScale,(void))

void ImageShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_331_end)
HXLINE( 332)		if ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 333)			this->drawBuffer(true);
            		}
HXLINE( 335)		::kha::graphics4::ImageShaderPainter_obj::lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,end,(void))

::Dynamic ImageShaderPainter_obj::standardImagePipeline;

 ::kha::graphics4::VertexStructure ImageShaderPainter_obj::structure;

int ImageShaderPainter_obj::bufferSize;

int ImageShaderPainter_obj::vertexSize;

int ImageShaderPainter_obj::bufferStart;

int ImageShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer ImageShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::ByteArrayPrivate ImageShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer ImageShaderPainter_obj::indexBuffer;

 ::kha::Image ImageShaderPainter_obj::lastTexture;

void ImageShaderPainter_obj::initShaders(){
            	HX_GC_STACKFRAME(&_hx_pos_0a1398f166f3e074_158_initShaders)
HXLINE( 159)		if (::hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::structure )) {
HXLINE( 160)			::kha::graphics4::ImageShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createImageVertexStructure();
            		}
HXLINE( 162)		if (::hx::IsNull( ::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline )) {
HXLINE( 163)			 ::kha::graphics4::PipelineState pipeline = ::kha::graphics4::Graphics2_obj::createImagePipeline(::kha::graphics4::ImageShaderPainter_obj::structure);
HXLINE( 164)			::kha::graphics4::ImageShaderPainter_obj::standardImagePipeline =  ::kha::graphics4::PerFramebufferPipelineCache_obj::__alloc( HX_CTX ,pipeline,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ImageShaderPainter_obj,initShaders,(void))


::hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__new(::Dynamic g4) {
	::hx::ObjectPtr< ImageShaderPainter_obj > __this = new ImageShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

::hx::ObjectPtr< ImageShaderPainter_obj > ImageShaderPainter_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic g4) {
	ImageShaderPainter_obj *__this = (ImageShaderPainter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ImageShaderPainter_obj), true, "kha.graphics4.ImageShaderPainter"));
	*(void **)__this = ImageShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

ImageShaderPainter_obj::ImageShaderPainter_obj()
{
}

void ImageShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_END_CLASS();
}

void ImageShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(bilinearMipmaps,"bilinearMipmaps");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
}

::hx::Val ImageShaderPainter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { return ::hx::Val( bilinear ); }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pipeline() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return ::hx::Val( drawImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return ::hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return ::hx::Val( drawBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawImage2") ) { return ::hx::Val( drawImage2_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return ::hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return ::hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return ::hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColor") ) { return ::hx::Val( setRectColor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return ::hx::Val( setProjection_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawImageScale") ) { return ::hx::Val( drawImageScale_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { return ::hx::Val( bilinearMipmaps ); }
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return ::hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return ::hx::Val( projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return ::hx::Val( setRectTexCoords_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return ::hx::Val( setBilinearFilter_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBilinearMipmapFilter") ) { return ::hx::Val( setBilinearMipmapFilter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ImageShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferStart") ) { outValue = ( bufferStart ); return true; }
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { outValue = ( lastTexture ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardImagePipeline") ) { outValue = ( standardImagePipeline ); return true; }
	}
	return false;
}

::hx::Val ImageShaderPainter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pipeline(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { _hx_set_myPipeline(HX_CTX_GET,inValue.Cast< ::Dynamic >()); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bilinearMipmaps") ) { bilinearMipmaps=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { _hx_set_projectionMatrix(HX_CTX_GET,inValue.Cast<  ::kha::math::FastMatrix4 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ImageShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferStart") ) { bufferStart=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=ioValue.Cast<  ::kha::Image >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::ByteArrayPrivate >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"standardImagePipeline") ) { standardImagePipeline=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

void ImageShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("bilinear",ec,b6,3d,e0));
	outFields->push(HX_("bilinearMipmaps",5f,10,ab,2b));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ImageShaderPainter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(ImageShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{::hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinear),HX_("bilinear",ec,b6,3d,e0)},
	{::hx::fsBool,(int)offsetof(ImageShaderPainter_obj,bilinearMipmaps),HX_("bilinearMipmaps",5f,10,ab,2b)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(ImageShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(ImageShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ImageShaderPainter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(void *) &ImageShaderPainter_obj::standardImagePipeline,HX_("standardImagePipeline",20,80,d4,fd)},
	{::hx::fsObject /*  ::kha::graphics4::VertexStructure */ ,(void *) &ImageShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::vertexSize,HX_("vertexSize",45,2a,10,dd)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::bufferStart,HX_("bufferStart",42,07,57,21)},
	{::hx::fsInt,(void *) &ImageShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{::hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ImageShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{::hx::fsObject /*  ::kha::arrays::ByteArrayPrivate */ ,(void *) &ImageShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{::hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ImageShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{::hx::fsObject /*  ::kha::Image */ ,(void *) &ImageShaderPainter_obj::lastTexture,HX_("lastTexture",25,7d,8c,53)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ImageShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("bilinear",ec,b6,3d,e0),
	HX_("bilinearMipmaps",5f,10,ab,2b),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectTexCoords",9f,c2,a8,fb),
	HX_("setRectColor",9d,31,74,f8),
	HX_("drawBuffer",24,38,58,12),
	HX_("setBilinearFilter",06,cb,de,13),
	HX_("setBilinearMipmapFilter",2e,b1,aa,57),
	HX_("drawImage",b7,54,74,85),
	HX_("drawImage2",9b,cb,55,40),
	HX_("drawImageScale",53,72,a6,67),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void ImageShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::standardImagePipeline,"standardImagePipeline");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferStart,"bufferStart");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(ImageShaderPainter_obj::lastTexture,"lastTexture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::standardImagePipeline,"standardImagePipeline");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::vertexSize,"vertexSize");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferStart,"bufferStart");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(ImageShaderPainter_obj::lastTexture,"lastTexture");
};

#endif

::hx::Class ImageShaderPainter_obj::__mClass;

static ::String ImageShaderPainter_obj_sStaticFields[] = {
	HX_("standardImagePipeline",20,80,d4,fd),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("vertexSize",45,2a,10,dd),
	HX_("bufferStart",42,07,57,21),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("lastTexture",25,7d,8c,53),
	HX_("initShaders",7e,f0,f0,17),
	::String(null())
};

void ImageShaderPainter_obj::__register()
{
	ImageShaderPainter_obj _hx_dummy;
	ImageShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.ImageShaderPainter",7a,d5,6b,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ImageShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ImageShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ImageShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageShaderPainter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_118_boot)
HXDLIN( 118)		standardImagePipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_119_boot)
HXDLIN( 119)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_120_boot)
HXDLIN( 120)		bufferSize = 1500;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0a1398f166f3e074_121_boot)
HXDLIN( 121)		vertexSize = 6;
            	}
}

} // end namespace kha
} // end namespace graphics4
