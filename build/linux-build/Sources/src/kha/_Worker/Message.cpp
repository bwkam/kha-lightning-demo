// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_kha_Worker
#include <hxinc/kha/Worker.h>
#endif
#ifndef INCLUDED_kha__Worker_Message
#include <hxinc/kha/_Worker/Message.h>
#endif
#ifndef INCLUDED_sys_thread_Tls
#include <hxinc/sys/thread/Tls.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9d4c5aa30833307_85_new,"kha._Worker.Message","new",0x66b1391e,"kha._Worker.Message.new","kha/Worker.hx",85,0x3bca77f5)
namespace kha{
namespace _Worker{

void Message_obj::__construct( ::Dynamic message){
            	HX_GC_STACKFRAME(&_hx_pos_d9d4c5aa30833307_85_new)
HXLINE(  86)		this->threadId = ( (int)(::kha::Worker_obj::threadId->get_value()) );
HXLINE(  87)		this->_hx_set_message(HX_CTX, message);
            	}

Dynamic Message_obj::__CreateEmpty() { return new Message_obj; }

void *Message_obj::_hx_vtable = 0;

Dynamic Message_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Message_obj > _hx_result = new Message_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Message_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0913164a;
}


::hx::ObjectPtr< Message_obj > Message_obj::__new( ::Dynamic message) {
	::hx::ObjectPtr< Message_obj > __this = new Message_obj();
	__this->__construct(message);
	return __this;
}

::hx::ObjectPtr< Message_obj > Message_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic message) {
	Message_obj *__this = (Message_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Message_obj), true, "kha._Worker.Message"));
	*(void **)__this = Message_obj::_hx_vtable;
	__this->__construct(message);
	return __this;
}

Message_obj::Message_obj()
{
}

void Message_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Message);
	HX_MARK_MEMBER_NAME(threadId,"threadId");
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_END_CLASS();
}

void Message_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(threadId,"threadId");
	HX_VISIT_MEMBER_NAME(message,"message");
}

::hx::Val Message_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { return ::hx::Val( message ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"threadId") ) { return ::hx::Val( threadId ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Message_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { _hx_set_message(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"threadId") ) { threadId=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Message_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("threadId",45,81,25,cc));
	outFields->push(HX_("message",c7,35,11,9a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Message_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Message_obj,threadId),HX_("threadId",45,81,25,cc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Message_obj,message),HX_("message",c7,35,11,9a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Message_obj_sStaticStorageInfo = 0;
#endif

static ::String Message_obj_sMemberFields[] = {
	HX_("threadId",45,81,25,cc),
	HX_("message",c7,35,11,9a),
	::String(null()) };

::hx::Class Message_obj::__mClass;

void Message_obj::__register()
{
	Message_obj _hx_dummy;
	Message_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha._Worker.Message",2c,12,63,4e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Message_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Message_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Message_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Message_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace _Worker
