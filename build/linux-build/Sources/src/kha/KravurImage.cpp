// Generated by Haxe 4.3.0+fa3f709
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_AlignedQuad
#include <hxinc/kha/AlignedQuad.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <hxinc/kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics2_truetype_Stbtt_bakedchar
#include <hxinc/kha/graphics2/truetype/Stbtt_bakedchar.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_40_new,"kha.KravurImage","new",0x4fe7ca6a,"kha.KravurImage.new","kha/Kravur.hx",40,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_61_getTexture,"kha.KravurImage","getTexture",0x867a0a1b,"kha.KravurImage.getTexture","kha/Kravur.hx",61,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_64_getBakedQuad,"kha.KravurImage","getBakedQuad",0xeb5cfcd2,"kha.KravurImage.getBakedQuad","kha/Kravur.hx",64,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_90_getCharWidth,"kha.KravurImage","getCharWidth",0x75175090,"kha.KravurImage.getCharWidth","kha/Kravur.hx",90,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_110_getHeight,"kha.KravurImage","getHeight",0xd444aea7,"kha.KravurImage.getHeight","kha/Kravur.hx",110,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_113_stringWidth,"kha.KravurImage","stringWidth",0x6df17b7f,"kha.KravurImage.stringWidth","kha/Kravur.hx",113,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_121_charactersWidth,"kha.KravurImage","charactersWidth",0x31960606,"kha.KravurImage.charactersWidth","kha/Kravur.hx",121,0xdd7a3f9a)
HX_LOCAL_STACK_FRAME(_hx_pos_b949d6a97d70c8fa_130_getBaselinePosition,"kha.KravurImage","getBaselinePosition",0x9ad05d0e,"kha.KravurImage.getBaselinePosition","kha/Kravur.hx",130,0xdd7a3f9a)
namespace kha{

void KravurImage_obj::__construct(int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels){
            	HX_GC_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_40_new)
HXLINE(  41)		this->mySize = ( (Float)(size) );
HXLINE(  42)		this->width = width;
HXLINE(  43)		this->height = height;
HXLINE(  44)		this->_hx_set_chars(HX_CTX, chars);
HXLINE(  45)		this->baseline = ( (Float)(ascent) );
HXLINE(  46)		{
HXLINE(  46)			int _g = 0;
HXDLIN(  46)			while((_g < chars->length)){
HXLINE(  46)				 ::kha::graphics2::truetype::Stbtt_bakedchar _hx_char = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(chars,_g)) );
HXDLIN(  46)				_g = (_g + 1);
HXLINE(  47)				 ::kha::graphics2::truetype::Stbtt_bakedchar char1 = _hx_char;
HXDLIN(  47)				char1->yoff = (char1->yoff + this->baseline);
            			}
            		}
HXLINE(  49)		this->_hx_set_texture(HX_CTX, ::kha::Image_obj::create(width,height,1,null(),null()));
HXLINE(  50)		 ::haxe::io::Bytes bytes = this->texture->lock(null());
HXLINE(  51)		int pos = 0;
HXLINE(  52)		{
HXLINE(  52)			int _g1 = 0;
HXDLIN(  52)			int _g2 = height;
HXDLIN(  52)			while((_g1 < _g2)){
HXLINE(  52)				_g1 = (_g1 + 1);
HXDLIN(  52)				int y = (_g1 - 1);
HXLINE(  53)				{
HXLINE(  53)					int _g3 = 0;
HXDLIN(  53)					int _g4 = width;
HXDLIN(  53)					while((_g3 < _g4)){
HXLINE(  53)						_g3 = (_g3 + 1);
HXDLIN(  53)						int x = (_g3 - 1);
HXLINE(  54)						{
HXLINE(  54)							int v = pixels->readU8(pos);
HXDLIN(  54)							bytes->b[pos] = ( (unsigned char)(v) );
            						}
HXLINE(  55)						pos = (pos + 1);
            					}
            				}
            			}
            		}
HXLINE(  57)		this->texture->unlock();
            	}

Dynamic KravurImage_obj::__CreateEmpty() { return new KravurImage_obj; }

void *KravurImage_obj::_hx_vtable = 0;

Dynamic KravurImage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KravurImage_obj > _hx_result = new KravurImage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool KravurImage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e2c4676;
}

 ::kha::Image KravurImage_obj::getTexture(){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_61_getTexture)
HXDLIN(  61)		return this->texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getTexture,return )

 ::kha::AlignedQuad KravurImage_obj::getBakedQuad( ::kha::AlignedQuad q,int char_index,Float xpos,Float ypos){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_64_getBakedQuad)
HXLINE(  65)		if ((char_index >= this->chars->length)) {
HXLINE(  66)			return null();
            		}
HXLINE(  67)		Float ipw = (((Float)1.0) / ( (Float)(this->width) ));
HXLINE(  68)		Float iph = (((Float)1.0) / ( (Float)(this->height) ));
HXLINE(  69)		 ::kha::graphics2::truetype::Stbtt_bakedchar b = ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,char_index)) );
HXLINE(  70)		if (::hx::IsNull( b )) {
HXLINE(  71)			return null();
            		}
HXLINE(  72)		int round_x = ::Math_obj::round((xpos + b->xoff));
HXLINE(  73)		int round_y = ::Math_obj::round((ypos + b->yoff));
HXLINE(  75)		q->x0 = ( (Float)(round_x) );
HXLINE(  76)		q->y0 = ( (Float)(round_y) );
HXLINE(  77)		q->x1 = ( (Float)(((round_x + b->x1) - b->x0)) );
HXLINE(  78)		q->y1 = ( (Float)(((round_y + b->y1) - b->y0)) );
HXLINE(  80)		q->s0 = (( (Float)(b->x0) ) * ipw);
HXLINE(  81)		q->t0 = (( (Float)(b->y0) ) * iph);
HXLINE(  82)		q->s1 = (( (Float)(b->x1) ) * ipw);
HXLINE(  83)		q->t1 = (( (Float)(b->y1) ) * iph);
HXLINE(  85)		q->xadvance = b->xadvance;
HXLINE(  87)		return q;
            	}


HX_DEFINE_DYNAMIC_FUNC4(KravurImage_obj,getBakedQuad,return )

Float KravurImage_obj::getCharWidth(int charIndex){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_90_getCharWidth)
HXLINE(  91)		if ((this->chars->length == 0)) {
HXLINE(  92)			return ( (Float)(0) );
            		}
HXLINE(  93)		int offset = ::kha::KravurImage_obj::charBlocks->__get(0);
HXLINE(  94)		if ((charIndex < offset)) {
HXLINE(  95)			return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,0)) )->xadvance;
            		}
HXLINE(  97)		{
HXLINE(  97)			int _g = 1;
HXDLIN(  97)			int _g1 = ::Std_obj::_hx_int((( (Float)(::kha::KravurImage_obj::charBlocks->length) ) / ( (Float)(2) )));
HXDLIN(  97)			while((_g < _g1)){
HXLINE(  97)				_g = (_g + 1);
HXDLIN(  97)				int i = (_g - 1);
HXLINE(  98)				int prevEnd = ::kha::KravurImage_obj::charBlocks->__get(((i * 2) - 1));
HXLINE(  99)				int start = ::kha::KravurImage_obj::charBlocks->__get((i * 2));
HXLINE( 100)				if ((charIndex > (start - 1))) {
HXLINE( 101)					offset = (offset + ((start - 1) - prevEnd));
            				}
            			}
            		}
HXLINE( 104)		if (((charIndex - offset) >= this->chars->length)) {
HXLINE( 105)			return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,0)) )->xadvance;
            		}
HXLINE( 106)		return ( ( ::kha::graphics2::truetype::Stbtt_bakedchar)(_hx_array_unsafe_get(this->chars,(charIndex - offset))) )->xadvance;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KravurImage_obj,getCharWidth,return )

Float KravurImage_obj::getHeight(){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_110_getHeight)
HXDLIN( 110)		return this->mySize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getHeight,return )

Float KravurImage_obj::stringWidth(::String str){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_113_stringWidth)
HXLINE( 114)		Float width = ( (Float)(0) );
HXLINE( 115)		{
HXLINE( 115)			int _g = 0;
HXDLIN( 115)			int _g1 = str.length;
HXDLIN( 115)			while((_g < _g1)){
HXLINE( 115)				_g = (_g + 1);
HXDLIN( 115)				int c = (_g - 1);
HXLINE( 116)				width = (width + this->getCharWidth(( (int)(str.charCodeAt(c)) )));
            			}
            		}
HXLINE( 118)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC1(KravurImage_obj,stringWidth,return )

Float KravurImage_obj::charactersWidth(::Array< int > characters,int start,int length){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_121_charactersWidth)
HXLINE( 122)		Float width = ( (Float)(0) );
HXLINE( 123)		{
HXLINE( 123)			int _g = start;
HXDLIN( 123)			int _g1 = (start + length);
HXDLIN( 123)			while((_g < _g1)){
HXLINE( 123)				_g = (_g + 1);
HXDLIN( 123)				int i = (_g - 1);
HXLINE( 124)				width = (width + this->getCharWidth(characters->__get(i)));
            			}
            		}
HXLINE( 126)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC3(KravurImage_obj,charactersWidth,return )

Float KravurImage_obj::getBaselinePosition(){
            	HX_STACKFRAME(&_hx_pos_b949d6a97d70c8fa_130_getBaselinePosition)
HXDLIN( 130)		return this->baseline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(KravurImage_obj,getBaselinePosition,return )

::Array< int > KravurImage_obj::charBlocks;


::hx::ObjectPtr< KravurImage_obj > KravurImage_obj::__new(int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels) {
	::hx::ObjectPtr< KravurImage_obj > __this = new KravurImage_obj();
	__this->__construct(size,ascent,descent,lineGap,width,height,chars,pixels);
	return __this;
}

::hx::ObjectPtr< KravurImage_obj > KravurImage_obj::__alloc(::hx::Ctx *_hx_ctx,int size,int ascent,int descent,int lineGap,int width,int height,::Array< ::Dynamic> chars, ::kha::internal::BytesBlob pixels) {
	KravurImage_obj *__this = (KravurImage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KravurImage_obj), true, "kha.KravurImage"));
	*(void **)__this = KravurImage_obj::_hx_vtable;
	__this->__construct(size,ascent,descent,lineGap,width,height,chars,pixels);
	return __this;
}

KravurImage_obj::KravurImage_obj()
{
}

void KravurImage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KravurImage);
	HX_MARK_MEMBER_NAME(mySize,"mySize");
	HX_MARK_MEMBER_NAME(chars,"chars");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(baseline,"baseline");
	HX_MARK_END_CLASS();
}

void KravurImage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mySize,"mySize");
	HX_VISIT_MEMBER_NAME(chars,"chars");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(baseline,"baseline");
}

::hx::Val KravurImage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { return ::hx::Val( chars ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mySize") ) { return ::hx::Val( mySize ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { return ::hx::Val( baseline ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return ::hx::Val( getHeight_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getTexture") ) { return ::hx::Val( getTexture_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stringWidth") ) { return ::hx::Val( stringWidth_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getBakedQuad") ) { return ::hx::Val( getBakedQuad_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCharWidth") ) { return ::hx::Val( getCharWidth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charactersWidth") ) { return ::hx::Val( charactersWidth_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getBaselinePosition") ) { return ::hx::Val( getBaselinePosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool KravurImage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"charBlocks") ) { outValue = ( charBlocks ); return true; }
	}
	return false;
}

::hx::Val KravurImage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { _hx_set_chars(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mySize") ) { mySize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { _hx_set_texture(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"baseline") ) { baseline=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool KravurImage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"charBlocks") ) { charBlocks=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void KravurImage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mySize",4d,52,8f,77));
	outFields->push(HX_("chars",dd,9c,b3,45));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("baseline",85,dc,27,11));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KravurImage_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(KravurImage_obj,mySize),HX_("mySize",4d,52,8f,77)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(KravurImage_obj,chars),HX_("chars",dd,9c,b3,45)},
	{::hx::fsObject /*  ::kha::Image */ ,(int)offsetof(KravurImage_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsInt,(int)offsetof(KravurImage_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(KravurImage_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(KravurImage_obj,baseline),HX_("baseline",85,dc,27,11)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo KravurImage_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(void *) &KravurImage_obj::charBlocks,HX_("charBlocks",fc,c5,09,1c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String KravurImage_obj_sMemberFields[] = {
	HX_("mySize",4d,52,8f,77),
	HX_("chars",dd,9c,b3,45),
	HX_("texture",db,c8,e0,9e),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("baseline",85,dc,27,11),
	HX_("getTexture",e5,4e,42,ee),
	HX_("getBakedQuad",1c,88,57,09),
	HX_("getCharWidth",da,db,11,93),
	HX_("getHeight",1d,91,a2,7e),
	HX_("stringWidth",75,67,65,d5),
	HX_("charactersWidth",fc,24,6e,9d),
	HX_("getBaselinePosition",04,2f,a2,7c),
	::String(null()) };

static void KravurImage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KravurImage_obj::charBlocks,"charBlocks");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KravurImage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KravurImage_obj::charBlocks,"charBlocks");
};

#endif

::hx::Class KravurImage_obj::__mClass;

static ::String KravurImage_obj_sStaticFields[] = {
	HX_("charBlocks",fc,c5,09,1c),
	::String(null())
};

void KravurImage_obj::__register()
{
	KravurImage_obj _hx_dummy;
	KravurImage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("kha.KravurImage",78,0d,8c,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KravurImage_obj::__GetStatic;
	__mClass->mSetStaticField = &KravurImage_obj::__SetStatic;
	__mClass->mMarkFunc = KravurImage_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KravurImage_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KravurImage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KravurImage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KravurImage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KravurImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KravurImage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
