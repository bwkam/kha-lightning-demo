// Generated by Haxe 4.3.0+fa3f709
#ifndef INCLUDED_pipelines_LightCubePipeline
#define INCLUDED_pipelines_LightCubePipeline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(kha,graphics4,ConstantLocation)
HX_DECLARE_CLASS2(kha,graphics4,Graphics)
HX_DECLARE_CLASS2(kha,graphics4,IndexBuffer)
HX_DECLARE_CLASS2(kha,graphics4,PipelineState)
HX_DECLARE_CLASS2(kha,graphics4,PipelineStateBase)
HX_DECLARE_CLASS2(kha,graphics4,VertexBuffer)
HX_DECLARE_CLASS1(pipelines,LightCubePipeline)

namespace pipelines{


class HXCPP_CLASS_ATTRIBUTES LightCubePipeline_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LightCubePipeline_obj OBJ_;
		LightCubePipeline_obj();

	public:
		enum { _hx_ClassId = 0x71340a9c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pipelines.LightCubePipeline")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pipelines.LightCubePipeline"); }
		static ::hx::ObjectPtr< LightCubePipeline_obj > __new();
		static ::hx::ObjectPtr< LightCubePipeline_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LightCubePipeline_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LightCubePipeline",0d,b7,b9,4b); }

		static void __boot();
		static ::Array< Float > new_vertices;
		 ::kha::graphics4::PipelineState pipeline;
		inline  ::kha::graphics4::PipelineState _hx_set_pipeline(::hx::StackContext *_hx_ctx, ::kha::graphics4::PipelineState _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return pipeline=_hx_v; }
		::Dynamic mvpID;
		inline ::Dynamic _hx_set_mvpID(::hx::StackContext *_hx_ctx,::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return mvpID=_hx_v; }
		::Dynamic projID;
		inline ::Dynamic _hx_set_projID(::hx::StackContext *_hx_ctx,::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return projID=_hx_v; }
		::Dynamic viewID;
		inline ::Dynamic _hx_set_viewID(::hx::StackContext *_hx_ctx,::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return viewID=_hx_v; }
		::Dynamic modelID;
		inline ::Dynamic _hx_set_modelID(::hx::StackContext *_hx_ctx,::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return modelID=_hx_v; }
		 ::kha::graphics4::VertexBuffer vertexBuffer;
		inline  ::kha::graphics4::VertexBuffer _hx_set_vertexBuffer(::hx::StackContext *_hx_ctx, ::kha::graphics4::VertexBuffer _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return vertexBuffer=_hx_v; }
		 ::kha::graphics4::IndexBuffer indexBuffer;
		inline  ::kha::graphics4::IndexBuffer _hx_set_indexBuffer(::hx::StackContext *_hx_ctx, ::kha::graphics4::IndexBuffer _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return indexBuffer=_hx_v; }
		void render(::Dynamic g, ::Dynamic params);
		::Dynamic render_dyn();

};

} // end namespace pipelines

#endif /* INCLUDED_pipelines_LightCubePipeline */ 
