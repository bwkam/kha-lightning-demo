// Generated by Haxe 4.3.0+fa3f709
#ifndef INCLUDED_kha_Worker
#define INCLUDED_kha_Worker

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Worker)
HX_DECLARE_CLASS2(sys,thread,Tls)
HX_DECLARE_CLASS3(sys,thread,_Thread,HaxeThread)

namespace kha{


class HXCPP_CLASS_ATTRIBUTES Worker_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Worker_obj OBJ_;
		Worker_obj();

	public:
		enum { _hx_ClassId = 0x06dd8dde };

		void __construct( ::sys::thread::_Thread::HaxeThread thread,int id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.Worker")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"kha.Worker"); }
		static ::hx::ObjectPtr< Worker_obj > __new( ::sys::thread::_Thread::HaxeThread thread,int id);
		static ::hx::ObjectPtr< Worker_obj > __alloc(::hx::Ctx *_hx_ctx, ::sys::thread::_Thread::HaxeThread thread,int id);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Worker_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Worker",9e,a4,32,fe); }

		static void __boot();
		static  ::sys::thread::_Thread::HaxeThread _mainThread;
		static ::Array< ::Dynamic> notifyFuncs;
		static int taskId;
		static int nextThreadId;
		static  ::sys::thread::Tls threadId;
		static  ::kha::Worker create(::hx::Class clazz);
		static ::Dynamic create_dyn();

		static void notifyWorker( ::Dynamic func);
		static ::Dynamic notifyWorker_dyn();

		static void postFromWorker( ::Dynamic message);
		static ::Dynamic postFromWorker_dyn();

		 ::sys::thread::_Thread::HaxeThread thread;
		inline  ::sys::thread::_Thread::HaxeThread _hx_set_thread(::hx::StackContext *_hx_ctx, ::sys::thread::_Thread::HaxeThread _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return thread=_hx_v; }
		int id;
		void notify( ::Dynamic func);
		::Dynamic notify_dyn();

		void post( ::Dynamic message);
		::Dynamic post_dyn();

};

} // end namespace kha

#endif /* INCLUDED_kha_Worker */ 
