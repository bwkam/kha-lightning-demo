// Generated by Haxe 4.3.0+fa3f709
#ifndef INCLUDED_zui_Zui
#define INCLUDED_zui_Zui

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)
HX_DECLARE_CLASS2(kha,graphics4,PipelineState)
HX_DECLARE_CLASS2(kha,graphics4,PipelineStateBase)
HX_DECLARE_CLASS1(zui,Handle)
HX_DECLARE_CLASS1(zui,Zui)

namespace zui{


class HXCPP_CLASS_ATTRIBUTES Zui_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Zui_obj OBJ_;
		Zui_obj();

	public:
		enum { _hx_ClassId = 0x263c3520 };

		void __construct( ::Dynamic ops);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zui.Zui")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"zui.Zui"); }
		static ::hx::ObjectPtr< Zui_obj > __new( ::Dynamic ops);
		static ::hx::ObjectPtr< Zui_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic ops);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Zui_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Zui",2e,b1,44,00); }

		static void __boot();
		static  ::zui::Zui current;
		static  ::Dynamic onBorderHover;
		static Dynamic onBorderHover_dyn() { return onBorderHover;}
		static  ::Dynamic onTextHover;
		static Dynamic onTextHover_dyn() { return onTextHover;}
		static  ::Dynamic onDeselectText;
		static Dynamic onDeselectText_dyn() { return onDeselectText;}
		static bool alwaysRedrawWindow;
		static bool keyRepeat;
		static bool dynamicGlyphLoad;
		static bool touchScroll;
		static bool touchHold;
		static bool touchTooltip;
		static Float keyRepeatTime;
		static ::String textToPaste;
		static ::String textToCopy;
		static bool isCut;
		static bool isCopy;
		static bool isPaste;
		static  ::zui::Zui copyReceiver;
		static int copyFrame;
		static bool comboFirst;
		static  ::Dynamic extractColoring(::String text, ::Dynamic col);
		static ::Dynamic extractColoring_dyn();

		static bool isChar(int code);
		static ::Dynamic isChar_dyn();

		static int checkStart(int i,::String text,::Array< ::String > start);
		static ::Dynamic checkStart_dyn();

		bool isScrolling;
		bool isTyping;
		bool enabled;
		bool isStarted;
		bool isPushed;
		bool isHovered;
		bool isReleased;
		bool changed;
		bool imageInvertY;
		bool scrollEnabled;
		bool alwaysRedraw;
		bool highlightOnSelect;
		bool tabSwitchEnabled;
		 ::Dynamic textColoring;
		inline  ::Dynamic _hx_set_textColoring(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return textColoring=_hx_v; }
		int windowBorderTop;
		int windowBorderBottom;
		int windowBorderLeft;
		int windowBorderRight;
		bool highlightFullRow;
		bool touchHoldActivated;
		bool sliderTooltip;
		Float sliderTooltipX;
		Float sliderTooltipY;
		Float sliderTooltipW;
		bool inputRegistered;
		bool inputEnabled;
		Float inputX;
		Float inputY;
		Float inputStartedX;
		Float inputStartedY;
		Float inputDX;
		Float inputDY;
		int inputWheelDelta;
		bool inputStarted;
		bool inputStartedR;
		bool inputReleased;
		bool inputReleasedR;
		bool inputDown;
		bool inputDownR;
		bool penInUse;
		bool isKeyPressed;
		bool isKeyDown;
		bool isShiftDown;
		bool isCtrlDown;
		bool isAltDown;
		bool isADown;
		bool isBackspaceDown;
		bool isDeleteDown;
		bool isEscapeDown;
		bool isReturnDown;
		bool isTabDown;
		 ::Dynamic key;
		inline  ::Dynamic _hx_set_key(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return key=_hx_v; }
		::String _hx_char;
		inline ::String _hx_set__hx_char(::hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return _hx_char=_hx_v; }
		Float inputStartedTime;
		int cursorX;
		int highlightAnchor;
		::Array< Float > ratios;
		inline ::Array< Float > _hx_set_ratios(::hx::StackContext *_hx_ctx,::Array< Float > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return ratios=_hx_v; }
		int curRatio;
		Float xBeforeSplit;
		int wBeforeSplit;
		 ::kha::graphics2::Graphics g;
		inline  ::kha::graphics2::Graphics _hx_set_g(::hx::StackContext *_hx_ctx, ::kha::graphics2::Graphics _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return g=_hx_v; }
		 ::Dynamic t;
		inline  ::Dynamic _hx_set_t(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return t=_hx_v; }
		 ::Dynamic ops;
		inline  ::Dynamic _hx_set_ops(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return ops=_hx_v; }
		 ::kha::graphics2::Graphics globalG;
		inline  ::kha::graphics2::Graphics _hx_set_globalG(::hx::StackContext *_hx_ctx, ::kha::graphics2::Graphics _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return globalG=_hx_v; }
		 ::kha::graphics4::PipelineState rtTextPipeline;
		inline  ::kha::graphics4::PipelineState _hx_set_rtTextPipeline(::hx::StackContext *_hx_ctx, ::kha::graphics4::PipelineState _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return rtTextPipeline=_hx_v; }
		int fontSize;
		Float fontOffsetY;
		Float arrowOffsetX;
		Float arrowOffsetY;
		Float titleOffsetX;
		Float buttonOffsetY;
		Float checkOffsetX;
		Float checkOffsetY;
		Float checkSelectOffsetX;
		Float checkSelectOffsetY;
		Float radioOffsetX;
		Float radioOffsetY;
		Float radioSelectOffsetX;
		Float radioSelectOffsetY;
		Float scrollAlign;
		bool imageScrollAlign;
		Float _x;
		Float _y;
		int _w;
		int _h;
		Float _windowX;
		Float _windowY;
		Float _windowW;
		Float _windowH;
		 ::zui::Handle currentWindow;
		inline  ::zui::Handle _hx_set_currentWindow(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return currentWindow=_hx_v; }
		bool windowEnded;
		 ::zui::Handle scrollHandle;
		inline  ::zui::Handle _hx_set_scrollHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return scrollHandle=_hx_v; }
		 ::zui::Handle dragHandle;
		inline  ::zui::Handle _hx_set_dragHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return dragHandle=_hx_v; }
		Float windowHeaderW;
		Float windowHeaderH;
		Float restoreX;
		Float restoreY;
		 ::zui::Handle textSelectedHandle;
		inline  ::zui::Handle _hx_set_textSelectedHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return textSelectedHandle=_hx_v; }
		::String textSelected;
		inline ::String _hx_set_textSelected(::hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return textSelected=_hx_v; }
		 ::zui::Handle submitTextHandle;
		inline  ::zui::Handle _hx_set_submitTextHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return submitTextHandle=_hx_v; }
		::String textToSubmit;
		inline ::String _hx_set_textToSubmit(::hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return textToSubmit=_hx_v; }
		bool tabPressed;
		 ::zui::Handle tabPressedHandle;
		inline  ::zui::Handle _hx_set_tabPressedHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tabPressedHandle=_hx_v; }
		 ::zui::Handle comboSelectedHandle;
		inline  ::zui::Handle _hx_set_comboSelectedHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return comboSelectedHandle=_hx_v; }
		 ::zui::Handle comboSelectedWindow;
		inline  ::zui::Handle _hx_set_comboSelectedWindow(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return comboSelectedWindow=_hx_v; }
		int comboSelectedAlign;
		::Array< ::String > comboSelectedTexts;
		inline ::Array< ::String > _hx_set_comboSelectedTexts(::hx::StackContext *_hx_ctx,::Array< ::String > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return comboSelectedTexts=_hx_v; }
		::String comboSelectedLabel;
		inline ::String _hx_set_comboSelectedLabel(::hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return comboSelectedLabel=_hx_v; }
		int comboSelectedX;
		int comboSelectedY;
		int comboSelectedW;
		bool comboSearchBar;
		 ::zui::Handle submitComboHandle;
		inline  ::zui::Handle _hx_set_submitComboHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return submitComboHandle=_hx_v; }
		int comboToSubmit;
		int comboInitialValue;
		::String tooltipText;
		inline ::String _hx_set_tooltipText(::hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return tooltipText=_hx_v; }
		 ::kha::Image tooltipImg;
		inline  ::kha::Image _hx_set_tooltipImg(::hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tooltipImg=_hx_v; }
		 ::Dynamic tooltipImgMaxWidth;
		inline  ::Dynamic _hx_set_tooltipImgMaxWidth(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tooltipImgMaxWidth=_hx_v; }
		bool tooltipInvertY;
		Float tooltipX;
		Float tooltipY;
		bool tooltipShown;
		bool tooltipWait;
		Float tooltipTime;
		::Array< ::String > tabNames;
		inline ::Array< ::String > _hx_set_tabNames(::hx::StackContext *_hx_ctx,::Array< ::String > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tabNames=_hx_v; }
		::Array< int > tabColors;
		inline ::Array< int > _hx_set_tabColors(::hx::StackContext *_hx_ctx,::Array< int > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tabColors=_hx_v; }
		 ::zui::Handle tabHandle;
		inline  ::zui::Handle _hx_set_tabHandle(::hx::StackContext *_hx_ctx, ::zui::Handle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tabHandle=_hx_v; }
		Float tabScroll;
		bool tabVertical;
		bool sticky;
		bool scissor;
		bool elementsBaked;
		 ::kha::Image checkSelectImage;
		inline  ::kha::Image _hx_set_checkSelectImage(::hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return checkSelectImage=_hx_v; }
		void setScale(Float factor);
		::Dynamic setScale_dyn();

		void bakeElements();
		::Dynamic bakeElements_dyn();

		void remove();
		::Dynamic remove_dyn();

		void registerInput();
		::Dynamic registerInput_dyn();

		void unregisterInput();
		::Dynamic unregisterInput_dyn();

		void begin( ::kha::graphics2::Graphics g);
		::Dynamic begin_dyn();

		void end(::hx::Null< bool >  last);
		::Dynamic end_dyn();

		void beginRegion( ::kha::graphics2::Graphics g,int x,int y,int w);
		::Dynamic beginRegion_dyn();

		void endRegion(::hx::Null< bool >  last);
		::Dynamic endRegion_dyn();

		void beginSticky();
		::Dynamic beginSticky_dyn();

		void endSticky();
		::Dynamic endSticky_dyn();

		void endInput();
		::Dynamic endInput_dyn();

		bool inputChanged();
		::Dynamic inputChanged_dyn();

		bool windowDirty( ::zui::Handle handle,int x,int y,int w,int h);
		::Dynamic windowDirty_dyn();

		bool window( ::zui::Handle handle,int x,int y,int w,int h,::hx::Null< bool >  drag);
		::Dynamic window_dyn();

		void endWindow(::hx::Null< bool >  bindGlobalG);
		::Dynamic endWindow_dyn();

		void scroll(Float delta,Float fullHeight);
		::Dynamic scroll_dyn();

		bool tab( ::zui::Handle handle,::String text,::hx::Null< bool >  vertical,::hx::Null< int >  color);
		::Dynamic tab_dyn();

		void drawTabs();
		::Dynamic drawTabs_dyn();

		bool panel( ::zui::Handle handle,::String text,::hx::Null< bool >  isTree,::hx::Null< bool >  filled,::hx::Null< bool >  pack);
		::Dynamic panel_dyn();

		int image( ::kha::Image image,::hx::Null< int >  tint, ::Dynamic h,::hx::Null< int >  sx,::hx::Null< int >  sy,::hx::Null< int >  sw,::hx::Null< int >  sh);
		::Dynamic image_dyn();

		int text(::String text,::hx::Null< int >  align,::hx::Null< int >  bg);
		::Dynamic text_dyn();

		void splitText(::String lines,::hx::Null< int >  align,::hx::Null< int >  bg);
		::Dynamic splitText_dyn();

		void startTextEdit( ::zui::Handle handle,::hx::Null< int >  align);
		::Dynamic startTextEdit_dyn();

		void submitTextEdit();
		::Dynamic submitTextEdit_dyn();

		void updateTextEdit(::hx::Null< int >  align,::hx::Null< bool >  editable,::hx::Null< bool >  liveUpdate);
		::Dynamic updateTextEdit_dyn();

		::String textInput( ::zui::Handle handle,::String label,::hx::Null< int >  align,::hx::Null< bool >  editable,::hx::Null< bool >  liveUpdate);
		::Dynamic textInput_dyn();

		void setCursorToInput(int align);
		::Dynamic setCursorToInput_dyn();

		void deselectText();
		::Dynamic deselectText_dyn();

		bool button(::String text,::hx::Null< int >  align,::String label);
		::Dynamic button_dyn();

		bool check( ::zui::Handle handle,::String text,::String label);
		::Dynamic check_dyn();

		bool radio( ::zui::Handle handle,int position,::String text,::String label);
		::Dynamic radio_dyn();

		int combo( ::zui::Handle handle,::Array< ::String > texts,::String label,::hx::Null< bool >  showLabel,::hx::Null< int >  align,::hx::Null< bool >  searchBar);
		::Dynamic combo_dyn();

		Float slider( ::zui::Handle handle,::String text,::hx::Null< Float >  from,::hx::Null< Float >  to,::hx::Null< bool >  filled,::hx::Null< Float >  precision,::hx::Null< bool >  displayValue,::hx::Null< int >  align,::hx::Null< bool >  textEdit);
		::Dynamic slider_dyn();

		void separator(::hx::Null< int >  h,::hx::Null< bool >  fill);
		::Dynamic separator_dyn();

		void tooltip(::String text);
		::Dynamic tooltip_dyn();

		void tooltipImage( ::kha::Image image, ::Dynamic maxWidth);
		::Dynamic tooltipImage_dyn();

		void drawArrow(bool selected);
		::Dynamic drawArrow_dyn();

		void drawTree(bool selected);
		::Dynamic drawTree_dyn();

		void drawCheck(bool selected,bool hover);
		::Dynamic drawCheck_dyn();

		void drawRadio(bool selected,bool hover);
		::Dynamic drawRadio_dyn();

		void drawSlider(Float value,Float from,Float to,bool filled,bool hover);
		::Dynamic drawSlider_dyn();

		void drawCombo();
		::Dynamic drawCombo_dyn();

		void drawTooltip(bool bindGlobalG);
		::Dynamic drawTooltip_dyn();

		void drawTooltipText(bool bindGlobalG);
		::Dynamic drawTooltipText_dyn();

		void drawTooltipImage(bool bindGlobalG);
		::Dynamic drawTooltipImage_dyn();

		void drawString( ::kha::graphics2::Graphics g,::String text, ::Dynamic xOffset,::hx::Null< Float >  yOffset,::hx::Null< int >  align,::hx::Null< bool >  truncation);
		::Dynamic drawString_dyn();

		void endElement( ::Dynamic elementSize);
		::Dynamic endElement_dyn();

		void highlightNextRow();
		::Dynamic highlightNextRow_dyn();

		Float getRatio(Float ratio,Float dyn);
		::Dynamic getRatio_dyn();

		void row(::Array< Float > ratios);
		::Dynamic row_dyn();

		void indent(::hx::Null< bool >  bothSides);
		::Dynamic indent_dyn();

		void unindent(::hx::Null< bool >  bothSides);
		::Dynamic unindent_dyn();

		void fadeColor();
		::Dynamic fadeColor_dyn();

		void fill(Float x,Float y,Float w,Float h,int color);
		::Dynamic fill_dyn();

		void rect(Float x,Float y,Float w,Float h,int color,::hx::Null< Float >  strength);
		::Dynamic rect_dyn();

		void drawRect( ::kha::graphics2::Graphics g,bool fill,Float x,Float y,Float w,Float h,::hx::Null< Float >  strength);
		::Dynamic drawRect_dyn();

		bool isVisible(Float elemH);
		::Dynamic isVisible_dyn();

		bool getReleased(::hx::Null< Float >  elemH);
		::Dynamic getReleased_dyn();

		bool getPushed(::hx::Null< Float >  elemH);
		::Dynamic getPushed_dyn();

		bool getStarted(::hx::Null< Float >  elemH);
		::Dynamic getStarted_dyn();

		bool getInitialHover(::hx::Null< Float >  elemH);
		::Dynamic getInitialHover_dyn();

		bool getHover(::hx::Null< Float >  elemH);
		::Dynamic getHover_dyn();

		bool getInputInRect(Float x,Float y,Float w,Float h,::hx::Null< Float >  scale);
		::Dynamic getInputInRect_dyn();

		void onMouseDown(int button,int x,int y);
		::Dynamic onMouseDown_dyn();

		void onMouseUp(int button,int x,int y);
		::Dynamic onMouseUp_dyn();

		void onMouseMove(int x,int y,int movementX,int movementY);
		::Dynamic onMouseMove_dyn();

		void onMouseWheel(int delta);
		::Dynamic onMouseWheel_dyn();

		void setInputPosition(int x,int y);
		::Dynamic setInputPosition_dyn();

		void onPenDown(int x,int y,Float pressure);
		::Dynamic onPenDown_dyn();

		void onPenUp(int x,int y,Float pressure);
		::Dynamic onPenUp_dyn();

		void onPenMove(int x,int y,Float pressure);
		::Dynamic onPenMove_dyn();

		void onKeyDown(int code);
		::Dynamic onKeyDown_dyn();

		void onKeyUp(int code);
		::Dynamic onKeyUp_dyn();

		void onKeyPress(::String _hx_char);
		::Dynamic onKeyPress_dyn();

		::String onCut();
		::Dynamic onCut_dyn();

		::String onCopy();
		::Dynamic onCopy_dyn();

		void onPaste(::String s);
		::Dynamic onPaste_dyn();

		Float ELEMENT_W();
		::Dynamic ELEMENT_W_dyn();

		Float ELEMENT_H();
		::Dynamic ELEMENT_H_dyn();

		Float ELEMENT_OFFSET();
		::Dynamic ELEMENT_OFFSET_dyn();

		Float ARROW_SIZE();
		::Dynamic ARROW_SIZE_dyn();

		Float BUTTON_H();
		::Dynamic BUTTON_H_dyn();

		Float CHECK_SIZE();
		::Dynamic CHECK_SIZE_dyn();

		Float CHECK_SELECT_SIZE();
		::Dynamic CHECK_SELECT_SIZE_dyn();

		int FONT_SIZE();
		::Dynamic FONT_SIZE_dyn();

		int SCROLL_W();
		::Dynamic SCROLL_W_dyn();

		Float TEXT_OFFSET();
		::Dynamic TEXT_OFFSET_dyn();

		int TAB_W();
		::Dynamic TAB_W_dyn();

		int HEADER_DRAG_H();
		::Dynamic HEADER_DRAG_H_dyn();

		Float SCALE();
		::Dynamic SCALE_dyn();

		Float TOOLTIP_DELAY();
		::Dynamic TOOLTIP_DELAY_dyn();

		void resize( ::zui::Handle handle,int w,int h);
		::Dynamic resize_dyn();

};

} // end namespace zui

#endif /* INCLUDED_zui_Zui */ 
