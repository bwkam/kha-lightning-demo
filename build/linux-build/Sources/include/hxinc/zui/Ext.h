// Generated by Haxe 4.3.0+fa3f709
#ifndef INCLUDED_zui_Ext
#define INCLUDED_zui_Ext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(zui,Ext)
HX_DECLARE_CLASS1(zui,Handle)
HX_DECLARE_CLASS1(zui,Zui)

namespace zui{


class HXCPP_CLASS_ATTRIBUTES Ext_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Ext_obj OBJ_;
		Ext_obj();

	public:
		enum { _hx_ClassId = 0x262c4873 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="zui.Ext")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"zui.Ext"); }

		inline static ::hx::ObjectPtr< Ext_obj > __new() {
			::hx::ObjectPtr< Ext_obj > __this = new Ext_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Ext_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Ext_obj *__this = (Ext_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Ext_obj), false, "zui.Ext"));
			*(void **)__this = Ext_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Ext_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Ext",81,c4,34,00); }

		static void __boot();
		static Float floatInput( ::zui::Zui ui, ::zui::Handle handle,::String label,::hx::Null< int >  align,::hx::Null< Float >  precision);
		static ::Dynamic floatInput_dyn();

		static void initPath( ::zui::Handle handle,::String systemId);
		static ::Dynamic initPath_dyn();

		static ::String dataPath;
		static ::String lastPath;
		static ::String fileBrowser( ::zui::Zui ui, ::zui::Handle handle,::hx::Null< bool >  foldersOnly);
		static ::Dynamic fileBrowser_dyn();

		static int inlineRadio( ::zui::Zui ui, ::zui::Handle handle,::Array< ::String > texts,::hx::Null< int >  align);
		static ::Dynamic inlineRadio_dyn();

		static  ::zui::Handle wheelSelectedHandle;
		static  ::zui::Handle gradientSelectedHandle;
		static int colorWheel( ::zui::Zui ui, ::zui::Handle handle,::hx::Null< bool >  alpha, ::Dynamic w, ::Dynamic h,::hx::Null< bool >  colorPreview, ::Dynamic picker);
		static ::Dynamic colorWheel_dyn();

		static ::String rightAlignNumber(int number,int length);
		static ::Dynamic rightAlignNumber_dyn();

		static bool textAreaLineNumbers;
		static bool textAreaScrollPastEnd;
		static  ::Dynamic textAreaColoring;
		static ::String textArea( ::zui::Zui ui, ::zui::Handle handle,::hx::Null< int >  align,::hx::Null< bool >  editable,::String label,::hx::Null< bool >  wordWrap);
		static ::Dynamic textArea_dyn();

		static void scrollAlign( ::zui::Zui ui, ::zui::Handle handle);
		static ::Dynamic scrollAlign_dyn();

		static int _ELEMENT_OFFSET;
		static int _BUTTON_COL;
		static void beginMenu( ::zui::Zui ui);
		static ::Dynamic beginMenu_dyn();

		static void endMenu( ::zui::Zui ui);
		static ::Dynamic endMenu_dyn();

		static bool menuButton( ::zui::Zui ui,::String text);
		static ::Dynamic menuButton_dyn();

		static Float MENUBAR_H( ::zui::Zui ui);
		static ::Dynamic MENUBAR_H_dyn();

		static Float dist(Float x1,Float y1,Float x2,Float y2);
		static ::Dynamic dist_dyn();

		static Float fract(Float f);
		static ::Dynamic fract_dyn();

		static Float mix(Float x,Float y,Float a);
		static ::Dynamic mix_dyn();

		static Float clamp(Float x,Float minVal,Float maxVal);
		static ::Dynamic clamp_dyn();

		static Float step(Float edge,Float x);
		static ::Dynamic step_dyn();

		static Float kx;
		static Float ky;
		static Float kz;
		static Float kw;
		static ::Array< Float > ar;
		static void hsvToRgb(Float cR,Float cG,Float cB,::Array< Float > out);
		static ::Dynamic hsvToRgb_dyn();

		static Float Kx;
		static Float Ky;
		static Float Kz;
		static Float Kw;
		static Float e;
		static void rgbToHsv(Float cR,Float cG,Float cB,::Array< Float > out);
		static ::Dynamic rgbToHsv_dyn();

};

} // end namespace zui

#endif /* INCLUDED_zui_Ext */ 
