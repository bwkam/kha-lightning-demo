// Generated by Haxe 4.3.0+fa3f709
#ifndef INCLUDED_cpp_Int64Map
#define INCLUDED_cpp_Int64Map

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
HX_DECLARE_CLASS1(cpp,Int64Map)
HX_DECLARE_CLASS1(haxe,IMap)

namespace cpp{


class HXCPP_CLASS_ATTRIBUTES Int64Map_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Int64Map_obj OBJ_;
		Int64Map_obj();

	public:
		enum { _hx_ClassId = 0x1f960db2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="cpp.Int64Map")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"cpp.Int64Map"); }
		static ::hx::ObjectPtr< Int64Map_obj > __new();
		static ::hx::ObjectPtr< Int64Map_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Int64Map_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Int64Map",cf,9a,3e,c9); }

		 ::Dynamic h;
		inline  ::Dynamic _hx_set_h(::hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return h=_hx_v; }
		void set(::cpp::Int64 key, ::Dynamic value);
		::Dynamic set_dyn();

		 ::Dynamic get(::cpp::Int64 key);
		::Dynamic get_dyn();


  inline void set(cpp::Int64 key, ::null value) { __int64_hash_set(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, bool value) { __int64_hash_set(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, char value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, unsigned char value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, signed char value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, short value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, unsigned short value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, int value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, unsigned int value) { __int64_hash_set_int(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, float value) { __int64_hash_set_float(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, double value) { __int64_hash_set_float(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, ::String value) { __int64_hash_set_string(HX_MAP_THIS,key,value); }
  inline void set(cpp::Int64 key, cpp::Int64 value) { __int64_hash_set_int64(HX_MAP_THIS,key,value); }

  template<typename V, typename H>
  inline void set(cpp::Int64 key, const ::cpp::Struct<V,H> &value) {__int64_hash_set(HX_MAP_THIS,key,value); }
  template<typename F>
  inline void set(cpp::Int64 key, const ::cpp::Function<F> &value) {__int64_hash_set(HX_MAP_THIS,key,value); }
  template<typename V>
  inline void set(cpp::Int64 key, const ::cpp::Pointer<V> &value) {__int64_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }

  template<typename VALUE>
  inline void set(Dynamic &key, const VALUE &value) { set( (cpp::Int64)key, value ); }

  inline bool get_bool(cpp::Int64 key) { return __int64_hash_get_bool(h,key); }
  inline int get_int(cpp::Int64 key) { return __int64_hash_get_int(h,key); }
  inline Float get_float(cpp::Int64 key) { return __int64_hash_get_float(h,key); }
  inline String get_string(cpp::Int64 key) { return __int64_hash_get_string(h,key); }
  inline cpp::Int64 get_int64(cpp::Int64 key) { return __int64_hash_get_int64(h,key); }

};

} // end namespace cpp

#endif /* INCLUDED_cpp_Int64Map */ 
