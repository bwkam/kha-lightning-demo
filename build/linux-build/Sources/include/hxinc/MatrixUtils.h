// Generated by Haxe 4.3.0+fa3f709
#ifndef INCLUDED_MatrixUtils
#define INCLUDED_MatrixUtils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(MatrixUtils)
HX_DECLARE_CLASS2(kha,math,FastMatrix4)
HX_DECLARE_CLASS2(kha,math,FastVector3)



class HXCPP_CLASS_ATTRIBUTES MatrixUtils_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MatrixUtils_obj OBJ_;
		MatrixUtils_obj();

	public:
		enum { _hx_ClassId = 0x04c4fe30 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="MatrixUtils")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"MatrixUtils"); }

		inline static ::hx::ObjectPtr< MatrixUtils_obj > __new() {
			::hx::ObjectPtr< MatrixUtils_obj > __this = new MatrixUtils_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MatrixUtils_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MatrixUtils_obj *__this = (MatrixUtils_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MatrixUtils_obj), false, "MatrixUtils"));
			*(void **)__this = MatrixUtils_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MatrixUtils_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MatrixUtils",10,30,25,f4); }

		static  ::kha::math::FastMatrix4 rotateMatrix4( ::kha::math::FastMatrix4 matrix,Float angle, ::kha::math::FastVector3 axis);
		static ::Dynamic rotateMatrix4_dyn();

};


#endif /* INCLUDED_MatrixUtils */ 
